{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\"; // Firebase Config\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  projectId: process.env.REACT_APP_projectId,\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n  measurementId: process.env.REACT_APP_measurementId\n}; // Firebase App\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig); // DB\n\nconst db = firebaseApp.firestore(); // Auth\n\nconst auth = firebase.auth(); // Google Provider\n\nconst googleProvider = new firebase.auth.GoogleAuthProvider(); // Enable offline mode\n\nfirebase.firestore().enablePersistence().catch(err => {\n  if (err.code === 'failed-precondition') {\n    // Multiple tabs open, persistence can only be enabled\n    // in one tab at a a time.\n    // ...\n    console.log(err);\n  } else if (err.code === 'unimplemented') {\n    // The current browser does not support all of the\n    // features required to enable persistence\n    // ...\n    console.log(err);\n  }\n}); // Function to create user profile document\n\nconst createUserProfileDocument = async user => {\n  // Document ref\n  const docRef = db.collection(\"users\").doc(user.uid); // snapShot\n\n  const snapShot = await docRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = user;\n    const createdAt = new Date();\n    let display_name;\n\n    if (!!displayName) {\n      display_name = displayName;\n    } else {\n      display_name = email;\n    }\n\n    try {\n      await docRef.set({\n        displayName: display_name,\n        email,\n        createdAt,\n        breakStart: {},\n        breakEnd: {}\n      });\n    } catch (error) {\n      console.log('Error Creating User', error.message);\n    }\n  }\n\n  return docRef;\n};\n\nexport { db, auth, googleProvider, createUserProfileDocument };","map":{"version":3,"sources":["/Users/juanlugo/Desktop/sp-firebase/src/firebase/firebase.js"],"names":["firebase","firebaseConfig","apiKey","process","env","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","measurementId","REACT_APP_measurementId","firebaseApp","initializeApp","db","firestore","auth","googleProvider","GoogleAuthProvider","enablePersistence","catch","err","code","console","log","createUserProfileDocument","user","docRef","collection","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","display_name","set","breakStart","breakEnd","error","message"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP,C,CAEA;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADC;AAErBC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFH;AAGrBC,EAAAA,SAAS,EAAEL,OAAO,CAACC,GAAR,CAAYK,mBAHF;AAIrBC,EAAAA,aAAa,EAAEP,OAAO,CAACC,GAAR,CAAYO,uBAJN;AAKrBC,EAAAA,iBAAiB,EAAET,OAAO,CAACC,GAAR,CAAYS,2BALV;AAMrBC,EAAAA,KAAK,EAAEX,OAAO,CAACC,GAAR,CAAYW,eANE;AAOrBC,EAAAA,aAAa,EAAEb,OAAO,CAACC,GAAR,CAAYa;AAPN,CAAvB,C,CAUA;;AACA,MAAMC,WAAW,GAAGlB,QAAQ,CAACmB,aAAT,CAAuBlB,cAAvB,CAApB,C,CAEA;;AACA,MAAMmB,EAAE,GAAGF,WAAW,CAACG,SAAZ,EAAX,C,CAEA;;AACA,MAAMC,IAAI,GAAGtB,QAAQ,CAACsB,IAAT,EAAb,C,CAEA;;AACA,MAAMC,cAAc,GAAG,IAAIvB,QAAQ,CAACsB,IAAT,CAAcE,kBAAlB,EAAvB,C,CAEA;;AACAxB,QAAQ,CAACqB,SAAT,GAAqBI,iBAArB,GACGC,KADH,CACUC,GAAD,IAAS;AACd,MAAIA,GAAG,CAACC,IAAJ,KAAa,qBAAjB,EAAwC;AACtC;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACD,GALD,MAKO,IAAIA,GAAG,CAACC,IAAJ,KAAa,eAAjB,EAAkC;AACvC;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACD;AACF,CAbH,E,CAeA;;AACA,MAAMI,yBAAyB,GAAG,MAAOC,IAAP,IAAgB;AAChD;AACA,QAAMC,MAAM,GAAGb,EAAE,CAACc,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BH,IAAI,CAACI,GAAhC,CAAf,CAFgD,CAIhD;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,MAAM,CAACK,GAAP,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AAEpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBT,IAA/B;AACA,UAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AAEA,QAAIC,YAAJ;;AAEA,QAAI,CAAC,CAACJ,WAAN,EAAmB;AACjBI,MAAAA,YAAY,GAAGJ,WAAf;AACD,KAFD,MAEO;AACLI,MAAAA,YAAY,GAAGH,KAAf;AACD;;AAED,QAAI;AACF,YAAMR,MAAM,CAACY,GAAP,CAAW;AACfL,QAAAA,WAAW,EAAEI,YADE;AAEfH,QAAAA,KAFe;AAGfC,QAAAA,SAHe;AAIfI,QAAAA,UAAU,EAAE,EAJG;AAKfC,QAAAA,QAAQ,EAAE;AALK,OAAX,CAAN;AAOD,KARD,CAQE,OAAOC,KAAP,EAAc;AACdnB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCkB,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOhB,MAAP;AACD,CAlCD;;AAoCA,SAASb,EAAT,EAAaE,IAAb,EAAmBC,cAAnB,EAAmCQ,yBAAnC","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\n// Firebase Config\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  projectId: process.env.REACT_APP_projectId,\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n  measurementId: process.env.REACT_APP_measurementId\n};\n\n// Firebase App\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\n// DB\nconst db = firebaseApp.firestore();\n\n// Auth\nconst auth = firebase.auth();\n\n// Google Provider\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\n\n// Enable offline mode\nfirebase.firestore().enablePersistence()\n  .catch((err) => {\n    if (err.code === 'failed-precondition') {\n      // Multiple tabs open, persistence can only be enabled\n      // in one tab at a a time.\n      // ...\n      console.log(err);\n    } else if (err.code === 'unimplemented') {\n      // The current browser does not support all of the\n      // features required to enable persistence\n      // ...\n      console.log(err);\n    }\n  });\n\n// Function to create user profile document\nconst createUserProfileDocument = async (user) => {\n  // Document ref\n  const docRef = db.collection(\"users\").doc(user.uid);\n\n  // snapShot\n  const snapShot = await docRef.get();\n\n  if (!snapShot.exists) {\n\n    const { displayName, email } = user;\n    const createdAt = new Date();\n\n    let display_name;\n\n    if (!!displayName) {\n      display_name = displayName;\n    } else {\n      display_name = email;\n    }\n\n    try {\n      await docRef.set({\n        displayName: display_name,\n        email,\n        createdAt,\n        breakStart: {},\n        breakEnd: {}\n      })\n    } catch (error) {\n      console.log('Error Creating User', error.message);\n    }\n  }\n\n  return docRef;\n}\n\nexport { db, auth, googleProvider, createUserProfileDocument };"]},"metadata":{},"sourceType":"module"}