{"ast":null,"code":"var _jsxFileName = \"/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormCompare/FormCompare.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // Styles\n\nimport \"./FormCompare.css\"; // Firebase\n\nimport { db } from \"../../../firebase/firebase\";\nimport firebase from \"firebase/app\"; // Data\n\nimport data_electricity_tariffs from '../../../utilities/data_tariffs/data_tariffs_es/data_electricity_tariffs';\nimport data_gas_tariffs from '../../../utilities/data_tariffs/data_tariff_gs/data_gas_tariffs';\nimport data_dual_tariffs from '../../../utilities/data_tariffs/data_tariff_dual/data_dual_tariffs'; // Swal\n\nimport swal from '@sweetalert/with-react'; // Phone Number Validation\n\nimport { parsePhoneNumber } from 'libphonenumber-js'; // Icons\n\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io'; // Components\n\nimport FormScript from '../FormScript/FormScript';\nimport FormAssistant from \"../FormAssistant/FormAssistant\";\nimport Error from '../../Error/Error';\nimport ReviewStars from '../../ReviewStars/ReviewStars';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FormCompare({\n  customerInformation,\n  user,\n  electricityInformation,\n  gasInformation,\n  avgElec,\n  avgGas,\n  showScript,\n  progressBar,\n  updateCustomerInformation,\n  updateShowOverlay,\n  updateShowFormCompare,\n  updateShowFormUsageKWH,\n  updateShowFormUsageGBP_es,\n  updateShowFormUsageAVG,\n  updateShowFormUsageGAS,\n  updateShowFormUsageGBP_gs,\n  updateShowFormDetails,\n  updateShowFormDebt,\n  updateProgressBar\n}) {\n  _s();\n\n  /** STATES */\n  // Content Loaded state\n  const [contentLoaded, updateContentLoaded] = useState(false);\n  const [content, updateContent] = useState({});\n  const [array_to, update_array_to] = useState(3);\n  const [bestMatch, setBestMatch] = useState({});\n  const [usage_expended, update_usage_expended] = useState({});\n  const [usage_expended_elec, update_usage_expended_elec] = useState({});\n  const [usage_expended_gas, update_usage_expended_gas] = useState({}); // Error State\n\n  const [error, updateError] = useState(false);\n  /** FUNCTIONS */\n\n  /**---- */\n  // Function to create a new array without the same supplier\n  // Sorted data\n  // const sorted_data = sorted_data_desc.filter(function (obj) {\n  //   return obj.supplier_code !== 'EDF';\n  // });\n\n  /**---- */\n  // Scroll to top\n\n  useEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }, []); // Error smooth scroll\n\n  useEffect(() => {\n    if (error) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\"); // smooth scroll to element and align it at the bottom\n\n        element.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"center\"\n        });\n      };\n\n      scroll_to();\n    }\n  }, [error]); // Data\n\n  const elec_data = data_electricity_tariffs.tariffs;\n  const gas_data = data_gas_tariffs.tariffs;\n  const dual_data = data_dual_tariffs.tariffs;\n  /** Variables */\n  // same_supplier\n\n  const same_supplier = customerInformation.fuel_description.same_supplier; // dual_active\n\n  const dual_active = customerInformation.fuel_description.dual_active; // gas_only\n\n  const gas_only = customerInformation.fuel_description.gas_only; // elec_only\n\n  const elec_only = customerInformation.fuel_description.elec_only; // postcode_formatted\n\n  const postcode_formatted = customerInformation.customerAddres.postcode.replace(/\\s/g, '').trim().toLowerCase(); // doornumber_formatted\n\n  const doornumber_formatted = customerInformation.customerAddres.doornumber.replace(/\\s/g, '').trim().toLowerCase(); // uid\n\n  const uid = `${postcode_formatted}-${doornumber_formatted}`; // Show more button\n\n  let up_to = 0;\n\n  const load_more = e => {\n    e.preventDefault();\n\n    if (up_to === up_to) {\n      up_to = array_to + 3;\n      return update_array_to(up_to);\n    }\n  }; // Execute Overlay\n\n\n  useEffect(() => {\n    // Show Overlay\n    updateShowOverlay(true);\n  }, [FormCompare]); // Function to sort the JSON by property\n\n  const sortByProperty = property => {\n    return function (a, b) {\n      if (a[property] > b[property]) return 1;else if (a[property] < b[property]) return -1;\n      return 0;\n    };\n  }; // Information for elec_only\n\n\n  useEffect(() => {\n    // Elec_only\n    if (elec_only) {\n      // console.log('elec_only');\n      if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n        // Usage introduced\n        const usage_kwh_expended = customerInformation.usage_kwh_description.usage_kwh_expended; // Period introduced\n\n        const usage_kwh_period = customerInformation.usage_kwh_description.usage_kwh_period;\n        let usage_by_period = 0;\n\n        if (usage_kwh_period === 'annu') {\n          usage_by_period = parseFloat(usage_kwh_expended) * 1;\n        } else {\n          usage_by_period = Math.round(parseFloat(usage_kwh_expended) * 12);\n        } // console.log(customerInformation.tariff_description);\n        // console.log(usage_by_period);\n        // Unit rate of tariff selected\n\n\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate; // Usage by period\n        // const usage = ((usage_by_period * tariff_unit_rate) / 100);\n\n        const usage = usage_by_period * (tariff_unit_rate / 100); // Sorted data desc\n\n        const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n\n        /**------ */\n        // Sorted data\n        // const sorted_data = sorted_data_desc.filter(function (obj) {\n        //   return obj.supplier_code !== 'EDF';\n        // });\n\n        /**------ */\n        // Add content\n\n        updateContent({ ...content,\n          sorted_data\n        }); // Update state\n\n        update_usage_expended({ ...usage_expended,\n          usage: usage\n        }); // Show content;\n\n        updateContentLoaded(true); // Hidde Overlay\n\n        updateShowOverlay(false);\n      }\n\n      if (customerInformation.hasOwnProperty('usage_gbp_description_es')) {\n        // Usage introduced\n        const usage_gbp_expended = customerInformation.usage_gbp_description_es.usage_gbp_expended; // Period introduced\n\n        const usage_gbp_period = customerInformation.usage_gbp_description_es.usage_gbp_period;\n        let usage_by_period = 0;\n\n        if (usage_gbp_period === 'annu') {\n          usage_by_period = parseFloat(usage_gbp_expended) * 1;\n        } else {\n          usage_by_period = Math.round(parseFloat(usage_gbp_expended) * 12);\n        } // Sorted data\n\n\n        const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n\n        updateContent({ ...content,\n          sorted_data\n        }); // Update state\n\n        update_usage_expended({ ...usage_expended,\n          usage: usage_by_period\n        }); // Show content;\n\n        updateContentLoaded(true); // Hidde Overlay\n\n        updateShowOverlay(false);\n      }\n\n      if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n        // Usage introduced\n        const usage_size_expended = customerInformation.usage_property_size_es.usage_size_expended; // Unit rate of tariff selected\n\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate; // Usage by period\n\n        const usage = usage_size_expended * tariff_unit_rate / 100; // Sorted data\n\n        const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n\n        updateContent({ ...content,\n          sorted_data\n        }); // Update state\n\n        update_usage_expended({ ...usage_expended,\n          usage: usage\n        }); // Show content;\n\n        updateContentLoaded(true); // Hidde Overlay\n\n        updateShowOverlay(false);\n      }\n    }\n  }, [elec_only]); // Information for gas_only\n\n  useEffect(() => {\n    // Gas_only\n    if (gas_only) {\n      // console.log('gas_only');\n      if (customerInformation.hasOwnProperty('usage_gas_description')) {\n        // Usage introduced\n        const usage_kwh_expended = customerInformation.usage_gas_description.usage_kwh_expended; // Period introduced\n\n        const usage_kwh_period = customerInformation.usage_gas_description.usage_kwh_period; // Usage by period\n\n        let usage_by_period = 0;\n\n        if (usage_kwh_period === 'annu') {\n          usage_by_period = parseFloat(usage_kwh_expended) * 1;\n        } else {\n          usage_by_period = Math.round(parseFloat(usage_kwh_expended) * 12);\n        } // Unit rate of tariff selected\n\n\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate; // Usage by period\n\n        const usage = usage_by_period * tariff_unit_rate / 100; // Sorted data\n\n        const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n\n        updateContent({ ...content,\n          sorted_data\n        }); // Update state\n\n        update_usage_expended({ ...usage_expended,\n          usage: usage\n        }); // Show content;\n\n        updateContentLoaded(true); // Hidde Overlay\n\n        updateShowOverlay(false);\n      }\n\n      if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n        // Usage introduced\n        const usage_gbp_expended = customerInformation.usage_gbp_description_gs.usage_gbp_expended; // Period introduced\n\n        const usage_gbp_period = customerInformation.usage_gbp_description_gs.usage_gbp_period;\n        let usage_by_period = 0;\n\n        if (usage_gbp_period === 'annu') {\n          usage_by_period = parseFloat(usage_gbp_expended) * 1;\n        } else {\n          usage_by_period = Math.round(parseFloat(usage_gbp_expended) * 12);\n        } // Sorted data\n\n\n        const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n\n        updateContent({ ...content,\n          sorted_data\n        }); // Update state\n\n        update_usage_expended({ ...usage_expended,\n          usage: usage_by_period\n        }); // Show content;\n\n        updateContentLoaded(true); // Hidde Overlay\n\n        updateShowOverlay(false);\n      }\n\n      if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n        // Usage introduced\n        const usage_size_expended = parseFloat(customerInformation.usage_property_size_gs.usage_size_expended); // Usage introduced for gas\n\n        let usage_size_expended_gas; // 1 bedroom\n\n        if (usage_size_expended === 1800) {\n          // Unit rate of tariff selected gas\n          usage_size_expended_gas = 8000;\n        } // 2 to 3 bedrooms\n\n\n        if (usage_size_expended === 2900) {\n          // Unit rate of tariff selected gas\n          usage_size_expended_gas = 12000;\n        } // 4+ bedrooms\n\n\n        if (usage_size_expended === 4300) {\n          // Unit rate of tariff selected gas\n          usage_size_expended_gas = 17000;\n        } // Unit rate of tariff selected\n\n\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate; // Usage by period\n\n        const usage = usage_size_expended_gas * tariff_unit_rate / 100; // Sorted data\n\n        const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n\n        updateContent({ ...content,\n          sorted_data\n        }); // Update state\n\n        update_usage_expended({ ...usage_expended,\n          usage: usage\n        }); // Show content;\n\n        updateContentLoaded(true); // Hidde Overlay\n\n        updateShowOverlay(false);\n      }\n    }\n  }, [gas_only]); // Information for dual_active\n\n  useEffect(() => {\n    // Dual active\n    if (dual_active) {\n      // Sorted data\n      const sorted_data = dual_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n      // Add content\n\n      updateContent({ ...content,\n        sorted_data\n      });\n\n      if (same_supplier) {\n        // Sorted data\n        // console.log('Same supplier === true');\n\n        /**- KWH SECTION -*/\n        // KWH - ELEC\n        if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_kwh_description.usage_kwh_expended; // Period introduced\n\n          const usage_kwh_period = customerInformation.usage_kwh_description.usage_kwh_period;\n          let usage_by_period = 0;\n\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = parseFloat(usage_kwh_expended) * 1;\n          } else {\n            usage_by_period = Math.round(parseFloat(usage_kwh_expended) * 12);\n          } // Unit rate of tariff selected\n\n\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_elec; // console.log(tariff_unit_rate);\n          // Usage by period\n\n          const usage_elec = usage_by_period * tariff_unit_rate / 100; // Update state\n\n          update_usage_expended_elec({ ...usage_expended_elec,\n            usage: usage_elec\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        } // KWH - GAS\n\n\n        if (customerInformation.hasOwnProperty('usage_gas_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_gas_description.usage_kwh_expended; // Period introduced\n\n          const usage_kwh_period = customerInformation.usage_gas_description.usage_kwh_period;\n          let usage_by_period = 0;\n\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = parseFloat(usage_kwh_expended) * 1;\n          } else {\n            usage_by_period = Math.round(parseFloat(usage_kwh_expended) * 12);\n          } // Unit rate of tariff selected\n\n\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_gas; // console.log(tariff_unit_rate);\n          // Usage by period\n\n          const usage_gas = usage_by_period * tariff_unit_rate / 100; // console.log(usage_gas);\n          // Update state\n\n          update_usage_expended_gas({ ...usage_expended_gas,\n            usage: usage_gas\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        }\n        /**- GBP SECTION */\n        // GBP - ELEC\n\n\n        if (customerInformation.hasOwnProperty('usage_gbp_description_es')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_es.usage_gbp_expended; // Period introduced\n\n          const usage_gbp_period = customerInformation.usage_gbp_description_es.usage_gbp_period;\n          let usage_by_period = 0;\n\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = parseFloat(usage_gbp_expended) * 1;\n          } else {\n            usage_by_period = Math.round(parseFloat(usage_gbp_expended) * 12);\n          } // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n          // Update state\n\n\n          update_usage_expended_elec({ ...usage_expended_elec,\n            usage: usage_by_period\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        } // GBP - GAS\n\n\n        if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_gs.usage_gbp_expended; // Period introduced\n\n          const usage_gbp_period = customerInformation.usage_gbp_description_gs.usage_gbp_period;\n          let usage_by_period = 0;\n\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = parseFloat(usage_gbp_expended) * 1;\n          } else {\n            usage_by_period = Math.round(parseFloat(usage_gbp_expended) * 12);\n          } // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n          // Update state\n\n\n          update_usage_expended_gas({ ...usage_expended_gas,\n            usage: usage_by_period\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        }\n        /**- PROPERTY SIZE SECTION -*/\n        // PROPERTY SIZE - ELEC\n\n\n        if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n          // Usage introduced\n          const usage_size_expended = customerInformation.usage_property_size_es.usage_size_expended; // Unit rate of tariff selected\n\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_elec; // Usage by period\n\n          const usage = usage_size_expended * tariff_unit_rate / 100; // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n          // Update state\n\n          update_usage_expended_elec({ ...usage_expended_elec,\n            usage: usage\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        } // PROPERTY SIZE - GAS\n\n\n        if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n          // Usage introduceds\n          const usage_size_expended = parseFloat(customerInformation.usage_property_size_gs.usage_size_expended); // Usage introduced for gas\n\n          let usage_size_expended_gas; // 1 bedroom\n\n          if (usage_size_expended === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          } // 2 to 3 bedrooms\n\n\n          if (usage_size_expended === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          } // 4+ bedrooms\n\n\n          if (usage_size_expended === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          } // console.log(usage_size_expended_gas);\n          // Unit rate of tariff selected\n\n\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_gas; // Usage by period\n\n          const usage = usage_size_expended_gas * tariff_unit_rate / 100; // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n          // Update state\n\n          update_usage_expended_gas({ ...usage_expended_gas,\n            usage: usage\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        } // PROPERTY_SIZE_DUAL\n\n\n        if (customerInformation.hasOwnProperty('usage_property_size_dual')) {\n          // Usage introduced for elec\n          const usage_size_expended_elec = parseFloat(customerInformation.usage_property_size_dual.usage_size_expended); // Usage introduced for gas\n\n          let usage_size_expended_gas; // 1 bedroom\n\n          if (usage_size_expended_elec === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          } // 2 to 3 bedrooms\n\n\n          if (usage_size_expended_elec === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          } // 4+ bedrooms\n\n\n          if (usage_size_expended_elec === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          } // Unit rate of tariff selected elec\n\n\n          const tariff_unit_rate_elec = customerInformation.tariff_description.unit_rate_elec; // Unit rate of tariff selected gas\n\n          const tariff_unit_rate_gas = customerInformation.tariff_description.unit_rate_gas; // Usage by period\n\n          const usage_elec = usage_size_expended_elec * tariff_unit_rate_elec / 100;\n          const usage_gas = usage_size_expended_gas * tariff_unit_rate_gas / 100;\n          const usage = usage_elec + usage_gas; // // Sorted data\n          // const sorted_data = dual_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n          // Update state\n\n          update_usage_expended({ ...usage_expended,\n            usage\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        }\n      } else {\n        // console.log('Same supplier === false');\n\n        /**- KWH SECTION -*/\n        // KWH - ELEC\n        if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_kwh_description.usage_kwh_expended; // Period introduced\n\n          const usage_kwh_period = customerInformation.usage_kwh_description.usage_kwh_period;\n          let usage_by_period = 0;\n\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = parseFloat(usage_kwh_expended) * 1;\n          } else {\n            usage_by_period = Math.round(parseFloat(usage_kwh_expended) * 12);\n          } // Unit rate of tariff selected\n\n\n          const tariff_unit_rate_elec = customerInformation.tariff_description_elec.elec_tariff.unit_rate; // Usage by period\n\n          const usage_elec = usage_by_period * tariff_unit_rate_elec / 100; // console.log(usage_elec);\n          // Update state\n\n          update_usage_expended_elec({ ...usage_expended_elec,\n            usage: usage_elec\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        } // KWH - GAS\n\n\n        if (customerInformation.hasOwnProperty('usage_gas_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_gas_description.usage_kwh_expended; // Period introduced\n\n          const usage_kwh_period = customerInformation.usage_gas_description.usage_kwh_period;\n          let usage_by_period = 0;\n\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = parseFloat(usage_kwh_expended) * 1;\n          } else {\n            usage_by_period = Math.round(parseFloat(usage_kwh_expended) * 12);\n          } // Unit rate of tariff selected\n\n\n          const tariff_unit_rate_gas = customerInformation.tariff_description_gas.gas_tariff.unit_rate; // Usage by period\n\n          const usage_gas = usage_by_period * tariff_unit_rate_gas / 100; // console.log(usage_gas);\n          // Update state\n\n          update_usage_expended_gas({ ...usage_expended_gas,\n            usage: usage_gas\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        }\n        /**- GBP SECTION */\n        // GBP - ELEC\n\n\n        if (customerInformation.hasOwnProperty('usage_gbp_description_es')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_es.usage_gbp_expended; // Period introduced\n\n          const usage_gbp_period = customerInformation.usage_gbp_description_es.usage_gbp_period;\n          let usage_by_period = 0;\n\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = parseFloat(usage_gbp_expended) * 1;\n          } else {\n            usage_by_period = Math.round(parseFloat(usage_gbp_expended) * 12);\n          } // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n          // Update state\n\n\n          update_usage_expended_elec({ ...usage_expended_elec,\n            usage: usage_by_period\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        } // GBP - GAS\n\n\n        if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_gs.usage_gbp_expended; // Period introduced\n\n          const usage_gbp_period = customerInformation.usage_gbp_description_gs.usage_gbp_period;\n          let usage_by_period = 0;\n\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = parseFloat(usage_gbp_expended) * 1;\n          } else {\n            usage_by_period = Math.round(parseFloat(usage_gbp_expended) * 12);\n          } // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n          // Update state\n\n\n          update_usage_expended_gas({ ...usage_expended_gas,\n            usage: usage_by_period\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        }\n        /**- PROPERTY SIZE SECTION -*/\n        // PROPERTY SIZE - ELEC\n\n\n        if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n          // Usage introduced\n          const usage_size_expended = customerInformation.usage_property_size_es.usage_size_expended; // Unit rate of tariff selected\n\n          const tariff_unit_rate = customerInformation.tariff_description_elec.elec_tariff.unit_rate; // Usage by period\n\n          const usage = usage_size_expended * tariff_unit_rate / 100; // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n          // Update state\n\n          update_usage_expended_elec({ ...usage_expended_elec,\n            usage: usage\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        } // PROPERTY SIZE - GAS\n\n\n        if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n          // Usage introduceds\n          const usage_size_expended = parseFloat(customerInformation.usage_property_size_gs.usage_size_expended); // Usage introduced for gas\n\n          let usage_size_expended_gas; // 1 bedroom\n\n          if (usage_size_expended === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          } // 2 to 3 bedrooms\n\n\n          if (usage_size_expended === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          } // 4+ bedrooms\n\n\n          if (usage_size_expended === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          } // console.log(usage_size_expended_gas);\n          // Unit rate of tariff selected\n\n\n          const tariff_unit_rate = customerInformation.tariff_description_gas.gas_tariff.unit_rate; // Usage by period\n\n          const usage = usage_size_expended_gas * tariff_unit_rate / 100; // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n          // Update state\n\n          update_usage_expended_gas({ ...usage_expended_gas,\n            usage: usage\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        } // PROPERTY_SIZE_DUAL\n\n\n        if (customerInformation.hasOwnProperty('usage_property_size_dual')) {\n          // Usage introduced for elec\n          const usage_size_expended_elec = parseFloat(customerInformation.usage_property_size_dual.usage_size_expended); // Usage introduced for gas\n\n          let usage_size_expended_gas; // 1 bedroom\n\n          if (usage_size_expended_elec === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          } // 2 to 3 bedrooms\n\n\n          if (usage_size_expended_elec === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          } // 4+ bedrooms\n\n\n          if (usage_size_expended_elec === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          } // Unit rate of tariff selected elec\n\n\n          const tariff_unit_rate_elec = customerInformation.tariff_description_elec.elec_tariff.unit_rate; // Unit rate of tariff selected gas\n\n          const tariff_unit_rate_gas = customerInformation.tariff_description_gas.gas_tariff.unit_rate; // Usage by period\n\n          const usage_elec = usage_size_expended_elec * tariff_unit_rate_elec / 100;\n          const usage_gas = usage_size_expended_gas * tariff_unit_rate_gas / 100;\n          const usage = usage_elec + usage_gas; // // Sorted data\n          // const sorted_data = dual_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n          // Update state\n\n          update_usage_expended({ ...usage_expended,\n            usage\n          }); // Show content;\n\n          updateContentLoaded(true); // Hidde Overlay\n\n          updateShowOverlay(false);\n        }\n      }\n    }\n  }, [dual_active]); // Sorted data\n\n  let sorted_data = content.sorted_data; // usage\n\n  let usage = usage_expended.usage; // const usage_gas\n\n  const usage_gas = usage_expended_gas.usage; // const usage_elec\n\n  const usage_elec = usage_expended_elec.usage;\n\n  if (dual_active) {\n    if (customerInformation.hasOwnProperty('usage_property_size_dual')) {\n      usage = usage_expended.usage;\n    } else {\n      usage = usage_elec + usage_gas;\n    }\n  } // console.log(usage);\n  // console.log(usage_elec);\n  // console.log(usage_gas);\n  // Tariff info button - function to show modal\n\n\n  const tariff_info = (e, data) => {\n    e.preventDefault();\n    swal({\n      className: 'swal-modal_custom',\n      content: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-compare-details-info-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-compare-details-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-compare-details-info-img\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: data.supplier_img,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 957,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 956,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Tariff details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 960,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-compare-details-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Supplier: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: data.supplier_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 964,\n                    columnNumber: 32\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 964,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 963,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Plan name: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: data.tariff_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 968,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 968,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 967,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(ReviewStars, {\n                  stars: data.review_rating,\n                  customClass: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 972,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 971,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Early exit fee: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"\\xA3\", data.exit_fees]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 976,\n                    columnNumber: 38\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 976,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 975,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Estimated annual cost: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"\\xA3\", data.annual_cost]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 980,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 980,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 979,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Monthly direct debit: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"\\xA3\", data.monthly_cost]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 984,\n                    columnNumber: 44\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 984,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 983,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 962,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 955,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 11\n        }, this)\n      }, void 0, false)\n    });\n  };\n\n  const onPick = value => {\n    swal(\"Thanks for your rating!\", `You rated us ${value}/3`, \"success\");\n  };\n\n  const MoodButton = ({\n    rating,\n    onClick\n  }) => /*#__PURE__*/_jsxDEV(\"button\", {\n    rating: 1,\n    onClick: onPick,\n    children: \"Metele caliente\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 999,\n    columnNumber: 5\n  }, this); // choosePlan button\n\n\n  const choosePlan = async (e, data) => {\n    e.preventDefault(); // Update Error\n\n    updateError(false); // ID of card selected\n\n    const card_id = e.target.id; // Selected card\n\n    const card_content = document.getElementById(card_id); // Add class active\n\n    card_content.classList.add('active-card'); // Add and remove class\n\n    let active_class = document.querySelectorAll(\".active-card\");\n    [].forEach.call(active_class, function (el) {\n      el.classList.remove(\"active-card\");\n    });\n\n    if (card_id === sorted_data[0].tariff_id) {\n      card_content.className = \"form-compare-card-content active-card bestMatch-card\";\n    } else {\n      card_content.className = \"form-compare-card-content active-card\";\n    } // Supplier selected\n\n\n    const supplier_selected = content.sorted_data.find(element => element.tariff_id == card_id); // Switching details\n\n    const switching_details = {\n      supplier_selected\n    }; // Update customer information\n\n    updateCustomerInformation({ ...customerInformation,\n      switching_details\n    }); // Updating best match content\n\n    const {\n      tariff_name,\n      supplier_name\n    } = supplier_selected;\n    setBestMatch({ ...bestMatch,\n      tariff_name,\n      supplier_name\n    }); // SWAL\n\n    await swal({\n      className: 'swal-modal_custom',\n      buttons: {\n        cancel: \"Go back\",\n        confirm: \"Choose plan\"\n      },\n      content: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-compare-details-info-container\",\n          children: [/*#__PURE__*/_jsxDEV(MoodButton, {\n            rating: 1,\n            onClick: onPick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1066,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-compare-details-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-compare-details-info-img\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: data.supplier_img,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1072,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1071,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-compare-card-estimated-container\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-card-estimated\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Estimated cost\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1077,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"form-compare-card-estimated-amount\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"\\xA3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1078,\n                    columnNumber: 69\n                  }, this), (usage - data.annual_cost).toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1078,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"(\\xA3\", ((usage - data.annual_cost) / 12).toFixed(2), \" pm)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1079,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1076,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1075,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-compare-card-btn-signup-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"form-compare-card-btn-custom btn-signup\",\n                onClick: () => console.log('metele'),\n                children: \"Choose plan\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1084,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1083,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Tariff details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1087,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-compare-details-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Supplier: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: data.supplier_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1091,\n                    columnNumber: 32\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1091,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1090,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Plan name: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: data.tariff_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1095,\n                    columnNumber: 33\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1095,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1094,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(ReviewStars, {\n                  stars: data.review_rating,\n                  customClass: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1099,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1098,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Early exit fee: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"\\xA3\", data.exit_fees]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1103,\n                    columnNumber: 38\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1103,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1102,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Estimated annual cost: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"\\xA3\", data.annual_cost]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1107,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1107,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1106,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-single-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Monthly direct debit: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"\\xA3\", data.monthly_cost]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1111,\n                    columnNumber: 44\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1111,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1110,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1089,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1070,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1065,\n          columnNumber: 11\n        }, this)\n      }, void 0, false)\n    }).then(async result => {\n      if (result !== true) {\n        return;\n      }\n\n      ; // // Supplier selected\n      // const supplier_selected = content.sorted_data.find(element => element.tariff_id == card_id);\n      // if (!!customerInformation.hasOwnProperty('switching_details') === false) {\n      //   // Update Error\n      //   updateError(true);\n      //   return;\n      // }\n      // //Show Overlay\n      // updateShowOverlay(true);\n      // // Email agent\n      // const agentEmail = { \"email\": user.email };\n      // // const agentEmail = { \"email\": 'jesus-ramon.sicairos@utilityswitchboard.com' };\n      // // Endpoint\n      // const url = 'https://zohocontactcreatefunction.azurewebsites.net/api/HttpTrigger1?method=verifyContact';\n      // // Fetch customer data\n      // await fetch(url, {\n      //   method: 'POST',\n      //   body: JSON.stringify(agentEmail),\n      //   headers: {\n      //     'Content-Type': 'application/json'\n      //   },\n      // }).then((response) => {\n      //   return response.json();\n      // }).then((response) => {\n      //   // console.log(response);\n      //   // Update Customer informatin\n      //   updateCustomerInformation({\n      //     ...customerInformation,\n      //     agent: { email: user.email },\n      //     customerDetails: {\n      //       first_name: response.first_name ? response.first_name : '',\n      //       last_name: response.last_name ? response.last_name : '',\n      //       email: response.email ? response.email : '',\n      //       phone: response.phone ? parsePhoneNumber(response.phone, 'GB').number : ''\n      //     }\n      //   });\n      //   return response;\n      // }).catch((error) => {\n      //   // Error\n      //   console.error(`Catch an error fetching to postcoder ${error}`);\n      //   // Update Customer informatin\n      //   updateCustomerInformation({\n      //     ...customerInformation,\n      //     agent: { email: user.email },\n      //     customerDetails: {\n      //       first_name: '',\n      //       last_name: '',\n      //       email: '',\n      //       phone: ''\n      //     }\n      //   });\n      // });\n      // // Hide Overlay\n      // updateShowOverlay(false);\n      // // Update Error\n      // updateError(false);\n      // // Hide Form Compare\n      // updateShowFormCompare(false);\n      // // Update Progress Bar\n      // updateProgressBar({ ...progressBar, step: 8 });\n      // // Show Details\n      // updateShowFormDetails(true);\n    });\n  }; // cardSelected\n\n\n  const cardSelected = (e, id) => {\n    e.preventDefault(); // Update Error\n\n    updateError(false);\n    /**-- Adding active state to the card selected --*/\n    // ID of card selected\n\n    const card_id = id; // Selected card\n\n    const card_content = document.getElementById(card_id); // Add class active\n\n    card_content.classList.add('active-card'); // Add and remove class\n\n    let active_class = document.querySelectorAll(\".active-card\");\n    [].forEach.call(active_class, function (el) {\n      el.classList.remove(\"active-card\");\n    });\n\n    if (card_id === sorted_data[0].tariff_id) {\n      card_content.className = \"form-compare-card-content active-card bestMatch-card\";\n    } else {\n      card_content.className = \"form-compare-card-content active-card\";\n    } // Supplier selected\n\n\n    const supplier_selected = content.sorted_data.find(element => element.tariff_id == card_id); // Switching details\n\n    const switching_details = {\n      supplier_selected\n    }; // Update customer information\n\n    updateCustomerInformation({ ...customerInformation,\n      switching_details\n    }); // Updating best match content\n\n    const {\n      tariff_name,\n      supplier_name\n    } = supplier_selected;\n    setBestMatch({ ...bestMatch,\n      tariff_name,\n      supplier_name\n    });\n  }; // Adding initial customer data to firebase (Coming from Supply cc)\n\n\n  useEffect(() => {\n    /**-- Firebase --*/\n    (async () => {\n      const {\n        customerAddres,\n        useGas,\n        fuel,\n        fuel_description,\n        supplierInformation,\n        electricityPaymentType,\n        gasPaymentType,\n        economy7,\n        tariff_description,\n        tariff_description_elec,\n        tariff_description_gas,\n        usage_property_size_dual,\n        usage_property_size_es,\n        usage_property_size_gs,\n        usage_gas_description,\n        usage_gbp_description_gs,\n        usage_kwh_description,\n        usage_gbp_description_es,\n        debt\n      } = customerInformation; // elec_only || gas_only\n\n      if (elec_only || gas_only) {\n        db.collection(\"customers\").doc(uid).set({\n          created: firebase.firestore.FieldValue.serverTimestamp(),\n          step: 7,\n          customerAddres: {\n            doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n            addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n            addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n            city: customerAddres.city ? customerAddres.city : '',\n            postcode: customerAddres.postcode ? customerAddres.postcode : '',\n            mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n          },\n          MPANDetails: {\n            mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n            supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n            company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n          },\n          dataGas: {\n            current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n            meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n            company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n          },\n          useGas: {\n            gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n          },\n          fuel: {\n            dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n          },\n          fuel_description: {\n            dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n            elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n            gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n            same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n          },\n          supplierInformation: {\n            electricity_supplier: {\n              company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n              meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n              mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n              supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n            },\n            gas_supplier: {\n              company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n              current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n              meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n              mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n            }\n          },\n          electricityPaymentType: {\n            electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n            electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n          },\n          gasPaymentType: {\n            gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n            gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n          },\n          economy7: {\n            economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n            economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n          },\n          tariff_description,\n          // AVG\n          usage_property_size_dual: {\n            usage_size_entered: !!usage_property_size_dual ? usage_property_size_dual.usage_size_entered : false,\n            usage_size_expended: !!usage_property_size_dual ? usage_property_size_dual.usage_size_expended : false\n          },\n          usage_property_size_es: {\n            usage_size_entered: !!usage_property_size_es ? usage_property_size_es.usage_size_entered : false,\n            usage_size_expended: !!usage_property_size_es ? usage_property_size_es.usage_size_expended : false\n          },\n          usage_property_size_gs: {\n            usage_size_entered: !!usage_property_size_gs ? usage_property_size_gs.usage_size_entered : false,\n            usage_size_expended: !!usage_property_size_gs ? usage_property_size_gs.usage_size_expended : false\n          },\n          // GAS\n          usage_gas_description: {\n            usage_kwh_entered: !!usage_gas_description ? usage_gas_description.usage_kwh_entered : false,\n            usage_kwh_expended: !!usage_gas_description ? usage_gas_description.usage_kwh_expended : false,\n            usage_kwh_period: !!usage_gas_description ? usage_gas_description.usage_kwh_period : false\n          },\n          usage_gbp_description_gs: {\n            usage_gbp_entered: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_entered : false,\n            usage_gbp_expended: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_expended : false,\n            usage_gbp_period: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_period : false\n          },\n          // Elec\n          usage_kwh_description: {\n            usage_kwh_entered: !!usage_kwh_description ? usage_kwh_description.usage_kwh_entered : false,\n            usage_kwh_expended: !!usage_kwh_description ? usage_kwh_description.usage_kwh_expended : false,\n            usage_kwh_period: !!usage_kwh_description ? usage_kwh_description.usage_kwh_period : false\n          },\n          usage_gbp_description_es: {\n            usage_gbp_entered: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_entered : false,\n            usage_gbp_expended: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_expended : false,\n            usage_gbp_period: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_period : false\n          },\n          // AVG ELEC\n          avgElec: avgElec,\n          // AVG Gas\n          avgGas: avgGas,\n          debt\n        });\n      } // dual_active\n\n\n      if (dual_active) {\n        // same_supplier\n        if (same_supplier) {\n          db.collection(\"customers\").doc(uid).set({\n            created: firebase.firestore.FieldValue.serverTimestamp(),\n            step: 7,\n            customerAddres: {\n              doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n              addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n              addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n              city: customerAddres.city ? customerAddres.city : '',\n              postcode: customerAddres.postcode ? customerAddres.postcode : '',\n              mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n            },\n            MPANDetails: {\n              mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n              supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n              company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n            },\n            dataGas: {\n              current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n              meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n              company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n            },\n            useGas: {\n              gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n            },\n            fuel: {\n              dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n            },\n            fuel_description: {\n              dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n              elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n              gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n              same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n            },\n            supplierInformation: {\n              electricity_supplier: {\n                company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n                meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n                mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n                supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n              },\n              gas_supplier: {\n                company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n                current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n                meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n                mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n              }\n            },\n            electricityPaymentType: {\n              electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n              electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n            },\n            gasPaymentType: {\n              gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n              gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n            },\n            economy7: {\n              economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n              economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n            },\n            tariff_description,\n            // AVG\n            usage_property_size_dual: {\n              usage_size_entered: !!usage_property_size_dual ? usage_property_size_dual.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_dual ? usage_property_size_dual.usage_size_expended : false\n            },\n            usage_property_size_es: {\n              usage_size_entered: !!usage_property_size_es ? usage_property_size_es.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_es ? usage_property_size_es.usage_size_expended : false\n            },\n            usage_property_size_gs: {\n              usage_size_entered: !!usage_property_size_gs ? usage_property_size_gs.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_gs ? usage_property_size_gs.usage_size_expended : false\n            },\n            // GAS\n            usage_gas_description: {\n              usage_kwh_entered: !!usage_gas_description ? usage_gas_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_gas_description ? usage_gas_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_gas_description ? usage_gas_description.usage_kwh_period : false\n            },\n            usage_gbp_description_gs: {\n              usage_gbp_entered: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_period : false\n            },\n            // Elec\n            usage_kwh_description: {\n              usage_kwh_entered: !!usage_kwh_description ? usage_kwh_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_kwh_description ? usage_kwh_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_kwh_description ? usage_kwh_description.usage_kwh_period : false\n            },\n            usage_gbp_description_es: {\n              usage_gbp_entered: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_period : false\n            },\n            // AVG ELEC\n            avgElec: avgElec,\n            // AVG Gas\n            avgGas: avgGas\n          });\n        } else {\n          db.collection(\"customers\").doc(uid).set({\n            created: firebase.firestore.FieldValue.serverTimestamp(),\n            step: 7,\n            customerAddres: {\n              doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n              addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n              addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n              city: customerAddres.city ? customerAddres.city : '',\n              postcode: customerAddres.postcode ? customerAddres.postcode : '',\n              mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n            },\n            MPANDetails: {\n              mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n              supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n              company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n            },\n            dataGas: {\n              current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n              meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n              company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n            },\n            useGas: {\n              gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n            },\n            fuel: {\n              dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n            },\n            fuel_description: {\n              dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n              elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n              gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n              same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n            },\n            supplierInformation: {\n              electricity_supplier: {\n                company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n                meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n                mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n                supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n              },\n              gas_supplier: {\n                company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n                current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n                meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n                mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n              }\n            },\n            electricityPaymentType: {\n              electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n              electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n            },\n            gasPaymentType: {\n              gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n              gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n            },\n            economy7: {\n              economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n              economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n            },\n            tariff_description_elec,\n            tariff_description_gas,\n            // AVG\n            usage_property_size_dual: {\n              usage_size_entered: !!usage_property_size_dual ? usage_property_size_dual.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_dual ? usage_property_size_dual.usage_size_expended : false\n            },\n            usage_property_size_es: {\n              usage_size_entered: !!usage_property_size_es ? usage_property_size_es.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_es ? usage_property_size_es.usage_size_expended : false\n            },\n            usage_property_size_gs: {\n              usage_size_entered: !!usage_property_size_gs ? usage_property_size_gs.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_gs ? usage_property_size_gs.usage_size_expended : false\n            },\n            // GAS\n            usage_gas_description: {\n              usage_kwh_entered: !!usage_gas_description ? usage_gas_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_gas_description ? usage_gas_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_gas_description ? usage_gas_description.usage_kwh_period : false\n            },\n            usage_gbp_description_gs: {\n              usage_gbp_entered: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_period : false\n            },\n            // Elec\n            usage_kwh_description: {\n              usage_kwh_entered: !!usage_kwh_description ? usage_kwh_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_kwh_description ? usage_kwh_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_kwh_description ? usage_kwh_description.usage_kwh_period : false\n            },\n            usage_gbp_description_es: {\n              usage_gbp_entered: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_period : false\n            },\n            // AVG ELEC\n            avgElec: avgElec,\n            // AVG Gas\n            avgGas: avgGas\n          });\n        }\n      }\n    })();\n  }, [FormCompare]); // goToCustomerDetails\n\n  const goToCustomerDetails = async e => {\n    e.preventDefault();\n\n    if (!!customerInformation.hasOwnProperty('switching_details') === false) {\n      // Update Error\n      updateError(true);\n      return;\n    } //Show Overlay\n\n\n    updateShowOverlay(true); // Email agent\n\n    const agentEmail = {\n      \"email\": user.email\n    }; // const agentEmail = { \"email\": 'jesus-ramon.sicairos@utilityswitchboard.com' };\n    // Endpoint\n\n    const url = 'https://zohocontactcreatefunction.azurewebsites.net/api/HttpTrigger1?method=verifyContact'; // Fetch customer data\n\n    await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(agentEmail),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(response => {\n      // console.log(response);\n      // Update Customer informatin\n      updateCustomerInformation({ ...customerInformation,\n        agent: {\n          email: user.email\n        },\n        customerDetails: {\n          first_name: response.first_name ? response.first_name : '',\n          last_name: response.last_name ? response.last_name : '',\n          email: response.email ? response.email : '',\n          phone: response.phone ? parsePhoneNumber(response.phone, 'GB').number : ''\n        }\n      });\n      return response;\n    }).catch(error => {\n      // Error\n      console.error(`Catch an error fetching to postcoder ${error}`); // Update Customer informatin\n\n      updateCustomerInformation({ ...customerInformation,\n        agent: {\n          email: user.email\n        },\n        customerDetails: {\n          first_name: '',\n          last_name: '',\n          email: '',\n          phone: ''\n        }\n      });\n    }); // Hide Overlay\n\n    updateShowOverlay(false); // Update Error\n\n    updateError(false); // Hide Form Compare\n\n    updateShowFormCompare(false); // Update Progress Bar\n\n    updateProgressBar({ ...progressBar,\n      step: 9\n    }); // Show Details\n\n    updateShowFormDetails(true);\n  }; // Go Back\n\n\n  const goBack = e => {\n    e.preventDefault(); // Update Error\n\n    updateError(false); // Hide Form Compare\n\n    updateShowFormCompare(false); // Delete Customer Usage\n\n    const copy_customer_usage = { ...customerInformation\n    };\n    delete copy_customer_usage['debt'];\n    delete copy_customer_usage['switching_details']; // Update customer information\n\n    updateCustomerInformation({ ...copy_customer_usage\n    }); // Show Form Debt\n\n    updateShowFormDebt(true); // Update Progress Bar\n\n    updateProgressBar({ ...progressBar,\n      step: 7\n    });\n  }; // Filterby\n\n\n  const filterBy = e => {\n    let target = e.target.value; // Hide error\n\n    updateError(false);\n\n    if (target === 'monthly_cost') {\n      updateContent({ ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"monthly_cost\"))\n      });\n    }\n\n    ;\n\n    if (target === 'exit_fees') {\n      updateContent({ ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"exit_fees\"))\n      });\n    }\n\n    ;\n\n    if (target === 'review_rating') {\n      updateContent({ ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"review_rating\")).reverse()\n      });\n    }\n\n    ;\n\n    if (target === 'supplier_code') {\n      updateContent({ ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"supplier_code\"))\n      });\n    }\n\n    ; // Delete Customer Usage\n\n    const copy_customer_usage = { ...customerInformation\n    };\n    delete copy_customer_usage['switching_details']; // Update customer information\n\n    updateCustomerInformation({ ...copy_customer_usage\n    });\n    let activeCard_el = document.getElementsByClassName('active-card');\n\n    if (activeCard_el.length > 0) {\n      let activeCard_id = activeCard_el[0].id;\n      let activeCard = document.getElementById(activeCard_id);\n      activeCard.classList.remove('active-card');\n    }\n  }; // Use Effect to select the best tariff (Monthly cost) in the first render\n\n\n  useEffect(() => {\n    if (content.hasOwnProperty('sorted_data')) {\n      // Select best match\n      let bestMatch = content.sorted_data[0]; // Best match id\n\n      let bestMatch_id = bestMatch.tariff_id; // Add active card to best match\n\n      document.getElementById(bestMatch_id).classList.add('bestMatch-card'); // Box deal Best Match\n\n      let bestMatchBox = document.getElementById(`best_match${bestMatch_id}`);\n      let select = document.getElementById('filterPlan');\n      var selectedText = select.options[select.selectedIndex].text; // Adding text\n\n      bestMatchBox.innerText = `Best match - By ${selectedText.toLowerCase()}`;\n      bestMatchBox.style.padding = '.5rem 1rem';\n      const {\n        tariff_name,\n        supplier_name\n      } = bestMatch;\n      setBestMatch({ ...bestMatch,\n        tariff_name,\n        supplier_name\n      });\n    }\n  }, [content]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: contentLoaded ? /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"form-compare-section\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-compare-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-compare-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-compare\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Results\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1756,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Thank you for answering my questions, I can see that if you switch to the \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: bestMatch.tariff_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1757,\n                  columnNumber: 98\n                }, this), \" with \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: bestMatch.supplier_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1757,\n                  columnNumber: 144\n                }, this), \" you will save \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"*INSERT SAVINGS*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1757,\n                  columnNumber: 201\n                }, this), \" per year! So it will be only \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [\"\\xA3\", bestMatch.monthly_cost]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1757,\n                  columnNumber: 264\n                }, this), \" per month. This tariff also comes with \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"*INSERT TARIFF BENEFIT*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1757,\n                  columnNumber: 346\n                }, this), \".\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1757,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1755,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"filterBy-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"filterPlan\",\n                children: \"Filter By\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1761,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"plan\",\n                id: \"filterPlan\",\n                defaultValue: \"monthly_cost\",\n                onChange: e => filterBy(e),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"\\u2015\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1764,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"saving\",\n                  children: \"Savings\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1765,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"renewal\",\n                  children: \"Renewal\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1766,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"monthly_cost\",\n                  children: \"Monthly cost\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1767,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"exit_fees\",\n                  children: \"Exit fees\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1768,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"review_rating\",\n                  children: \"Reviews\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1769,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"supplier_code\",\n                  children: \"Supplier\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1770,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1763,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1760,\n              columnNumber: 19\n            }, this), sorted_data.slice(0, array_to).map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sticky\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  id: `best_match${data.tariff_id}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1776,\n                  columnNumber: 47\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1776,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-compare-card-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-compare-card-content\",\n                  id: data.tariff_id,\n                  onClick: e => cardSelected(e, data.tariff_id),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-compare-card-column\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-compare-card-row\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"form-compare-card-supplier\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"form-compare-card-image\",\n                          children: /*#__PURE__*/_jsxDEV(\"img\", {\n                            src: data.supplier_img\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1783,\n                            columnNumber: 35\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1782,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"form-compare-card-info\",\n                          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                            children: data.tariff_name\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1787,\n                            columnNumber: 35\n                          }, this), /*#__PURE__*/_jsxDEV(ReviewStars, {\n                            stars: data.review_rating\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1788,\n                            columnNumber: 35\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1786,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1781,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1780,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n                      className: \"hr-custom\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1793,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-compare-card-row\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"form-compare-card-fees\",\n                        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                          children: \"Exit fees\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1797,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: [\"\\xA3\", data.exit_fees]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1798,\n                            columnNumber: 36\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1798,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1796,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"form-compare-card-fixed\",\n                        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                          children: \"Fixed period\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1802,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: [data.fixed_period, \" months\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1803,\n                            columnNumber: 36\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1803,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1801,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"form-compare-card-cost\",\n                        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                          children: \"Monthly cost\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1807,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: /*#__PURE__*/_jsxDEV(\"span\", {\n                            children: [\"\\xA3\", data.monthly_cost]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1808,\n                            columnNumber: 36\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1808,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1806,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1795,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1779,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-compare-card-column\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-compare-card-row\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"form-compare-card-btn-container\",\n                        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                          className: \"form-compare-card-btn btn-signup\",\n                          type: \"submit\",\n                          id: data.tariff_id,\n                          onClick: e => choosePlan(e, data),\n                          children: \"Choose plan\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1816,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                          type: \"button\",\n                          className: \"form-compare-card-btn btn-tariff\",\n                          onClick: e => {\n                            tariff_info(e, data);\n                          },\n                          children: \"Tariff info\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1817,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"form-compare-card-btn-info\",\n                          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                              children: \"Savings\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 1819,\n                              columnNumber: 38\n                            }, this), \" - \\xA3\", (usage - data.annual_cost).toFixed(2), \" now\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1819,\n                            columnNumber: 35\n                          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                            children: \"or \\xA3231 at renewal\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 1820,\n                            columnNumber: 35\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1818,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1815,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1814,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1813,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1778,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1777,\n                columnNumber: 23\n              }, this)]\n            }, data.tariff_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1775,\n              columnNumber: 21\n            }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-compare-loadmore-btn-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"form-compare-loadmore-btn\",\n                onClick: e => load_more(e),\n                children: \"Show more results\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1831,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1830,\n              columnNumber: 19\n            }, this), error === true ? /*#__PURE__*/_jsxDEV(Error, {\n              message: 'Please selected a tariff to sign up'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1835,\n              columnNumber: 37\n            }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-compare-btn-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"form-compare-btn btn-back\",\n                onClick: e => goBack(e),\n                children: [/*#__PURE__*/_jsxDEV(IconContext.Provider, {\n                  value: {\n                    color: '#D338AE',\n                    size: '35px'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(IoMdArrowDropleft, {\n                    className: \"icon-back\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1841,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1840,\n                  columnNumber: 23\n                }, this), \"Go back\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1839,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"form-compare-btn btn-next\",\n                onClick: e => goToCustomerDetails(e),\n                children: [\"Continue\", /*#__PURE__*/_jsxDEV(IconContext.Provider, {\n                  value: {\n                    color: '#FFF',\n                    size: '35px'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(IoMdArrowDropright, {\n                    className: \"icon-next\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1850,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1849,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1846,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1838,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1754,\n            columnNumber: 17\n          }, this), showScript ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"helper-compare\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"script-compare\",\n              children: /*#__PURE__*/_jsxDEV(FormScript, {\n                step: 9\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1860,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1859,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"assistant-compare-custom\",\n              children: /*#__PURE__*/_jsxDEV(FormAssistant, {\n                tips: 9\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1864,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1863,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1858,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"assistant-compare\",\n              children: /*#__PURE__*/_jsxDEV(FormAssistant, {\n                tips: 9\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1871,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1870,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1869,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1753,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1752,\n        columnNumber: 13\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1749,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(FormCompare, \"mUPyCihag+yi2DsFlJcXZVEUYs8=\");\n\n_c = FormCompare;\nexport default FormCompare;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormCompare\");","map":{"version":3,"sources":["/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormCompare/FormCompare.jsx"],"names":["React","useState","useEffect","db","firebase","data_electricity_tariffs","data_gas_tariffs","data_dual_tariffs","swal","parsePhoneNumber","IconContext","IoMdArrowDropleft","IoMdArrowDropright","FormScript","FormAssistant","Error","ReviewStars","FormCompare","customerInformation","user","electricityInformation","gasInformation","avgElec","avgGas","showScript","progressBar","updateCustomerInformation","updateShowOverlay","updateShowFormCompare","updateShowFormUsageKWH","updateShowFormUsageGBP_es","updateShowFormUsageAVG","updateShowFormUsageGAS","updateShowFormUsageGBP_gs","updateShowFormDetails","updateShowFormDebt","updateProgressBar","contentLoaded","updateContentLoaded","content","updateContent","array_to","update_array_to","bestMatch","setBestMatch","usage_expended","update_usage_expended","usage_expended_elec","update_usage_expended_elec","usage_expended_gas","update_usage_expended_gas","error","updateError","window","scrollTo","top","behavior","scroll_to","element","document","querySelector","scrollIntoView","block","inline","elec_data","tariffs","gas_data","dual_data","same_supplier","fuel_description","dual_active","gas_only","elec_only","postcode_formatted","customerAddres","postcode","replace","trim","toLowerCase","doornumber_formatted","doornumber","uid","up_to","load_more","e","preventDefault","sortByProperty","property","a","b","hasOwnProperty","usage_kwh_expended","usage_kwh_description","usage_kwh_period","usage_by_period","parseFloat","Math","round","tariff_unit_rate","tariff_description","unit_rate","usage","sorted_data","sort","usage_gbp_expended","usage_gbp_description_es","usage_gbp_period","usage_size_expended","usage_property_size_es","usage_gas_description","usage_gbp_description_gs","usage_property_size_gs","usage_size_expended_gas","unit_rate_elec","usage_elec","unit_rate_gas","usage_gas","usage_size_expended_elec","usage_property_size_dual","tariff_unit_rate_elec","tariff_unit_rate_gas","tariff_description_elec","elec_tariff","tariff_description_gas","gas_tariff","tariff_info","data","className","supplier_img","supplier_name","tariff_name","review_rating","exit_fees","annual_cost","monthly_cost","onPick","value","MoodButton","rating","onClick","choosePlan","card_id","target","id","card_content","getElementById","classList","add","active_class","querySelectorAll","forEach","call","el","remove","tariff_id","supplier_selected","find","switching_details","buttons","cancel","confirm","toFixed","console","log","then","result","cardSelected","useGas","fuel","supplierInformation","electricityPaymentType","gasPaymentType","economy7","debt","collection","doc","set","created","firestore","FieldValue","serverTimestamp","step","addressline1","addressline2","city","mpan","MPANDetails","mpan_core","mprn","dataGas","meter_type","supplier_mpid","company_name","current_supplier_id","meter_mechanism_code","gas_apply","dual_fuel_apply","electricity_supplier","gas_supplier","electricity_payment_type_id","electricity_payment_type_method","gas_payment_type_id","gas_payment_type_method","economy7_apply","economy7_split","usage_size_entered","usage_kwh_entered","usage_gbp_entered","goToCustomerDetails","agentEmail","email","url","fetch","method","body","JSON","stringify","headers","response","json","agent","customerDetails","first_name","last_name","phone","number","catch","goBack","copy_customer_usage","filterBy","reverse","activeCard_el","getElementsByClassName","length","activeCard_id","activeCard","bestMatch_id","bestMatchBox","select","selectedText","options","selectedIndex","text","innerText","style","padding","slice","map","fixed_period","color","size","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// Styles\nimport \"./FormCompare.css\";\n// Firebase\nimport { db } from \"../../../firebase/firebase\";\nimport firebase from \"firebase/app\";\n// Data\nimport data_electricity_tariffs from '../../../utilities/data_tariffs/data_tariffs_es/data_electricity_tariffs';\nimport data_gas_tariffs from '../../../utilities/data_tariffs/data_tariff_gs/data_gas_tariffs';\nimport data_dual_tariffs from '../../../utilities/data_tariffs/data_tariff_dual/data_dual_tariffs';\n// Swal\nimport swal from '@sweetalert/with-react';\n// Phone Number Validation\nimport { parsePhoneNumber } from 'libphonenumber-js';\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\n\n// Components\nimport FormScript from '../FormScript/FormScript';\nimport FormAssistant from \"../FormAssistant/FormAssistant\";\nimport Error from '../../Error/Error';\nimport ReviewStars from '../../ReviewStars/ReviewStars';\n\nfunction FormCompare({ customerInformation, user, electricityInformation, gasInformation, avgElec, avgGas, showScript, progressBar, updateCustomerInformation, updateShowOverlay, updateShowFormCompare, updateShowFormUsageKWH, updateShowFormUsageGBP_es, updateShowFormUsageAVG, updateShowFormUsageGAS, updateShowFormUsageGBP_gs, updateShowFormDetails, updateShowFormDebt, updateProgressBar }) {\n  /** STATES */\n  // Content Loaded state\n  const [contentLoaded, updateContentLoaded] = useState(false);\n  const [content, updateContent] = useState({});\n  const [array_to, update_array_to] = useState(3);\n  const [bestMatch, setBestMatch] = useState({});\n  const [usage_expended, update_usage_expended] = useState({});\n  const [usage_expended_elec, update_usage_expended_elec] = useState({});\n  const [usage_expended_gas, update_usage_expended_gas] = useState({});\n\n  // Error State\n  const [error, updateError] = useState(false);\n\n  /** FUNCTIONS */\n\n  /**---- */\n  // Function to create a new array without the same supplier\n  // Sorted data\n  // const sorted_data = sorted_data_desc.filter(function (obj) {\n  //   return obj.supplier_code !== 'EDF';\n  // });\n  /**---- */\n\n  // Scroll to top\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Error smooth scroll\n  useEffect(() => {\n    if (error) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"center\" });\n      }\n\n      scroll_to()\n    }\n  }, [error]);\n\n  // Data\n  const elec_data = data_electricity_tariffs.tariffs;\n  const gas_data = data_gas_tariffs.tariffs;\n  const dual_data = data_dual_tariffs.tariffs;\n\n  /** Variables */\n  // same_supplier\n  const same_supplier = customerInformation.fuel_description.same_supplier;\n  // dual_active\n  const dual_active = customerInformation.fuel_description.dual_active;\n  // gas_only\n  const gas_only = customerInformation.fuel_description.gas_only;\n  // elec_only\n  const elec_only = customerInformation.fuel_description.elec_only;\n  // postcode_formatted\n  const postcode_formatted = customerInformation.customerAddres.postcode.replace(/\\s/g, '').trim().toLowerCase();\n  // doornumber_formatted\n  const doornumber_formatted = customerInformation.customerAddres.doornumber.replace(/\\s/g, '').trim().toLowerCase();\n  // uid\n  const uid = `${postcode_formatted}-${doornumber_formatted}`;\n\n  // Show more button\n  let up_to = 0;\n  const load_more = (e) => {\n    e.preventDefault();\n    if (up_to === up_to) {\n      up_to = array_to + 3;\n      return update_array_to(up_to);\n    }\n  }\n\n  // Execute Overlay\n  useEffect(() => {\n    // Show Overlay\n    updateShowOverlay(true);\n  }, [FormCompare]);\n\n  // Function to sort the JSON by property\n  const sortByProperty = (property) => {\n    return function (a, b) {\n      if (a[property] > b[property])\n        return 1;\n      else if (a[property] < b[property])\n        return -1;\n\n      return 0;\n    }\n  }\n\n  // Information for elec_only\n  useEffect(() => {\n    // Elec_only\n    if (elec_only) {\n      // console.log('elec_only');\n      if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n        // Usage introduced\n        const usage_kwh_expended = customerInformation.usage_kwh_description.usage_kwh_expended;\n        // Period introduced\n        const usage_kwh_period = customerInformation.usage_kwh_description.usage_kwh_period;\n\n        let usage_by_period = 0;\n        if (usage_kwh_period === 'annu') {\n          usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n        } else {\n          usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n        }\n\n        // console.log(customerInformation.tariff_description);\n        // console.log(usage_by_period);\n\n        // Unit rate of tariff selected\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate;\n        // Usage by period\n        // const usage = ((usage_by_period * tariff_unit_rate) / 100);\n        const usage = (usage_by_period * ((tariff_unit_rate) / 100));\n\n        // Sorted data desc\n        const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n\n        /**------ */\n        // Sorted data\n        // const sorted_data = sorted_data_desc.filter(function (obj) {\n        //   return obj.supplier_code !== 'EDF';\n        // });\n        /**------ */\n\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n      }\n\n      if (customerInformation.hasOwnProperty('usage_gbp_description_es')) {\n        // Usage introduced\n        const usage_gbp_expended = customerInformation.usage_gbp_description_es.usage_gbp_expended;\n        // Period introduced\n        const usage_gbp_period = customerInformation.usage_gbp_description_es.usage_gbp_period;\n        let usage_by_period = 0;\n        if (usage_gbp_period === 'annu') {\n          usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n        } else {\n          usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n        }\n\n        // Sorted data\n        const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage_by_period\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n      }\n\n      if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n        // Usage introduced\n        const usage_size_expended = customerInformation.usage_property_size_es.usage_size_expended;\n\n        // Unit rate of tariff selected\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate;\n        // Usage by period\n        const usage = ((usage_size_expended * tariff_unit_rate) / 100);\n\n        // Sorted data\n        const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n      }\n    }\n  }, [elec_only]);\n\n  // Information for gas_only\n  useEffect(() => {\n    // Gas_only\n    if (gas_only) {\n      // console.log('gas_only');\n      if (customerInformation.hasOwnProperty('usage_gas_description')) {\n        // Usage introduced\n        const usage_kwh_expended = customerInformation.usage_gas_description.usage_kwh_expended;\n        // Period introduced\n        const usage_kwh_period = customerInformation.usage_gas_description.usage_kwh_period;\n        // Usage by period\n        let usage_by_period = 0;\n        if (usage_kwh_period === 'annu') {\n          usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n        } else {\n          usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n        }\n        // Unit rate of tariff selected\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate;\n        // Usage by period\n        const usage = ((usage_by_period * tariff_unit_rate) / 100);\n\n        // Sorted data\n        const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n\n      }\n\n      if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n        // Usage introduced\n        const usage_gbp_expended = customerInformation.usage_gbp_description_gs.usage_gbp_expended;\n        // Period introduced\n        const usage_gbp_period = customerInformation.usage_gbp_description_gs.usage_gbp_period;\n        let usage_by_period = 0;\n        if (usage_gbp_period === 'annu') {\n          usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n        } else {\n          usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n        }\n        // Sorted data\n        const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage_by_period\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n      }\n\n      if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n        // Usage introduced\n        const usage_size_expended = parseFloat(customerInformation.usage_property_size_gs.usage_size_expended);\n\n        // Usage introduced for gas\n        let usage_size_expended_gas;\n\n        // 1 bedroom\n        if (usage_size_expended === 1800) {\n          // Unit rate of tariff selected gas\n          usage_size_expended_gas = 8000;\n        }\n\n        // 2 to 3 bedrooms\n        if (usage_size_expended === 2900) {\n          // Unit rate of tariff selected gas\n          usage_size_expended_gas = 12000;\n        }\n\n        // 4+ bedrooms\n        if (usage_size_expended === 4300) {\n          // Unit rate of tariff selected gas\n          usage_size_expended_gas = 17000;\n        }\n\n        // Unit rate of tariff selected\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate;\n        // Usage by period\n        const usage = ((usage_size_expended_gas * tariff_unit_rate) / 100);\n\n        // Sorted data\n        const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n      }\n    }\n  }, [gas_only]);\n\n  // Information for dual_active\n  useEffect(() => {\n    // Dual active\n    if (dual_active) {\n\n      // Sorted data\n      const sorted_data = dual_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n\n      // Add content\n      updateContent({\n        ...content,\n        sorted_data\n      });\n\n      if (same_supplier) {\n        // Sorted data\n        // console.log('Same supplier === true');\n\n        /**- KWH SECTION -*/\n        // KWH - ELEC\n        if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_kwh_description.usage_kwh_expended;\n          // Period introduced\n          const usage_kwh_period = customerInformation.usage_kwh_description.usage_kwh_period;\n          let usage_by_period = 0;\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n          }\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_elec;\n          // console.log(tariff_unit_rate);\n          // Usage by period\n          const usage_elec = ((usage_by_period * tariff_unit_rate) / 100);\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage_elec\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // KWH - GAS\n        if (customerInformation.hasOwnProperty('usage_gas_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_gas_description.usage_kwh_expended;\n          // Period introduced\n          const usage_kwh_period = customerInformation.usage_gas_description.usage_kwh_period;\n          let usage_by_period = 0;\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n          }\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_gas;\n          // console.log(tariff_unit_rate);\n          // Usage by period\n          const usage_gas = ((usage_by_period * tariff_unit_rate) / 100);\n\n          // console.log(usage_gas);\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage_gas\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        /**- GBP SECTION */\n        // GBP - ELEC\n        if (customerInformation.hasOwnProperty('usage_gbp_description_es')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_es.usage_gbp_expended;\n          // Period introduced\n          const usage_gbp_period = customerInformation.usage_gbp_description_es.usage_gbp_period;\n          let usage_by_period = 0;\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n          }\n\n          // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage_by_period\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // GBP - GAS\n        if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_gs.usage_gbp_expended;\n          // Period introduced\n          const usage_gbp_period = customerInformation.usage_gbp_description_gs.usage_gbp_period;\n          let usage_by_period = 0;\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n          }\n          // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage_by_period\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        /**- PROPERTY SIZE SECTION -*/\n        // PROPERTY SIZE - ELEC\n        if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n\n          // Usage introduced\n          const usage_size_expended = customerInformation.usage_property_size_es.usage_size_expended;\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_elec;\n          // Usage by period\n          const usage = ((usage_size_expended * tariff_unit_rate) / 100);\n          // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // PROPERTY SIZE - GAS\n        if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n          // Usage introduceds\n          const usage_size_expended = parseFloat(customerInformation.usage_property_size_gs.usage_size_expended);\n          // Usage introduced for gas\n          let usage_size_expended_gas;\n\n          // 1 bedroom\n          if (usage_size_expended === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          }\n\n          // 2 to 3 bedrooms\n          if (usage_size_expended === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          }\n\n          // 4+ bedrooms\n          if (usage_size_expended === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          }\n\n          // console.log(usage_size_expended_gas);\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_gas;\n          // Usage by period\n          const usage = ((usage_size_expended_gas * tariff_unit_rate) / 100);\n\n          // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // PROPERTY_SIZE_DUAL\n        if (customerInformation.hasOwnProperty('usage_property_size_dual')) {\n          // Usage introduced for elec\n          const usage_size_expended_elec = parseFloat(customerInformation.usage_property_size_dual.usage_size_expended);\n          // Usage introduced for gas\n          let usage_size_expended_gas;\n\n          // 1 bedroom\n          if (usage_size_expended_elec === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          }\n\n          // 2 to 3 bedrooms\n          if (usage_size_expended_elec === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          }\n\n          // 4+ bedrooms\n          if (usage_size_expended_elec === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          }\n\n          // Unit rate of tariff selected elec\n          const tariff_unit_rate_elec = customerInformation.tariff_description.unit_rate_elec;\n          // Unit rate of tariff selected gas\n          const tariff_unit_rate_gas = customerInformation.tariff_description.unit_rate_gas;\n\n          // Usage by period\n          const usage_elec = ((usage_size_expended_elec * tariff_unit_rate_elec) / 100);\n          const usage_gas = ((usage_size_expended_gas * tariff_unit_rate_gas) / 100);\n\n          const usage = usage_elec + usage_gas;\n\n          // // Sorted data\n          // const sorted_data = dual_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended({\n            ...usage_expended,\n            usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n      } else {\n        // console.log('Same supplier === false');\n        /**- KWH SECTION -*/\n        // KWH - ELEC\n        if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_kwh_description.usage_kwh_expended;\n          // Period introduced\n          const usage_kwh_period = customerInformation.usage_kwh_description.usage_kwh_period;\n          let usage_by_period = 0;\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n          }\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate_elec = customerInformation.tariff_description_elec.elec_tariff.unit_rate;\n          // Usage by period\n          const usage_elec = ((usage_by_period * tariff_unit_rate_elec) / 100);\n\n          // console.log(usage_elec);\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage_elec\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // KWH - GAS\n        if (customerInformation.hasOwnProperty('usage_gas_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_gas_description.usage_kwh_expended;\n          // Period introduced\n          const usage_kwh_period = customerInformation.usage_gas_description.usage_kwh_period;\n          let usage_by_period = 0;\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n          }\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate_gas = customerInformation.tariff_description_gas.gas_tariff.unit_rate;\n          // Usage by period\n          const usage_gas = ((usage_by_period * tariff_unit_rate_gas) / 100);\n\n          // console.log(usage_gas);\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage_gas\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        /**- GBP SECTION */\n        // GBP - ELEC\n        if (customerInformation.hasOwnProperty('usage_gbp_description_es')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_es.usage_gbp_expended;\n          // Period introduced\n          const usage_gbp_period = customerInformation.usage_gbp_description_es.usage_gbp_period;\n          let usage_by_period = 0;\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n          }\n\n          // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage_by_period\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // GBP - GAS\n        if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_gs.usage_gbp_expended;\n          // Period introduced\n          const usage_gbp_period = customerInformation.usage_gbp_description_gs.usage_gbp_period;\n          let usage_by_period = 0;\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n          }\n          // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage_by_period\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        /**- PROPERTY SIZE SECTION -*/\n        // PROPERTY SIZE - ELEC\n        if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n          // Usage introduced\n          const usage_size_expended = customerInformation.usage_property_size_es.usage_size_expended;\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description_elec.elec_tariff.unit_rate;\n          // Usage by period\n          const usage = ((usage_size_expended * tariff_unit_rate) / 100);\n\n          // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // PROPERTY SIZE - GAS\n        if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n          // Usage introduceds\n          const usage_size_expended = parseFloat(customerInformation.usage_property_size_gs.usage_size_expended);\n          // Usage introduced for gas\n          let usage_size_expended_gas;\n\n          // 1 bedroom\n          if (usage_size_expended === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          }\n\n          // 2 to 3 bedrooms\n          if (usage_size_expended === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          }\n\n          // 4+ bedrooms\n          if (usage_size_expended === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          }\n\n          // console.log(usage_size_expended_gas);\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description_gas.gas_tariff.unit_rate;\n          // Usage by period\n          const usage = ((usage_size_expended_gas * tariff_unit_rate) / 100);\n\n          // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // PROPERTY_SIZE_DUAL\n        if (customerInformation.hasOwnProperty('usage_property_size_dual')) {\n          // Usage introduced for elec\n          const usage_size_expended_elec = parseFloat(customerInformation.usage_property_size_dual.usage_size_expended);\n          // Usage introduced for gas\n          let usage_size_expended_gas;\n\n          // 1 bedroom\n          if (usage_size_expended_elec === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          }\n\n          // 2 to 3 bedrooms\n          if (usage_size_expended_elec === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          }\n\n          // 4+ bedrooms\n          if (usage_size_expended_elec === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          }\n\n          // Unit rate of tariff selected elec\n          const tariff_unit_rate_elec = customerInformation.tariff_description_elec.elec_tariff.unit_rate;\n          // Unit rate of tariff selected gas\n          const tariff_unit_rate_gas = customerInformation.tariff_description_gas.gas_tariff.unit_rate;\n\n          // Usage by period\n          const usage_elec = ((usage_size_expended_elec * tariff_unit_rate_elec) / 100);\n          const usage_gas = ((usage_size_expended_gas * tariff_unit_rate_gas) / 100);\n\n          const usage = usage_elec + usage_gas;\n\n          // // Sorted data\n          // const sorted_data = dual_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended({\n            ...usage_expended,\n            usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n      }\n    }\n  }, [dual_active]);\n\n  // Sorted data\n  let sorted_data = content.sorted_data;\n\n  // usage\n  let usage = usage_expended.usage;\n\n  // const usage_gas\n  const usage_gas = usage_expended_gas.usage;\n\n  // const usage_elec\n  const usage_elec = usage_expended_elec.usage;\n\n  if ((dual_active)) {\n    if (customerInformation.hasOwnProperty('usage_property_size_dual')) {\n      usage = usage_expended.usage;\n    } else {\n      usage = (usage_elec + usage_gas);\n    }\n  }\n\n  // console.log(usage);\n  // console.log(usage_elec);\n  // console.log(usage_gas);\n\n  // Tariff info button - function to show modal\n  const tariff_info = (e, data) => {\n    e.preventDefault();\n\n    swal({\n      className: 'swal-modal_custom',\n      content: (\n        <>\n          <div className=\"form-compare-details-info-container\">\n            <div className=\"form-compare-details-info\">\n              <div className=\"form-compare-details-info-img\">\n                <img src={data.supplier_img} alt=\"\" />\n              </div>\n\n              <h3>Tariff details</h3>\n\n              <div className=\"form-compare-details-container\">\n                <div className=\"form-compare-single-details\">\n                  <p>Supplier: <span>{data.supplier_name}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Plan name: <span>{data.tariff_name}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <ReviewStars stars={data.review_rating} customClass={true} />\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Early exit fee: <span>£{data.exit_fees}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Estimated annual cost: <span>£{data.annual_cost}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Monthly direct debit: <span>£{data.monthly_cost}</span></p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )\n    });\n  };\n\n  const onPick = value => {\n    swal(\"Thanks for your rating!\", `You rated us ${value}/3`, \"success\")\n  }\n\n  const MoodButton = ({ rating, onClick }) => (  \n    <button rating={1} \n    onClick={onPick}>\n        Metele caliente\n    </button>\n  )\n  \n\n  // choosePlan button\n  const choosePlan = async (e, data) => {\n    e.preventDefault();\n\n    // Update Error\n    updateError(false);\n\n    // ID of card selected\n    const card_id = e.target.id;\n    // Selected card\n    const card_content = document.getElementById(card_id);\n\n    // Add class active\n    card_content.classList.add('active-card');\n\n    // Add and remove class\n    let active_class = document.querySelectorAll(\".active-card\");\n    [].forEach.call(active_class, function (el) {\n      el.classList.remove(\"active-card\");\n    });\n\n    if (card_id === sorted_data[0].tariff_id) {\n      card_content.className = \"form-compare-card-content active-card bestMatch-card\";\n    } else {\n      card_content.className = \"form-compare-card-content active-card\";\n    }\n\n    // Supplier selected\n    const supplier_selected = content.sorted_data.find(element => element.tariff_id == card_id);\n\n    // Switching details\n    const switching_details = {\n      supplier_selected\n    }\n\n    // Update customer information\n    updateCustomerInformation({\n      ...customerInformation,\n      switching_details\n    });\n\n    // Updating best match content\n    const { tariff_name, supplier_name } = supplier_selected;\n\n    setBestMatch({\n      ...bestMatch,\n      tariff_name,\n      supplier_name\n    });\n\n    // SWAL\n    await swal({\n      className: 'swal-modal_custom',\n      buttons: {\n        cancel: \"Go back\",\n        confirm: \"Choose plan\"\n      },\n      content: (\n        <>\n          <div className=\"form-compare-details-info-container\">\n          <MoodButton \n        rating={1} \n        onClick={onPick}\n      />\n            <div className=\"form-compare-details-info\">\n              <div className=\"form-compare-details-info-img\">\n                <img src={data.supplier_img} alt=\"\" />\n              </div>\n\n              <div className=\"form-compare-card-estimated-container\">\n                <div className=\"form-compare-card-estimated\">\n                  <p>Estimated cost</p>\n                  <p className=\"form-compare-card-estimated-amount\"><span>£</span>{(usage - data.annual_cost).toFixed(2)}</p>\n                  <p>(£{((usage - data.annual_cost) / 12).toFixed(2)} pm)</p>\n                </div>\n              </div>\n\n              <div className=\"form-compare-card-btn-signup-container\">\n                <button className=\"form-compare-card-btn-custom btn-signup\" onClick={() => console.log('metele')}>Choose plan</button>\n              </div>\n\n              <h3>Tariff details</h3>\n\n              <div className=\"form-compare-details-container\">\n                <div className=\"form-compare-single-details\">\n                  <p>Supplier: <span>{data.supplier_name}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Plan name: <span>{data.tariff_name}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <ReviewStars stars={data.review_rating} customClass={true} />\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Early exit fee: <span>£{data.exit_fees}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Estimated annual cost: <span>£{data.annual_cost}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Monthly direct debit: <span>£{data.monthly_cost}</span></p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )\n    }).then( async (result) => {\n\n      if (result !== true) {\n        return;\n      };\n\n      // // Supplier selected\n      // const supplier_selected = content.sorted_data.find(element => element.tariff_id == card_id);\n\n      // if (!!customerInformation.hasOwnProperty('switching_details') === false) {\n      //   // Update Error\n      //   updateError(true);\n      //   return;\n      // }\n\n      // //Show Overlay\n      // updateShowOverlay(true);\n\n      // // Email agent\n      // const agentEmail = { \"email\": user.email };\n      // // const agentEmail = { \"email\": 'jesus-ramon.sicairos@utilityswitchboard.com' };\n\n      // // Endpoint\n      // const url = 'https://zohocontactcreatefunction.azurewebsites.net/api/HttpTrigger1?method=verifyContact';\n      // // Fetch customer data\n      // await fetch(url, {\n      //   method: 'POST',\n      //   body: JSON.stringify(agentEmail),\n      //   headers: {\n      //     'Content-Type': 'application/json'\n      //   },\n      // }).then((response) => {\n      //   return response.json();\n      // }).then((response) => {\n      //   // console.log(response);\n      //   // Update Customer informatin\n      //   updateCustomerInformation({\n      //     ...customerInformation,\n      //     agent: { email: user.email },\n      //     customerDetails: {\n      //       first_name: response.first_name ? response.first_name : '',\n      //       last_name: response.last_name ? response.last_name : '',\n      //       email: response.email ? response.email : '',\n      //       phone: response.phone ? parsePhoneNumber(response.phone, 'GB').number : ''\n      //     }\n      //   });\n\n      //   return response;\n      // }).catch((error) => {\n      //   // Error\n      //   console.error(`Catch an error fetching to postcoder ${error}`);\n      //   // Update Customer informatin\n      //   updateCustomerInformation({\n      //     ...customerInformation,\n      //     agent: { email: user.email },\n      //     customerDetails: {\n      //       first_name: '',\n      //       last_name: '',\n      //       email: '',\n      //       phone: ''\n      //     }\n      //   });\n      // });\n\n      // // Hide Overlay\n      // updateShowOverlay(false);\n      // // Update Error\n      // updateError(false);\n      // // Hide Form Compare\n      // updateShowFormCompare(false);\n      // // Update Progress Bar\n      // updateProgressBar({ ...progressBar, step: 8 });\n      // // Show Details\n      // updateShowFormDetails(true);\n    });\n  };\n\n  // cardSelected\n  const cardSelected = (e, id) => {\n    e.preventDefault();\n\n    // Update Error\n    updateError(false);\n\n    /**-- Adding active state to the card selected --*/\n    // ID of card selected\n    const card_id = id;\n    // Selected card\n    const card_content = document.getElementById(card_id);\n\n    // Add class active\n    card_content.classList.add('active-card');\n\n    // Add and remove class\n    let active_class = document.querySelectorAll(\".active-card\");\n    [].forEach.call(active_class, function (el) {\n      el.classList.remove(\"active-card\");\n    });\n\n    if (card_id === sorted_data[0].tariff_id) {\n      card_content.className = \"form-compare-card-content active-card bestMatch-card\";\n    } else {\n      card_content.className = \"form-compare-card-content active-card\";\n    }\n\n    // Supplier selected\n    const supplier_selected = content.sorted_data.find(element => element.tariff_id == card_id);\n\n    // Switching details\n    const switching_details = {\n      supplier_selected\n    }\n\n    // Update customer information\n    updateCustomerInformation({\n      ...customerInformation,\n      switching_details\n    });\n\n    // Updating best match content\n    const { tariff_name, supplier_name } = supplier_selected;\n\n    setBestMatch({\n      ...bestMatch,\n      tariff_name,\n      supplier_name\n    });\n  };\n\n  // Adding initial customer data to firebase (Coming from Supply cc)\n  useEffect(() => {\n    /**-- Firebase --*/\n    (async () => {\n      const { customerAddres, useGas, fuel, fuel_description, supplierInformation, electricityPaymentType, gasPaymentType, economy7, tariff_description, tariff_description_elec, tariff_description_gas, usage_property_size_dual, usage_property_size_es, usage_property_size_gs, usage_gas_description, usage_gbp_description_gs, usage_kwh_description, usage_gbp_description_es, debt } = customerInformation;\n\n      // elec_only || gas_only\n      if (elec_only || gas_only) {\n        db.collection(\"customers\").doc(uid).set({\n          created: firebase.firestore.FieldValue.serverTimestamp(),\n          step: 7,\n          customerAddres: {\n            doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n            addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n            addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n            city: customerAddres.city ? customerAddres.city : '',\n            postcode: customerAddres.postcode ? customerAddres.postcode : '',\n            mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n          },\n          MPANDetails: {\n            mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n            supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n            company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n          },\n          dataGas: {\n            current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n            meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n            company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n          },\n          useGas: {\n            gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n          },\n          fuel: {\n            dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n          },\n          fuel_description: {\n            dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n            elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n            gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n            same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n          },\n          supplierInformation: {\n            electricity_supplier: {\n              company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n              meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n              mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n              supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n            },\n            gas_supplier: {\n              company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n              current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n              meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n              mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n            }\n          },\n          electricityPaymentType: {\n            electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n            electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n          },\n          gasPaymentType: {\n            gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n            gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n          },\n          economy7: {\n            economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n            economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n          },\n          tariff_description,\n          // AVG\n          usage_property_size_dual: {\n            usage_size_entered: !!usage_property_size_dual ? usage_property_size_dual.usage_size_entered : false,\n            usage_size_expended: !!usage_property_size_dual ? usage_property_size_dual.usage_size_expended : false\n          },\n          usage_property_size_es: {\n            usage_size_entered: !!usage_property_size_es ? usage_property_size_es.usage_size_entered : false,\n            usage_size_expended: !!usage_property_size_es ? usage_property_size_es.usage_size_expended : false,\n          },\n          usage_property_size_gs: {\n            usage_size_entered: !!usage_property_size_gs ? usage_property_size_gs.usage_size_entered : false,\n            usage_size_expended: !!usage_property_size_gs ? usage_property_size_gs.usage_size_expended : false\n          },\n          // GAS\n          usage_gas_description: {\n            usage_kwh_entered: !!usage_gas_description ? usage_gas_description.usage_kwh_entered : false,\n            usage_kwh_expended: !!usage_gas_description ? usage_gas_description.usage_kwh_expended : false,\n            usage_kwh_period: !!usage_gas_description ? usage_gas_description.usage_kwh_period : false\n          },\n          usage_gbp_description_gs: {\n            usage_gbp_entered: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_entered : false,\n            usage_gbp_expended: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_expended : false,\n            usage_gbp_period: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_period : false\n          },\n          // Elec\n          usage_kwh_description: {\n            usage_kwh_entered: !!usage_kwh_description ? usage_kwh_description.usage_kwh_entered : false,\n            usage_kwh_expended: !!usage_kwh_description ? usage_kwh_description.usage_kwh_expended : false,\n            usage_kwh_period: !!usage_kwh_description ? usage_kwh_description.usage_kwh_period : false\n          },\n          usage_gbp_description_es: {\n            usage_gbp_entered: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_entered : false,\n            usage_gbp_expended: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_expended : false,\n            usage_gbp_period: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_period : false\n          },\n          // AVG ELEC\n          avgElec: avgElec,\n          // AVG Gas\n          avgGas: avgGas,\n          debt\n        });\n      }\n\n      // dual_active\n      if (dual_active) {\n        // same_supplier\n        if (same_supplier) {\n          db.collection(\"customers\").doc(uid).set({\n            created: firebase.firestore.FieldValue.serverTimestamp(),\n            step: 7,\n            customerAddres: {\n              doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n              addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n              addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n              city: customerAddres.city ? customerAddres.city : '',\n              postcode: customerAddres.postcode ? customerAddres.postcode : '',\n              mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n            },\n            MPANDetails: {\n              mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n              supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n              company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n            },\n            dataGas: {\n              current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n              meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n              company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n            },\n            useGas: {\n              gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n            },\n            fuel: {\n              dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n            },\n            fuel_description: {\n              dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n              elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n              gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n              same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n            },\n            supplierInformation: {\n              electricity_supplier: {\n                company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n                meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n                mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n                supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n              },\n              gas_supplier: {\n                company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n                current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n                meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n                mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n              }\n            },\n            electricityPaymentType: {\n              electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n              electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n            },\n            gasPaymentType: {\n              gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n              gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n            },\n            economy7: {\n              economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n              economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n            },\n            tariff_description,\n            // AVG\n            usage_property_size_dual: {\n              usage_size_entered: !!usage_property_size_dual ? usage_property_size_dual.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_dual ? usage_property_size_dual.usage_size_expended : false\n            },\n            usage_property_size_es: {\n              usage_size_entered: !!usage_property_size_es ? usage_property_size_es.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_es ? usage_property_size_es.usage_size_expended : false,\n            },\n            usage_property_size_gs: {\n              usage_size_entered: !!usage_property_size_gs ? usage_property_size_gs.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_gs ? usage_property_size_gs.usage_size_expended : false\n            },\n            // GAS\n            usage_gas_description: {\n              usage_kwh_entered: !!usage_gas_description ? usage_gas_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_gas_description ? usage_gas_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_gas_description ? usage_gas_description.usage_kwh_period : false\n            },\n            usage_gbp_description_gs: {\n              usage_gbp_entered: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_period : false\n            },\n            // Elec\n            usage_kwh_description: {\n              usage_kwh_entered: !!usage_kwh_description ? usage_kwh_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_kwh_description ? usage_kwh_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_kwh_description ? usage_kwh_description.usage_kwh_period : false\n            },\n            usage_gbp_description_es: {\n              usage_gbp_entered: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_period : false\n            },\n            // AVG ELEC\n            avgElec: avgElec,\n            // AVG Gas\n            avgGas: avgGas\n          });\n        } else {\n          db.collection(\"customers\").doc(uid).set({\n            created: firebase.firestore.FieldValue.serverTimestamp(),\n            step: 7,\n            customerAddres: {\n              doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n              addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n              addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n              city: customerAddres.city ? customerAddres.city : '',\n              postcode: customerAddres.postcode ? customerAddres.postcode : '',\n              mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n            },\n            MPANDetails: {\n              mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n              supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n              company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n            },\n            dataGas: {\n              current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n              meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n              company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n            },\n            useGas: {\n              gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n            },\n            fuel: {\n              dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n            },\n            fuel_description: {\n              dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n              elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n              gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n              same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n            },\n            supplierInformation: {\n              electricity_supplier: {\n                company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n                meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n                mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n                supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n              },\n              gas_supplier: {\n                company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n                current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n                meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n                mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n              }\n            },\n            electricityPaymentType: {\n              electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n              electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n            },\n            gasPaymentType: {\n              gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n              gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n            },\n            economy7: {\n              economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n              economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n            },\n            tariff_description_elec,\n            tariff_description_gas,\n            // AVG\n            usage_property_size_dual: {\n              usage_size_entered: !!usage_property_size_dual ? usage_property_size_dual.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_dual ? usage_property_size_dual.usage_size_expended : false\n            },\n            usage_property_size_es: {\n              usage_size_entered: !!usage_property_size_es ? usage_property_size_es.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_es ? usage_property_size_es.usage_size_expended : false,\n            },\n            usage_property_size_gs: {\n              usage_size_entered: !!usage_property_size_gs ? usage_property_size_gs.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_gs ? usage_property_size_gs.usage_size_expended : false\n            },\n            // GAS\n            usage_gas_description: {\n              usage_kwh_entered: !!usage_gas_description ? usage_gas_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_gas_description ? usage_gas_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_gas_description ? usage_gas_description.usage_kwh_period : false\n            },\n            usage_gbp_description_gs: {\n              usage_gbp_entered: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_period : false\n            },\n            // Elec\n            usage_kwh_description: {\n              usage_kwh_entered: !!usage_kwh_description ? usage_kwh_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_kwh_description ? usage_kwh_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_kwh_description ? usage_kwh_description.usage_kwh_period : false\n            },\n            usage_gbp_description_es: {\n              usage_gbp_entered: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_period : false\n            },\n            // AVG ELEC\n            avgElec: avgElec,\n            // AVG Gas\n            avgGas: avgGas\n          });\n        }\n      }\n    })();\n\n  }, [FormCompare]);\n\n  // goToCustomerDetails\n  const goToCustomerDetails = async (e) => {\n    e.preventDefault();\n\n    if (!!customerInformation.hasOwnProperty('switching_details') === false) {\n      // Update Error\n      updateError(true);\n      return;\n    }\n\n    //Show Overlay\n    updateShowOverlay(true);\n\n    // Email agent\n    const agentEmail = { \"email\": user.email };\n    // const agentEmail = { \"email\": 'jesus-ramon.sicairos@utilityswitchboard.com' };\n\n    // Endpoint\n    const url = 'https://zohocontactcreatefunction.azurewebsites.net/api/HttpTrigger1?method=verifyContact';\n    // Fetch customer data\n    await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(agentEmail),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    }).then((response) => {\n      return response.json();\n    }).then((response) => {\n      // console.log(response);\n      // Update Customer informatin\n      updateCustomerInformation({\n        ...customerInformation,\n        agent: { email: user.email },\n        customerDetails: {\n          first_name: response.first_name ? response.first_name : '',\n          last_name: response.last_name ? response.last_name : '',\n          email: response.email ? response.email : '',\n          phone: response.phone ? parsePhoneNumber(response.phone, 'GB').number : ''\n        }\n      });\n\n      return response;\n    }).catch((error) => {\n      // Error\n      console.error(`Catch an error fetching to postcoder ${error}`);\n      // Update Customer informatin\n      updateCustomerInformation({\n        ...customerInformation,\n        agent: { email: user.email },\n        customerDetails: {\n          first_name: '',\n          last_name: '',\n          email: '',\n          phone: ''\n        }\n      });\n    });\n\n    // Hide Overlay\n    updateShowOverlay(false);\n    // Update Error\n    updateError(false);\n    // Hide Form Compare\n    updateShowFormCompare(false);\n    // Update Progress Bar\n    updateProgressBar({ ...progressBar, step: 9 });\n    // Show Details\n    updateShowFormDetails(true);\n  }\n\n  // Go Back\n  const goBack = (e) => {\n    e.preventDefault();\n\n    // Update Error\n    updateError(false);\n    // Hide Form Compare\n    updateShowFormCompare(false);\n    // Delete Customer Usage\n    const copy_customer_usage = { ...customerInformation };\n    delete copy_customer_usage['debt'];\n    delete copy_customer_usage['switching_details'];\n    // Update customer information\n    updateCustomerInformation({ ...copy_customer_usage });\n    // Show Form Debt\n    updateShowFormDebt(true)\n    // Update Progress Bar\n    updateProgressBar({ ...progressBar, step: 7 });\n  }\n\n  // Filterby\n  const filterBy = (e) => {\n    let target = e.target.value;\n\n    // Hide error\n    updateError(false);\n\n    if (target === 'monthly_cost') {\n      updateContent({\n        ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"monthly_cost\"))\n      });\n    };\n\n    if (target === 'exit_fees') {\n      updateContent({\n        ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"exit_fees\"))\n      });\n    };\n\n    if (target === 'review_rating') {\n      updateContent({\n        ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"review_rating\")).reverse()\n      });\n    };\n\n    if (target === 'supplier_code') {\n      updateContent({\n        ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"supplier_code\"))\n      });\n    };\n\n    // Delete Customer Usage\n    const copy_customer_usage = { ...customerInformation };\n    delete copy_customer_usage['switching_details'];\n    // Update customer information\n    updateCustomerInformation({ ...copy_customer_usage });\n\n    let activeCard_el = document.getElementsByClassName('active-card');\n    if (activeCard_el.length > 0) {\n      let activeCard_id = activeCard_el[0].id;\n      let activeCard = document.getElementById(activeCard_id);\n      activeCard.classList.remove('active-card');\n    }\n\n  }\n\n  // Use Effect to select the best tariff (Monthly cost) in the first render\n  useEffect(() => {\n    if (content.hasOwnProperty('sorted_data')) {\n      // Select best match\n      let bestMatch = content.sorted_data[0];\n      // Best match id\n      let bestMatch_id = bestMatch.tariff_id;\n      // Add active card to best match\n      document.getElementById(bestMatch_id).classList.add('bestMatch-card');\n      // Box deal Best Match\n      let bestMatchBox = document.getElementById(`best_match${bestMatch_id}`);\n      let select = document.getElementById('filterPlan');\n      var selectedText = select.options[select.selectedIndex].text;\n      // Adding text\n      bestMatchBox.innerText = `Best match - By ${selectedText.toLowerCase()}`;\n      bestMatchBox.style.padding = '.5rem 1rem'\n\n      const { tariff_name, supplier_name } = bestMatch;\n\n      setBestMatch({\n        ...bestMatch,\n        tariff_name,\n        supplier_name\n      });\n    }\n  }, [content]);\n\n  return (\n    <>\n      <form>\n        {contentLoaded ?\n          (\n            <section className=\"form-compare-section\">\n              <div className=\"form-compare-container\">\n                <div className=\"form-compare-content\">\n                  <div className=\"form-compare\">\n                    <h1>Results</h1>\n                    <p>Thank you for answering my questions, I can see that if you switch to the <strong>{bestMatch.tariff_name}</strong> with <strong>{bestMatch.supplier_name}</strong> you will save <strong>*INSERT SAVINGS*</strong> per year! So it will be only <strong>£{bestMatch.monthly_cost}</strong> per month. This tariff also comes with <strong>*INSERT TARIFF BENEFIT*</strong>.</p>\n                  </div>\n\n                  <div className=\"filterBy-container\">\n                    <label htmlFor=\"filterPlan\">Filter By</label>\n\n                    <select name=\"plan\" id=\"filterPlan\" defaultValue=\"monthly_cost\" onChange={(e) => filterBy(e)}>\n                      <option value=\"\">―</option>\n                      <option value=\"saving\">Savings</option>\n                      <option value=\"renewal\">Renewal</option>\n                      <option value=\"monthly_cost\">Monthly cost</option>\n                      <option value=\"exit_fees\">Exit fees</option>\n                      <option value=\"review_rating\">Reviews</option>\n                      <option value=\"supplier_code\">Supplier</option>\n                    </select>\n                  </div>\n\n                  {sorted_data.slice(0, array_to).map((data) => (\n                    <div key={data.tariff_id}>\n                      <div className=\"sticky\"><p id={`best_match${data.tariff_id}`}></p></div>\n                      <div className=\"form-compare-card-container\">\n                        <div className=\"form-compare-card-content\" id={data.tariff_id} onClick={(e) => cardSelected(e, data.tariff_id)}>\n                          <div className=\"form-compare-card-column\">\n                            <div className=\"form-compare-card-row\">\n                              <div className=\"form-compare-card-supplier\">\n                                <div className=\"form-compare-card-image\">\n                                  <img src={data.supplier_img} />\n                                </div>\n\n                                <div className=\"form-compare-card-info\">\n                                  <h2>{data.tariff_name}</h2>\n                                  <ReviewStars stars={data.review_rating} />\n                                </div>\n                              </div>\n                            </div>\n\n                            <hr className=\"hr-custom\" />\n\n                            <div className=\"form-compare-card-row\">\n                              <div className=\"form-compare-card-fees\">\n                                <p>Exit fees</p>\n                                <p><span>£{data.exit_fees}</span></p>\n                              </div>\n\n                              <div className=\"form-compare-card-fixed\">\n                                <p>Fixed period</p>\n                                <p><span>{data.fixed_period} months</span></p>\n                              </div>\n\n                              <div className=\"form-compare-card-cost\">\n                                <p>Monthly cost</p>\n                                <p><span>£{data.monthly_cost}</span></p>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"form-compare-card-column\">\n                            <div className=\"form-compare-card-row\">\n                              <div className=\"form-compare-card-btn-container\">\n                                <button className=\"form-compare-card-btn btn-signup\" type=\"submit\" id={data.tariff_id} onClick={(e) => choosePlan(e, data)}>Choose plan</button>\n                                <button type=\"button\" className=\"form-compare-card-btn btn-tariff\" onClick={(e) => { tariff_info(e, data) }}>Tariff info</button>\n                                <div className=\"form-compare-card-btn-info\">\n                                  <p><span>Savings</span> - £{(usage - data.annual_cost).toFixed(2)} now</p>\n                                  <p>or £231 at renewal</p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n\n                  <div className=\"form-compare-loadmore-btn-container\">\n                    <button className=\"form-compare-loadmore-btn\" onClick={(e) => load_more(e)}>Show more results</button>\n                  </div>\n\n                  {/* Error */}\n                  {error === true ? <Error message={'Please selected a tariff to sign up'} /> : null}\n\n                  {/* Buttons */}\n                  <div className=\"form-compare-btn-container\">\n                    <button className=\"form-compare-btn btn-back\" onClick={(e) => goBack(e)}>\n                      <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                        <IoMdArrowDropleft className=\"icon-back\" />\n                      </IconContext.Provider>\n                      Go back\n                    </button>\n\n                    <button className=\"form-compare-btn btn-next\" onClick={(e) => goToCustomerDetails(e)}>\n                      Continue\n\n                      <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                        <IoMdArrowDropright className=\"icon-next\" />\n                      </IconContext.Provider>\n                    </button>\n                  </div>\n                </div>\n\n                {showScript ?\n                  (\n                    <div className=\"helper-compare\">\n                      <div className=\"script-compare\">\n                        <FormScript step={9} />\n                      </div>\n\n                      <div className=\"assistant-compare-custom\">\n                        <FormAssistant tips={9} />\n                      </div>\n                    </div>\n                  )\n                  :\n                  <div style={{ width: '100%' }}>\n                    <div className=\"assistant-compare\">\n                      <FormAssistant tips={9} />\n                    </div>\n                  </div>\n                }\n              </div>\n            </section>\n          )\n          :\n          null\n        }\n      </form>\n    </>\n  );\n}\n\nexport default FormCompare;\n"]},"metadata":{},"sourceType":"module"}