[{"/Users/juanlugo/Desktop/sp-firebase/src/index.js":"1","/Users/juanlugo/Desktop/sp-firebase/src/reportWebVitals.js":"2","/Users/juanlugo/Desktop/sp-firebase/src/App.jsx":"3","/Users/juanlugo/Desktop/sp-firebase/src/firebase/firebase.js":"4","/Users/juanlugo/Desktop/sp-firebase/src/components/IdleTimerContainer/IdleTimerContainer.js":"5","/Users/juanlugo/Desktop/sp-firebase/src/components/Overlay/Overlay.jsx":"6","/Users/juanlugo/Desktop/sp-firebase/src/pages/HomePage/Home.jsx":"7","/Users/juanlugo/Desktop/sp-firebase/src/pages/LoginPage/Login.jsx":"8","/Users/juanlugo/Desktop/sp-firebase/src/components/Footer/Footer.jsx":"9","/Users/juanlugo/Desktop/sp-firebase/src/components/Navbar/Navbar.jsx":"10","/Users/juanlugo/Desktop/sp-firebase/src/components/Error/Error.jsx":"11","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormPostCode/FormPostCode.jsx":"12","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormMPN-MPRN/FormMpanMprn.jsx":"13","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormAddress/FormAddress.jsx":"14","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormFuelType/FormFuelType.jsx":"15","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormTariffs/FormTariffs.jsx":"16","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormSupply/FormSupply.jsx":"17","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormSuccessful/FormSuccessful.jsx":"18","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormCompare/FormCompare.jsx":"19","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormsUsage/FormUsageKWH/FormUsageKWH.jsx":"20","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormsUsage/FormUsageGBP_es/FormUsageGBP_es.jsx":"21","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormBankDetails/FormBankDetails.jsx":"22","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormsUsage/FormUsageGAS/FormUsageGAS.jsx":"23","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormsUsage/FormUsageGBP_gs/FormUsageGBP_gs.jsx":"24","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormRating/FormRating.jsx":"25","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormDetails/FormDetails.jsx":"26","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormDebt/FormDebt.jsx":"27","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormE7/FormE7.jsx":"28","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormsUsage/FormUsageAVG/FormUsageAVG.jsx":"29","/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_tariffs/data_tariff_dual/data_dual_tariffs.js":"30","/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_tariffs/data_tariff_gs/data_gas_tariffs.js":"31","/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_tariffs/data_tariffs_es/data_electricity_tariffs.js":"32","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormScript/FormScript.jsx":"33","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormAssistant/FormAssistant.jsx":"34","/Users/juanlugo/Desktop/sp-firebase/src/utils/utils.jsx":"35","/Users/juanlugo/Desktop/sp-firebase/src/hooks/useAddress/useAddress.jsx":"36","/Users/juanlugo/Desktop/sp-firebase/src/components/ReviewStars/ReviewStars.jsx":"37","/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_gas_supplier/data_gas_supplier_name.js":"38","/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_gas_supplier/data_gas_supplier_id.js":"39","/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_electricity_supplier/data_electricity_supplier_name.js":"40","/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_electricity_supplier/data_electricity_supplier_id.js":"41","/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_electricity_supplier/data_custom_es.js":"42"},{"size":628,"mtime":1632865453585,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1632865453586,"results":"45","hashOfConfig":"44"},{"size":2200,"mtime":1632865453573,"results":"46","hashOfConfig":"44"},{"size":1974,"mtime":1633014680148,"results":"47","hashOfConfig":"44"},{"size":2767,"mtime":1632865453583,"results":"48","hashOfConfig":"44"},{"size":1105,"mtime":1632865453584,"results":"49","hashOfConfig":"44"},{"size":62013,"mtime":1632865453585,"results":"50","hashOfConfig":"44"},{"size":9384,"mtime":1633960726021,"results":"51","hashOfConfig":"44"},{"size":673,"mtime":1632865453578,"results":"52","hashOfConfig":"44"},{"size":11756,"mtime":1632865453584,"results":"53","hashOfConfig":"44"},{"size":274,"mtime":1632865453578,"results":"54","hashOfConfig":"44"},{"size":8734,"mtime":1632865453581,"results":"55","hashOfConfig":"44"},{"size":22037,"mtime":1632865453581,"results":"56","hashOfConfig":"44"},{"size":45769,"mtime":1632865453579,"results":"57","hashOfConfig":"44"},{"size":22344,"mtime":1632865453581,"results":"58","hashOfConfig":"44"},{"size":67162,"mtime":1622124923024,"results":"59","hashOfConfig":"44"},{"size":232621,"mtime":1632865453582,"results":"60","hashOfConfig":"44"},{"size":1399,"mtime":1632865453582,"results":"61","hashOfConfig":"44"},{"size":75142,"mtime":1632865453580,"results":"62","hashOfConfig":"44"},{"size":9413,"mtime":1632865453583,"results":"63","hashOfConfig":"44"},{"size":9435,"mtime":1632865453583,"results":"64","hashOfConfig":"44"},{"size":17259,"mtime":1632865453579,"results":"65","hashOfConfig":"44"},{"size":10312,"mtime":1632865453583,"results":"66","hashOfConfig":"44"},{"size":9723,"mtime":1632865453583,"results":"67","hashOfConfig":"44"},{"size":3146,"mtime":1632865453581,"results":"68","hashOfConfig":"44"},{"size":18980,"mtime":1632865453580,"results":"69","hashOfConfig":"44"},{"size":24785,"mtime":1632865453580,"results":"70","hashOfConfig":"44"},{"size":39277,"mtime":1632865453580,"results":"71","hashOfConfig":"44"},{"size":10555,"mtime":1632865453583,"results":"72","hashOfConfig":"44"},{"size":21190,"mtime":1632865453587,"results":"73","hashOfConfig":"44"},{"size":21275,"mtime":1632865453587,"results":"74","hashOfConfig":"44"},{"size":21157,"mtime":1632865453587,"results":"75","hashOfConfig":"44"},{"size":6812,"mtime":1632865453581,"results":"76","hashOfConfig":"44"},{"size":4967,"mtime":1632865453579,"results":"77","hashOfConfig":"44"},{"size":1008,"mtime":1632865453587,"results":"78","hashOfConfig":"44"},{"size":1019,"mtime":1632865453585,"results":"79","hashOfConfig":"44"},{"size":3361,"mtime":1632865453584,"results":"80","hashOfConfig":"44"},{"size":8150,"mtime":1632865453586,"results":"81","hashOfConfig":"44"},{"size":18653,"mtime":1632865453586,"results":"82","hashOfConfig":"44"},{"size":5763,"mtime":1632865453586,"results":"83","hashOfConfig":"44"},{"size":13401,"mtime":1632865453586,"results":"84","hashOfConfig":"44"},{"size":417,"mtime":1632865453586,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t4u4vo",{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/juanlugo/Desktop/sp-firebase/src/index.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/reportWebVitals.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/App.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/firebase/firebase.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/IdleTimerContainer/IdleTimerContainer.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/Overlay/Overlay.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/pages/HomePage/Home.jsx",["186","187","188"],"import React, { useState, lazy, Suspense } from \"react\";\n// Firebase\nimport { db } from \"../../firebase/firebase\";\n\n// Components\nimport Navbar from \"../../components/Navbar/Navbar\";\nimport Footer from \"../../components/Footer/Footer\";\nimport Overlay from \"../../components/Overlay/Overlay\";\nconst FormPostCode = lazy(() => import('../../components/FormCards/FormPostCode/FormPostCode'));\nconst FormAddress = lazy(() => import('../../components/FormCards/FormAddress/FormAddress'));\nconst FormFuelType = lazy(() => import('../../components/FormCards/FormFuelType/FormFuelType'));\nconst FormMpanMprn = lazy(() => import('../../components/FormCards/FormMPN-MPRN/FormMpanMprn'));\nconst FormSupply = lazy(() => import('../../components/FormCards/FormSupply/FormSupply'));\nconst FormE7 = lazy(() => import('../../components/FormCards/FormE7/FormE7'));\n// const FormTariffs = lazy(() => import('../../components/FormCards/FormTariffs/FormTariffs'));\nconst FormUsageKWH = lazy(() => import('../../components/FormCards/FormsUsage/FormUsageKWH/FormUsageKWH'));\nconst FormUsageGAS = lazy(() => import('../../components/FormCards/FormsUsage/FormUsageGAS/FormUsageGAS'));\nconst FormUsageGBP_es = lazy(() => import('../../components/FormCards/FormsUsage/FormUsageGBP_es/FormUsageGBP_es'));\nconst FormUsageGBP_gs = lazy(() => import('../../components/FormCards/FormsUsage/FormUsageGBP_gs/FormUsageGBP_gs'));\nconst FormUsageAVG = lazy(() => import('../../components/FormCards/FormsUsage/FormUsageAVG/FormUsageAVG'));\nconst FormDebt = lazy(() => import('../../components/FormCards/FormDebt/FormDebt'));\nconst FormCompare = lazy(() => import('../../components/FormCards/FormCompare/FormCompare'));\nconst FormDetails = lazy(() => import('../../components/FormCards/FormDetails/FormDetails'));\nconst FormBankDetails = lazy(() => import('../../components/FormCards/FormBankDetails/FormBankDetails'));\nconst FormRating = lazy(() => import('../../components/FormCards/FormRating/FormRating'));\nconst FormSuccessful = lazy(() => import('../../components/FormCards/FormSuccessful/FormSuccessful'));\n\nfunction Home({ user }) {\n    /* -- STATES -- */\n    // Progress bar \n    const [progressBar, updateProgressBar] = useState({ step: 0 });\n\n    // Script\n    const [showScript, updateShowScript] = useState(true);\n\n    // Customer Postcode State\n    const [customerPostCode, updateCustomerPostCode] = useState({\n        postcode: \"\"\n    });\n\n    // Customer Address\n    const [customerAddres, updateCustomerAddress] = useState({});\n\n    // Use gas \n    const [useGas, updateUseGas] = useState({});\n\n    // Fuel\n    const [fuel, updateFuel] = useState({});\n\n    // Customer Electricity Information\n    const [electricityInformation, updateElectricityInformation] = useState({});\n\n    // Customer Gas Information\n    const [gasInformation, updateGasInformation] = useState({});\n\n    // Customer supplier information\n    const [supplierInformation, updateSupplierInformation] = useState({});\n\n    // Customer Information\n    const [customerInformation, updateCustomerInformation] = useState({});\n\n    // Customer Electricity Payment Type\n    const [electricityPaymentType, updateElectricityPaymentType] = useState({});\n\n    // Customer Gas Payment Type\n    const [gasPaymentType, updateGasPaymentType] = useState({});\n\n    // Customer Economy 7\n    const [economy7, updateEconomy7] = useState({});\n\n    /** -- VIEWS states -- */\n\n    // Show Overlay\n    const [showOverlay, updateShowOverlay] = useState(false);\n\n    // Show Form PostCode\n    const [showFormPostCode, updateShowFormPostCode] = useState(true);\n\n    // Show Form Address\n    const [showFormAddres, updateShowFormAddres] = useState(false);\n\n    // Show form Fuel type\n    const [showFormFuelType, updateShowFomrFuelType] = useState(false);\n\n    // Show Form MPAN/MPRN \n    const [showFormMpanMprn, updateShowFormMpanMprn] = useState(false);\n\n    // Show Form Supply \n    const [showFormSupply, updateShowFormSupply] = useState(false);\n\n    // Show Form E7\n    const [showE7, updateShowE7] = useState(false);\n\n    // // Show Form Tariffs\n    // const [showFormTariffs, updateShowFormTariffs] = useState(false);\n\n    // Show Form Usage KWH\n    const [showFormUsageKWH, updateShowFormUsageKWH] = useState(false);\n\n    // Show Form Usage GAS\n    const [showFormUsageGAS, updateShowFormUsageGAS] = useState(false);\n\n    // Show Form Usage GBP_es\n    const [showFormUsageGBP_es, updateShowFormUsageGBP_es] = useState(false);\n\n    // Show Form Usage GBP_gs\n    const [showFormUsageGBP_gs, updateShowFormUsageGBP_gs] = useState(false);\n\n    // Show Form Usage AVG\n    const [showFormUsageAVG, updateShowFormUsageAVG] = useState(false);\n\n    // AVG for elec\n    const [avgElec, updateAvgElec] = useState(false);\n\n    // AVG for gas\n    const [avgGas, updateAvgGas] = useState(false);\n\n    // Show Form Debt\n    const [showFormDebt, updateShowFormDebt] = useState(false);\n\n    // Show Form Compare\n    const [showFormCompare, updateShowFormCompare] = useState(false);\n\n    // Show Form Details\n    const [showFormDetails, updateShowFormDetails] = useState(false);\n\n    // Show Form Bank Details\n    const [showFormBankDetails, updateShowFormBankDetails] = useState(false);\n\n    // Show rating\n    const [showFormRating, updateShowFormRating] = useState(false);\n\n    // Show Successful\n    const [showSuccessFul, updateShowSuccessFul] = useState(false);\n\n    // Add postcode to customer \n    const addPostCodeData = (postcode) => {\n        const postCodeData = postcode;\n        updateCustomerPostCode({\n            postcode: postCodeData.toUpperCase()\n        });\n    };\n\n    // Customer step\n    const customerStep = async (customer) => {\n\n        const { step, customerAddres, MPANDetails, dataGas, fuel, useGas, fuel_description, supplierInformation, electricityPaymentType, gasPaymentType, economy7, usage_property_size_dual, usage_property_size_es, usage_property_size_gs, usage_gas_description, usage_gbp_description_gs, usage_kwh_description, usage_gbp_description_es, avgElec, avgGas, debt } = customer;\n\n        console.log('Aqui aqui');\n\n        console.log(debt)\n\n        // Postcode\n        const { postcode } = customerAddres;\n\n        // Variables\n        let gas_only;\n        let elec_only;\n        let same_supplier;\n        let dual_active;\n\n        if (step > 1) {\n            /**-- Assign Values   */\n            gas_only = fuel_description.gas_only;\n            elec_only = fuel_description.elec_only;\n            same_supplier = fuel_description.same_supplier;\n            dual_active = fuel_description.dual_active;\n        }\n\n        // Variables for electricity and gas payment methods validated\n        let electricityPaymentType_validated;\n        let gasPaymentType_validated;\n\n        // Validation Electricity payment type\n        let electricity_payment_type_id;\n        let electricity_payment_type_method;\n\n        // Validation Gas payment type\n        let gas_payment_type_id;\n        let gas_payment_type_method;\n\n        // Default unit rate for electricity\n        const general_unit_rate_elec = { unit_rate: 17 };\n\n        // Default unit rate for gas\n        const general_unit_rate_gas = { unit_rate: 27 };\n\n        /**-- Unit rate for electricity --*/\n\n        // DocRef Unit Rate Elec\n        let unitRateElecRef = await db.collection(\"unitRates\").doc('unit_rate_svt_elec');\n\n        let unitRateElec = await unitRateElecRef.get().then((doc) => {\n            if (doc.exists) {\n\n                return doc.data();\n\n            } else {\n\n                // console.log(general_unit_rate_elec);\n\n                return general_unit_rate_elec;\n            }\n        }).catch((error) => {\n\n            console.log(\"Error getting document:\", error);\n            // console.log(general_unit_rate_elec);\n\n            return general_unit_rate_elec;\n        });\n\n        /**-- Unit rate for gas --*/\n\n        // DocRef Unit Rate gas\n        let unitRateGasRef = await db.collection(\"unitRates\").doc('unit_rate_svt_gas');\n\n        let unitRateGas = await unitRateGasRef.get().then((doc) => {\n            if (doc.exists) {\n\n                return doc.data();\n\n            } else {\n\n                // console.log(general_unit_rate_elec);\n\n                return general_unit_rate_gas;\n            }\n        }).catch((error) => {\n\n            console.log(\"Error getting document:\", error);\n            // console.log(general_unit_rate_elec);\n\n            return general_unit_rate_gas;\n        });\n\n        // Step 0 - Enter your postcode\n        switch (step) {\n            case 0:\n                console.log('Step 0');\n\n                // Update progress bar\n                updateProgressBar({ ...progressBar, step: 1 });\n                // Add postcode to customerData\n                addPostCodeData(postcode);\n                // Hidde Form Post Code\n                updateShowFormPostCode(false);\n                // Show Form Address\n                updateShowFormAddres(true);\n                // Hide Overlay\n                updateShowOverlay(false);\n                break;\n\n            // Step 1 - Enter your full address -> Choose your fuel type\n            case 1:\n                console.log('Step 1');\n\n                // Add postcode to customerData\n                addPostCodeData(postcode);\n\n                // Update customer address\n                updateCustomerAddress({ ...customerAddres });\n\n                // Update Electricity information\n                updateElectricityInformation({ ...electricityInformation, MPANDetails });\n\n                // Update Gas information\n                updateGasInformation({ ...gasInformation, dataGas });\n\n                // Update progress bar\n                updateProgressBar({ ...progressBar, step: 2 });\n                // Hide Address\n                updateShowFormAddres(false);\n                // Show Form Fuel type\n                updateShowFomrFuelType(true);\n                // Hide Overlay\n                updateShowOverlay(false);\n\n                break;\n\n            // Step 2 - Choose your fuel type -> Supply number\n            case 2:\n                console.log('Step 2');\n\n                // Update customer address\n                updateCustomerAddress({ ...customerAddres });\n\n                // Update Electricity information\n                updateElectricityInformation({ ...electricityInformation, MPANDetails });\n\n                // Update Gas information\n                updateGasInformation({ ...gasInformation, dataGas });\n\n                // Update fuel state\n                updateFuel({ ...fuel });\n\n                // Update useGas\n                updateUseGas({ ...useGas });\n\n                // Update Customer\n                updateCustomerInformation({\n                    ...customerInformation,\n                    fuel_description\n                });\n\n                // Update progress bar\n                updateProgressBar({ ...progressBar, step: 3 });\n                // Hide Address\n                updateShowFormAddres(false);\n                // Show MPAN/MPRN\n                updateShowFormMpanMprn(true);\n                // Hide Overlay\n                updateShowOverlay(false);\n\n                break;\n\n            // Step 3 - Supply number -> Choose your energy supplier(s)\n            case 3:\n                console.log('Step 3');\n\n                // Update customer address\n                updateCustomerAddress({ ...customerAddres });\n\n                // Update Electricity information\n                updateElectricityInformation({ ...electricityInformation, MPANDetails });\n\n                // Update Gas information\n                updateGasInformation({ ...gasInformation, dataGas });\n\n                // Update fuel state\n                updateFuel({ ...fuel });\n\n                // Update useGas\n                updateUseGas({ ...useGas });\n\n                // Update Supplier Information\n                updateSupplierInformation({ ...supplierInformation });\n\n                // Update Customer\n                updateCustomerInformation({\n                    ...customerInformation,\n                    fuel_description\n                });\n\n                // Update progress bar\n                updateProgressBar({ ...progressBar, step: 4 });\n                // Hide Address\n                updateShowFormAddres(false);\n                // Show Form Supply\n                updateShowFormSupply(true);\n                // Hide Overlay\n                updateShowOverlay(false);\n\n                break;\n\n            // Step 4 - Choose your energy supplier(s) -> Economy 7\n            case 4:\n                console.log('Step 4');\n\n                // Update customer address\n                updateCustomerAddress({ ...customerAddres });\n\n                // Update Electricity information\n                updateElectricityInformation({ ...electricityInformation, MPANDetails });\n\n                // Update Gas information\n                updateGasInformation({ ...gasInformation, dataGas });\n\n                // Update fuel state\n                updateFuel({ ...fuel });\n\n                // Update useGas\n                updateUseGas({ ...useGas });\n\n                // Update Supplier Information\n                updateSupplierInformation({ ...supplierInformation });\n\n                /**-- Payment type validation --*/\n\n                // Validation Electricity payment type\n                electricity_payment_type_id = electricityPaymentType.electricity_payment_type_id;\n                electricity_payment_type_method = electricityPaymentType.electricity_payment_type_method;\n\n                if ((electricity_payment_type_id === '') && (electricity_payment_type_method === '')) {\n                    // Delete Electricity payment type if it is empty\n                    const copy_electricityPaymentType = { ...electricityPaymentType };\n                    delete copy_electricityPaymentType['electricity_payment_type_id'];\n                    delete copy_electricityPaymentType['electricity_payment_type_method'];\n                    // Update Electricity payment type\n                    updateElectricityPaymentType({ ...copy_electricityPaymentType });\n                    // Assigning validated value\n                    electricityPaymentType_validated = copy_electricityPaymentType;\n                } else {\n                    // Update Electricity payment type\n                    updateElectricityPaymentType({ ...electricityPaymentType });\n                    // Assigning validated value\n                    electricityPaymentType_validated = electricityPaymentType;\n                }\n\n                // Validation Gas payment type\n                gas_payment_type_id = gasPaymentType.gas_payment_type_id;\n                gas_payment_type_method = gasPaymentType.gas_payment_type_method;\n\n                if ((gas_payment_type_id === '') && (gas_payment_type_method === '')) {\n                    // Delete Gas payment type if it is empty\n                    const copy_gasPaymentType = { ...gasPaymentType };\n                    delete copy_gasPaymentType['gas_payment_type_id'];\n                    delete copy_gasPaymentType['gas_payment_type_method'];\n                    // Update Gas payment type\n                    updateGasPaymentType({ ...copy_gasPaymentType });\n                    // Assigning validated value\n                    gasPaymentType_validated = copy_gasPaymentType;\n                } else {\n                    // Update Gas payment type\n                    updateGasPaymentType({ ...gasPaymentType });\n                    // Assigning validated value\n                    gasPaymentType_validated = gasPaymentType;\n                }\n\n                // Update customer information\n                updateCustomerInformation({\n                    ...customerInformation,\n                    customerAddres,\n                    useGas,\n                    fuel,\n                    supplierInformation,\n                    electricityPaymentType: electricityPaymentType_validated,\n                    gasPaymentType: gasPaymentType_validated,\n                    fuel_description,\n                });\n\n                // Update progress bar\n                updateProgressBar({ ...progressBar, step: 5 });\n                // Hide Address\n                updateShowFormAddres(false);\n                // Show FormE7\n                updateShowE7(true);\n                // Hide Overlay\n                updateShowOverlay(false);\n\n                break;\n\n            // Step 5 - Economy 7 -> How much energy do you use?\n            case 5:\n                console.log('Step 5');\n\n                // Update customer address\n                updateCustomerAddress({ ...customerAddres });\n\n                // Update Electricity information\n                updateElectricityInformation({ ...electricityInformation, MPANDetails });\n\n                // Update Gas information\n                updateGasInformation({ ...gasInformation, dataGas });\n\n                // Update fuel state\n                updateFuel({ ...fuel });\n\n                // Update useGas\n                updateUseGas({ ...useGas });\n\n                // Update Supplier Information\n                updateSupplierInformation({ ...supplierInformation });\n\n                /**-- Payment type validation --*/\n\n                // Validation Electricity payment type\n                electricity_payment_type_id = electricityPaymentType.electricity_payment_type_id;\n                electricity_payment_type_method = electricityPaymentType.electricity_payment_type_method;\n\n                if ((electricity_payment_type_id === '') && (electricity_payment_type_method === '')) {\n                    // Delete Electricity payment type if it is empty\n                    const copy_electricityPaymentType = { ...electricityPaymentType };\n                    delete copy_electricityPaymentType['electricity_payment_type_id'];\n                    delete copy_electricityPaymentType['electricity_payment_type_method'];\n                    // Update Electricity payment type\n                    updateElectricityPaymentType({ ...copy_electricityPaymentType });\n                    // Assigning validated value\n                    electricityPaymentType_validated = copy_electricityPaymentType;\n                } else {\n                    // Update Electricity payment type\n                    updateElectricityPaymentType({ ...electricityPaymentType });\n                    // Assigning validated value\n                    electricityPaymentType_validated = electricityPaymentType;\n                }\n\n                // Validation Gas payment type\n                gas_payment_type_id = gasPaymentType.gas_payment_type_id;\n                gas_payment_type_method = gasPaymentType.gas_payment_type_method;\n\n                if ((gas_payment_type_id === '') && (gas_payment_type_method === '')) {\n                    // Delete Gas payment type if it is empty\n                    const copy_gasPaymentType = { ...gasPaymentType };\n                    delete copy_gasPaymentType['gas_payment_type_id'];\n                    delete copy_gasPaymentType['gas_payment_type_method'];\n                    // Update Gas payment type\n                    updateGasPaymentType({ ...copy_gasPaymentType });\n                    // Assigning validated value\n                    gasPaymentType_validated = copy_gasPaymentType;\n                } else {\n                    // Update Gas payment type\n                    updateGasPaymentType({ ...gasPaymentType });\n                    // Assigning validated value\n                    gasPaymentType_validated = gasPaymentType;\n                }\n\n                // Update Economy 7\n                updateEconomy7({\n                    economy7: {\n                        ...economy7\n                    }\n                });\n\n                /**-- Assign Tariff description  */\n\n                // elec_only\n                if (elec_only) {\n                    console.log('elec_only, Assign Tariff description');\n\n                    // Update customer information\n                    updateCustomerInformation({\n                        ...customerInformation,\n                        customerAddres,\n                        useGas,\n                        fuel,\n                        supplierInformation,\n                        electricityPaymentType: electricityPaymentType_validated,\n                        gasPaymentType: gasPaymentType_validated,\n                        fuel_description,\n                        economy7,\n                        tariff_description: {\n                            unit_rate: unitRateElec.unit_rate\n                        }\n                    });\n                }\n\n                // gas_only\n                if (gas_only) {\n                    console.log('gas_only, Assign Tariff description');\n\n                    // Update customer information\n                    updateCustomerInformation({\n                        ...customerInformation,\n                        customerAddres,\n                        useGas,\n                        fuel,\n                        supplierInformation,\n                        electricityPaymentType: electricityPaymentType_validated,\n                        gasPaymentType: gasPaymentType_validated,\n                        fuel_description,\n                        economy7,\n                        tariff_description: {\n                            unit_rate: unitRateGas.unit_rate\n                        }\n                    });\n                }\n\n                // dual_active\n                if (dual_active) {\n                    // same_supplier\n                    if (same_supplier) {\n                        console.log('Same supplier true, Assign Tariff description');\n\n                        // Update customer information\n                        updateCustomerInformation({\n                            ...customerInformation,\n                            customerAddres,\n                            useGas,\n                            fuel,\n                            supplierInformation,\n                            electricityPaymentType: electricityPaymentType_validated,\n                            gasPaymentType: gasPaymentType_validated,\n                            fuel_description,\n                            economy7,\n                            tariff_description: {\n                                unit_rate_elec: unitRateElec.unit_rate,\n                                unit_rate_gas: unitRateGas.unit_rate,\n                            }\n                        });\n                    } else {\n                        console.log('Same supplier false, Assign Tariff description');\n\n                        // Update customer information\n                        updateCustomerInformation({\n                            ...customerInformation,\n                            customerAddres,\n                            useGas,\n                            fuel,\n                            supplierInformation,\n                            electricityPaymentType: electricityPaymentType_validated,\n                            gasPaymentType: gasPaymentType_validated,\n                            fuel_description,\n                            economy7,\n                            tariff_description_elec: {\n                                elec_tariff: {\n                                    unit_rate: unitRateElec.unit_rate\n                                }\n                            },\n                            tariff_description_gas: {\n                                gas_tariff: {\n                                    unit_rate: unitRateGas.unit_rate\n                                }\n                            }\n                        });\n                    }\n                }\n\n                // Update progress bar\n                updateProgressBar({ ...progressBar, step: 6 });\n                // Hide Address\n                updateShowFormAddres(false);\n\n                // Conditional to usage section\n                if (gas_only) {\n                    // Show Gas\n                    updateShowFormUsageGAS(true)\n                } else {\n                    // Show KWH\n                    updateShowFormUsageKWH(true);\n                }\n\n                // Hide Overlay\n                updateShowOverlay(false);\n\n                break;\n            \n            // Step 6 - How much energy do you use? -> Existing debt\n            case 6:\n                console.log('Step 6');\n                break;\n\n            // Step 7 - How much energy do you use? -> Compare section\n            case 7:\n                console.log('Step 7');\n\n                // Update customer address\n                updateCustomerAddress({ ...customerAddres });\n\n                // Update Electricity information\n                updateElectricityInformation({ ...electricityInformation, MPANDetails });\n\n                // Update Gas information\n                updateGasInformation({ ...gasInformation, dataGas });\n\n                // Update fuel state\n                updateFuel({ ...fuel });\n\n                // Update useGas\n                updateUseGas({ ...useGas });\n\n                // Update Supplier Information\n                updateSupplierInformation({ ...supplierInformation });\n\n                /**-- Payment type validation --*/\n\n                // Validation Electricity payment type\n                electricity_payment_type_id = electricityPaymentType.electricity_payment_type_id;\n                electricity_payment_type_method = electricityPaymentType.electricity_payment_type_method;\n\n                if ((electricity_payment_type_id === '') && (electricity_payment_type_method === '')) {\n                    // Delete Electricity payment type if it is empty\n                    const copy_electricityPaymentType = { ...electricityPaymentType };\n                    delete copy_electricityPaymentType['electricity_payment_type_id'];\n                    delete copy_electricityPaymentType['electricity_payment_type_method'];\n                    // Update Electricity payment type\n                    updateElectricityPaymentType({ ...copy_electricityPaymentType });\n                    // Assigning validated value\n                    electricityPaymentType_validated = copy_electricityPaymentType;\n                } else {\n                    // Update Electricity payment type\n                    updateElectricityPaymentType({ ...electricityPaymentType });\n                    // Assigning validated value\n                    electricityPaymentType_validated = electricityPaymentType;\n                }\n\n                // Validation Gas payment type\n                gas_payment_type_id = gasPaymentType.gas_payment_type_id;\n                gas_payment_type_method = gasPaymentType.gas_payment_type_method;\n\n                if ((gas_payment_type_id === '') && (gas_payment_type_method === '')) {\n                    // Delete Gas payment type if it is empty\n                    const copy_gasPaymentType = { ...gasPaymentType };\n                    delete copy_gasPaymentType['gas_payment_type_id'];\n                    delete copy_gasPaymentType['gas_payment_type_method'];\n                    // Update Gas payment type\n                    updateGasPaymentType({ ...copy_gasPaymentType });\n                    // Assigning validated value\n                    gasPaymentType_validated = copy_gasPaymentType;\n                } else {\n                    // Update Gas payment type\n                    updateGasPaymentType({ ...gasPaymentType });\n                    // Assigning validated value\n                    gasPaymentType_validated = gasPaymentType;\n                }\n\n                // Update Economy 7\n                updateEconomy7({\n                    economy7: {\n                        ...economy7\n                    }\n                });\n\n                /**-- Assign Tariff description && Usage */\n\n                // Entered usage boolean values \n                // Elec\n                const usage_kwh_entered = usage_kwh_description.usage_kwh_entered;\n                const usage_gbp_entered_es = usage_gbp_description_es.usage_gbp_entered;\n                const usage_size_entered_es = usage_property_size_es.usage_size_entered;\n\n                // Gas\n                const usage_gas_entered = usage_gas_description.usage_kwh_entered;\n                const usage_gbp_entered_gs = usage_gbp_description_gs.usage_gbp_entered;\n                const usage_size_entered_gs = usage_property_size_gs.usage_size_entered;\n\n                // Dual\n                const usage_size_entered_dual = usage_property_size_dual.usage_size_entered;\n\n                // usage_validated\n                const usage_validated = {\n                    usage_kwh_description,\n                    usage_gbp_description_es,\n                    usage_gas_description,\n                    usage_gbp_description_gs,\n                    usage_property_size_es,\n                    usage_property_size_gs,\n                    usage_property_size_dual\n                };\n\n                // copy_usage_validated\n                let copy_usage_validated = { ...usage_validated };\n\n                /**-- Electricity Values --*/\n\n                // Validation usage_kwh_entered\n                if (usage_kwh_entered) {\n                    delete copy_usage_validated['usage_gbp_description_es'];\n                    delete copy_usage_validated['usage_property_size_es'];\n                    delete copy_usage_validated['usage_property_size_dual'];\n                }\n\n                //  Validation usage_gbp_entered_es\n                if (usage_gbp_entered_es) {\n                    delete copy_usage_validated['usage_property_size_es'];\n                    delete copy_usage_validated['usage_property_size_dual'];\n                }\n\n                // Validation usage_size_entered_es\n                if (usage_size_entered_es) {\n                    delete copy_usage_validated['usage_property_size_dual'];\n                    delete copy_usage_validated['usage_property_size_gs'];\n                }\n\n                /**-- Gas Values --*/\n\n                // usage_gas_entered\n                if (usage_gas_entered) {\n                    delete copy_usage_validated['usage_gbp_description_gs'];\n                    delete copy_usage_validated['usage_property_size_gs'];\n                    delete copy_usage_validated['usage_property_size_dual'];\n                }\n\n                // Validation usage_gbp_entered_gs\n                if (usage_gbp_entered_gs) {\n                    delete copy_usage_validated['usage_property_size_gs'];\n                    delete copy_usage_validated['usage_property_size_dual'];\n                }\n\n                // Validation usage_size_entered_gs\n                if (usage_size_entered_gs) {\n                    delete copy_usage_validated['usage_property_size_dual'];\n                    delete copy_usage_validated['usage_property_size_es'];\n                }\n\n                /**-- Dual Values --*/\n\n                // Validation usage_size_entered_dual\n                if (usage_size_entered_dual) {\n                    delete copy_usage_validated['usage_property_size_es'];\n                    delete copy_usage_validated['usage_property_size_gs'];\n                }\n\n                // elec_only\n                if (elec_only) {\n                    console.log('elec_only, Assign Tariff description');\n\n                    delete copy_usage_validated['usage_gas_description'];\n                    delete copy_usage_validated['usage_gbp_description_gs'];\n                    delete copy_usage_validated['usage_property_size_gs'];\n                    delete copy_usage_validated['usage_property_size_dual'];\n\n                    // Update customer information\n                    updateCustomerInformation({\n                        ...customerInformation,\n                        customerAddres,\n                        useGas,\n                        fuel,\n                        supplierInformation,\n                        electricityPaymentType: electricityPaymentType_validated,\n                        gasPaymentType: gasPaymentType_validated,\n                        fuel_description,\n                        economy7,\n                        tariff_description: {\n                            unit_rate: unitRateElec.unit_rate\n                        },\n                        debt,\n                        ...copy_usage_validated\n                    });\n                }\n\n                // gas_only\n                if (gas_only) {\n                    console.log('gas_only, Assign Tariff description');\n\n                    delete copy_usage_validated['usage_kwh_description'];\n                    delete copy_usage_validated['usage_gbp_description_es'];\n                    delete copy_usage_validated['usage_property_size_es'];\n                    delete copy_usage_validated['usage_property_size_dual'];\n\n                    // Update customer information\n                    updateCustomerInformation({\n                        ...customerInformation,\n                        customerAddres,\n                        useGas,\n                        fuel,\n                        supplierInformation,\n                        electricityPaymentType: electricityPaymentType_validated,\n                        gasPaymentType: gasPaymentType_validated,\n                        fuel_description,\n                        economy7,\n                        tariff_description: {\n                            unit_rate: unitRateGas.unit_rate\n                        },\n                        debt,\n                        ...copy_usage_validated\n                    });\n                }\n\n                // dual_active\n                if (dual_active) {\n                    // same_supplier\n                    if (same_supplier) {\n                        console.log('Same supplier true, Assign Tariff description');\n\n                        // Update customer information\n                        updateCustomerInformation({\n                            ...customerInformation,\n                            customerAddres,\n                            useGas,\n                            fuel,\n                            supplierInformation,\n                            electricityPaymentType: electricityPaymentType_validated,\n                            gasPaymentType: gasPaymentType_validated,\n                            fuel_description,\n                            economy7,\n                            tariff_description: {\n                                unit_rate_elec: unitRateElec.unit_rate,\n                                unit_rate_gas: unitRateGas.unit_rate,\n                            },\n                            debt,\n                            ...copy_usage_validated\n                        });\n\n                    } else {\n                        console.log('Same supplier false, Assign Tariff description');\n\n                        // Update customer information\n                        updateCustomerInformation({\n                            ...customerInformation,\n                            customerAddres,\n                            useGas,\n                            fuel,\n                            supplierInformation,\n                            electricityPaymentType: electricityPaymentType_validated,\n                            gasPaymentType: gasPaymentType_validated,\n                            fuel_description,\n                            economy7,\n                            tariff_description_elec: {\n                                elec_tariff: {\n                                    unit_rate: unitRateElec.unit_rate\n                                }\n                            },\n                            tariff_description_gas: {\n                                gas_tariff: {\n                                    unit_rate: unitRateGas.unit_rate\n                                }\n                            },\n                            debt,\n                            ...copy_usage_validated\n                        });\n                    }\n                }\n\n                // Update AvgElec\n                updateAvgElec(avgElec);\n                // Update AvgGas\n                updateAvgGas(avgGas);\n\n                // Update progress bar\n                updateProgressBar({ ...progressBar, step: 8 });\n                // Hide Form Address\n                updateShowFormAddres(false);\n                // Show Compare\n                updateShowFormCompare(true);\n\n                // Hide Overlay\n                updateShowOverlay(false);\n\n                break;\n\n            // Step 8\n            case 8:\n                console.log('Step 8');\n                break;\n            default:\n                break;\n        }\n    }\n\n    // States control\n    // console.log('De aqui para abajo');\n    // console.log(customerAddres);\n    // console.log(useGas);\n    // console.log(fuel);   \n    // console.log(electricityInformation);\n    // console.log(gasInformation);\n    // console.log(supplierInformation);\n    console.log(customerInformation);\n    // console.log(electricityPaymentType);\n    // console.log(gasPaymentType);\n    // console.log(economy7);\n\n    // console.log(electricityInformation);\n    // console.log(gasInformation);\n    // console.log(supplierInformation);\n    // console.log(customerInformation);\n    // console.log(electricityPaymentType);\n    // console.log(customerAddres);\n    // console.log(economy7);\n    // console.log(useGas);\n    // console.log(fuel);\n\n    return (\n        <>\n            {/* Navbar */}\n            <Navbar\n                progressBar={progressBar}\n                user={user}\n            />\n\n            {/* Overlay */}\n            {showOverlay ? <Overlay text={'Loading data, please wait...'} spinner={true} /> : null}\n\n            <>\n                {/* Postcode form*/}\n                {showFormPostCode ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormPostCode\n                                addPostCodeData={addPostCodeData}\n                                progressBar={progressBar}\n                                showScript={showScript}\n                                updateShowFormPostCode={updateShowFormPostCode}\n                                updateShowFormAddres={updateShowFormAddres}\n                                updateProgressBar={updateProgressBar}\n                                updateShowScript={updateShowScript}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    (\n                        null\n                    )\n                }\n\n                {/* Address form*/}\n                {showFormAddres ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormAddress\n                                postcodeValue={customerPostCode.postcode}\n                                gasInformation={gasInformation}\n                                electricityInformation={electricityInformation}\n                                progressBar={progressBar}\n                                showScript={showScript}\n                                customerStep={customerStep}\n                                updateCustomerAddress={updateCustomerAddress}\n                                updateGasInformation={updateGasInformation}\n                                updateElectricityInformation={updateElectricityInformation}\n                                updateShowFormPostCode={updateShowFormPostCode}\n                                updateShowFormAddres={updateShowFormAddres}\n                                updateShowOverlay={updateShowOverlay}\n                                updateProgressBar={updateProgressBar}\n                                updateShowScript={updateShowScript}\n                                updateShowFomrFuelType={updateShowFomrFuelType}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    (\n                        null\n                    )\n                }\n\n                {/* Fuel type */}\n                {showFormFuelType ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormFuelType\n                                customerInformation={customerInformation}\n                                showScript={showScript}\n                                fuel={fuel}\n                                useGas={useGas}\n                                electricityInformation={electricityInformation}\n                                gasInformation={gasInformation}\n                                supplierInformation={supplierInformation}\n                                customerAddres={customerAddres}\n                                progressBar={progressBar}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateFuel={updateFuel}\n                                updateUseGas={updateUseGas}\n                                updateElectricityInformation={updateElectricityInformation}\n                                updateGasInformation={updateGasInformation}\n                                updateSupplierInformation={updateSupplierInformation}\n                                updateCustomerAddress={updateCustomerAddress}\n                                updateShowFomrFuelType={updateShowFomrFuelType}\n                                updateShowFormMpanMprn={updateShowFormMpanMprn}\n                                updateShowFormAddres={updateShowFormAddres}\n                                updateProgressBar={updateProgressBar}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    null\n                }\n\n                {/* MPAN/MPRN form*/}\n                {showFormMpanMprn ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormMpanMprn\n                                customerAddres={customerAddres}\n                                electricityInformation={electricityInformation}\n                                gasInformation={gasInformation}\n                                customerInformation={customerInformation}\n                                useGas={useGas}\n                                fuel={fuel}\n                                progressBar={progressBar}\n                                showScript={showScript}\n                                updateCustomerAddress={updateCustomerAddress}\n                                updateElectricityInformation={updateElectricityInformation}\n                                updateGasInformation={updateGasInformation}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateProgressBar={updateProgressBar}\n                                updateShowFormMpanMprn={updateShowFormMpanMprn}\n                                updateShowFormSupply={updateShowFormSupply}\n                                updateShowFomrFuelType={updateShowFomrFuelType}\n                                updateShowOverlay={updateShowOverlay}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    (\n                        null\n                    )\n                }\n                {/* Supplier Information form*/}\n                {showFormSupply ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormSupply\n                                customerAddres={customerAddres}\n                                electricityInformation={electricityInformation}\n                                gasInformation={gasInformation}\n                                supplierInformation={supplierInformation}\n                                useGas={useGas}\n                                fuel={fuel}\n                                customerInformation={customerInformation}\n                                electricityPaymentType={electricityPaymentType}\n                                gasPaymentType={gasPaymentType}\n                                progressBar={progressBar}\n                                showScript={showScript}\n                                updateCustomerAddress={updateCustomerAddress}\n                                updateShowFormMpanMprn={updateShowFormMpanMprn}\n                                updateShowFormSupply={updateShowFormSupply}\n                                updateShowE7={updateShowE7}\n                                updateSupplierInformation={updateSupplierInformation}\n                                updateElectricityInformation={updateElectricityInformation}\n                                updateGasInformation={updateGasInformation}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateElectricityPaymentType={updateElectricityPaymentType}\n                                updateGasPaymentType={updateGasPaymentType}\n                                updateFuel={updateFuel}\n                                updateProgressBar={updateProgressBar}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    (\n                        null\n                    )\n                }\n                {/* Economy 7 form */}\n                {showE7 ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormE7\n                                economy7={economy7}\n                                customerInformation={customerInformation}\n                                electricityPaymentType={electricityPaymentType}\n                                gasPaymentType={gasPaymentType}\n                                electricityInformation={electricityInformation}\n                                gasInformation={gasInformation}\n                                supplierInformation={supplierInformation}\n                                progressBar={progressBar}\n                                showScript={showScript}\n                                updateEconomy7={updateEconomy7}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateShowFormSupply={updateShowFormSupply}\n                                updateShowE7={updateShowE7}\n                                // updateShowFormTariffs={updateShowFormTariffs}\n                                updateElectricityPaymentType={updateElectricityPaymentType}\n                                updateGasPaymentType={updateGasPaymentType}\n                                updateProgressBar={updateProgressBar}\n                                updateShowOverlay={updateShowOverlay}\n                                updateSupplierInformation={updateSupplierInformation}\n                                updateGasInformation={updateGasInformation}\n                                updateElectricityInformation={updateElectricityInformation}\n                                updateShowFormUsageKWH={updateShowFormUsageKWH}\n                                updateShowFormUsageGAS={updateShowFormUsageGAS}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    (\n                        null\n                    )\n                }\n                {/* Form Tariffs\n                {showFormTariffs ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormTariffs\n                                customerInformation={customerInformation}\n                                showScript={showScript}\n                                progressBar={progressBar}\n                                updateShowE7={updateShowE7}\n                                // updateShowFormTariffs={updateShowFormTariffs}\n                                updateShowOverlay={updateShowOverlay}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateElectricityPaymentType={updateElectricityPaymentType}\n                                updateShowFormUsageKWH={updateShowFormUsageKWH}\n                                updateShowFormUsageGAS={updateShowFormUsageGAS}\n                                updateProgressBar={updateProgressBar}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    (\n                        null\n                    )\n                } */}\n                {/* Form Usage */}\n                {showFormUsageKWH ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormUsageKWH\n                                customerInformation={customerInformation}\n                                progressBar={progressBar}\n                                showScript={showScript}\n                                updateAvgElec={updateAvgElec}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateShowFormUsageKWH={updateShowFormUsageKWH}\n                                updateShowFormUsageGAS={updateShowFormUsageGAS}\n                                updateShowFormUsageGBP_es={updateShowFormUsageGBP_es}\n                                updateShowFormDebt={updateShowFormDebt}\n                                // updateShowFormTariffs={updateShowFormTariffs}\n                                updateProgressBar={updateProgressBar}\n                                updateShowOverlay={updateShowOverlay}\n                                updateShowE7={updateShowE7}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    null\n                }\n                {/* Form Usage */}\n                {showFormUsageGAS ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormUsageGAS\n                                customerInformation={customerInformation}\n                                progressBar={progressBar}\n                                avgElec={avgElec}\n                                showScript={showScript}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateShowFormUsageGAS={updateShowFormUsageGAS}\n                                updateShowFormUsageKWH={updateShowFormUsageKWH}\n                                updateShowFormUsageGBP_gs={updateShowFormUsageGBP_gs}\n                                updateShowFormUsageGBP_es={updateShowFormUsageGBP_es}\n                                updateShowFormUsageAVG={updateShowFormUsageAVG}\n                                updateShowFormDebt={updateShowFormDebt}\n                                // updateShowFormTariffs={updateShowFormTariffs}\n                                updateAvgGas={updateAvgGas}\n                                updateAvgElec={updateAvgElec}\n                                updateProgressBar={updateProgressBar}\n                                updateShowOverlay={updateShowOverlay}\n                                updateShowE7={updateShowE7}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    null\n                }\n                {/* Form Usage GBP */}\n                {showFormUsageGBP_es ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormUsageGBP_es\n                                customerInformation={customerInformation}\n                                progressBar={progressBar}\n                                showScript={showScript}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateShowFormUsageKWH={updateShowFormUsageKWH}\n                                updateShowFormUsageGBP_es={updateShowFormUsageGBP_es}\n                                updateShowFormUsageGBP_es={updateShowFormUsageGBP_es}\n                                updateShowFormUsageAVG={updateShowFormUsageAVG}\n                                updateShowFormUsageGAS={updateShowFormUsageGAS}\n                                updateShowFormDebt={updateShowFormDebt}\n                                updateAvgElec={updateAvgElec}\n                                updateProgressBar={updateProgressBar}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    null\n                }\n                {/* Form Usage GBP */}\n                {showFormUsageGBP_gs ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormUsageGBP_gs\n                                customerInformation={customerInformation}\n                                avgElec={avgElec}\n                                progressBar={progressBar}\n                                showScript={showScript}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateShowFormUsageGAS={updateShowFormUsageGAS}\n                                updateShowFormUsageGBP_gs={updateShowFormUsageGBP_gs}\n                                updateShowFormUsageAVG={updateShowFormUsageAVG}\n                                updateShowFormDebt={updateShowFormDebt}\n                                updateAvgGas={updateAvgGas}\n                                updateProgressBar={updateProgressBar}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    null\n                }\n                {/* Form Usage AVG*/}\n                {showFormUsageAVG ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormUsageAVG\n                                customerInformation={customerInformation}\n                                avgElec={avgElec}\n                                avgGas={avgGas}\n                                progressBar={progressBar}\n                                showScript={showScript}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateShowFormUsageAVG={updateShowFormUsageAVG}\n                                updateShowFormUsageGBP_es={updateShowFormUsageGBP_es}\n                                updateShowFormUsageGBP_gs={updateShowFormUsageGBP_gs}\n                                updateShowFormUsageGAS={updateShowFormUsageGAS}\n                                updateShowFormDebt={updateShowFormDebt}\n                                updateProgressBar={updateProgressBar}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    null\n                }\n                {/* Form Debt */}\n                {showFormDebt ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormDebt\n                                customerInformation={customerInformation}\n                                showScript={showScript}\n                                progressBar={progressBar}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateShowFormUsageKWH={updateShowFormUsageKWH}\n                                updateShowFormUsageGBP_es={updateShowFormUsageGBP_es}\n                                updateShowFormUsageAVG={updateShowFormUsageAVG}\n                                updateProgressBar={updateProgressBar}\n                                updateShowFormUsageGAS={updateShowFormUsageGAS}\n                                updateShowFormUsageGBP_gs={updateShowFormUsageGBP_gs}\n                                updateShowFormDebt={updateShowFormDebt}\n                                updateShowFormCompare={updateShowFormCompare}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    null\n                }\n                {/* Form Compare */}\n                {showFormCompare ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormCompare\n                                customerInformation={customerInformation}\n                                user={user}\n                                electricityInformation={electricityInformation}\n                                gasInformation={gasInformation}\n                                avgElec={avgElec}\n                                avgGas={avgGas}\n                                showScript={showScript}\n                                progressBar={progressBar}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateShowOverlay={updateShowOverlay}\n                                updateShowFormCompare={updateShowFormCompare}\n                                updateShowFormUsageKWH={updateShowFormUsageKWH}\n                                updateShowFormUsageGBP_es={updateShowFormUsageGBP_es}\n                                updateShowFormUsageAVG={updateShowFormUsageAVG}\n                                updateShowFormUsageGAS={updateShowFormUsageGAS}\n                                updateShowFormUsageGBP_gs={updateShowFormUsageGBP_gs}\n                                updateShowFormDetails={updateShowFormDetails}\n                                updateShowFormDebt={updateShowFormDebt}\n                                updateProgressBar={updateProgressBar}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    null\n                }\n                {/* Form Details */}\n                {showFormDetails ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormDetails\n                                customerInformation={customerInformation}\n                                progressBar={progressBar}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateShowFormCompare={updateShowFormCompare}\n                                updateShowFormDetails={updateShowFormDetails}\n                                updateProgressBar={updateProgressBar}\n                                updateShowFormBankDetails={updateShowFormBankDetails}\n                                updateShowOverlay={updateShowOverlay}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    null\n                }\n                {/* Form Bank Details */}\n                {showFormBankDetails ?\n                    (\n                        <Suspense fallback={<Overlay text={'Loading data, please wait...'} spinner={true} />}>\n                            <FormBankDetails\n                                customerInformation={customerInformation}\n                                progressBar={progressBar}\n                                updateCustomerInformation={updateCustomerInformation}\n                                updateShowFormDetails={updateShowFormDetails}\n                                updateProgressBar={updateProgressBar}\n                                updateShowFormBankDetails={updateShowFormBankDetails}\n                                updateShowFormRating={updateShowFormRating}\n                                updateShowOverlay={updateShowOverlay}\n                            />\n                        </Suspense>\n                    )\n                    :\n                    null\n                }\n                {/* Form rating */}\n                {showFormRating ?\n                    (\n                        <FormRating\n                            customerInformation={customerInformation}\n                            progressBar={progressBar}\n                            updateCustomerInformation={updateCustomerInformation}\n                            updateShowFormRating={updateShowFormRating}\n                            updateShowSuccessFul={updateShowSuccessFul}\n                            updateProgressBar={updateProgressBar}\n                        />\n                    )\n                    :\n                    null\n                }\n                {/* Form successful */}\n                {showSuccessFul ?\n                    (\n                        <FormSuccessful\n\n                        />\n                    )\n                    :\n                    null\n                }\n            </>\n            {/* Footer */}\n            <Footer />\n        </>\n    )\n}\n\nexport default Home;\n","/Users/juanlugo/Desktop/sp-firebase/src/pages/LoginPage/Login.jsx",["189","190","191"],"/Users/juanlugo/Desktop/sp-firebase/src/components/Footer/Footer.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/Navbar/Navbar.jsx",["192","193"],"import React, { useEffect, useState } from 'react';\n// React Router\nimport { useHistory } from 'react-router-dom';\n// Firebase\nimport { db, auth } from '../../firebase/firebase';\nimport firebase from \"firebase/app\";\n// Components\nimport Overlay from '../Overlay/Overlay';\n// Icons\nimport { FaRegUser } from \"react-icons/fa\";\n// CSS\nimport './Navbar.css';\n// Icons\nimport { IoMdCloseCircleOutline } from \"react-icons/io\";\n\nfunction Navbar({ progressBar, user }) {\n\n    /**-- STATES --*/\n    const [overlay, updateOverlay] = useState(false);\n\n    // ActiveBreak\n    const [activeBreak, updateActiveBreak] = useState(false);\n\n    // Close button effect\n    const [btnCloseAnimation, setBtnCloseAnimation] = useState(false);\n\n    // Histoty\n    const history = useHistory();\n\n    // Initial state \n    const step = progressBar.step;\n    const percentage = document.getElementById('percentage');\n    let step_text = 'Enter your postcode';\n    if (step === 0) {\n        if (percentage !== null) {\n            percentage.style.width = '0%';\n            step_text = 'Enter your postcode';\n        }\n    }\n    // Step 1\n    if (step === 1) {\n        percentage.style.width = '10%';\n        step_text = 'Enter your full address';\n    }\n    // Step 2\n    if (step === 2) {\n        percentage.style.width = '20%';\n        step_text = 'Choose your fuel type';\n    }\n    // Step 3\n    if (step === 3) {\n        percentage.style.width = '30%';\n        step_text = 'Supply number';\n    }\n    // Step 4\n    if (step === 4) {\n        percentage.style.width = '40%';\n        step_text = 'Choose your energy supplier(s)';\n    }\n    // Step 5\n    if (step === 5) {\n        percentage.style.width = '50%';\n        step_text = 'Enter economy 7';\n    }\n\n    // Step 6\n    if (step === 6) {\n        percentage.style.width = '60%';\n        step_text = 'How much energy do you use?';\n    }\n\n    // Step 7\n    if (step === 7) {\n        percentage.style.width = '65%';\n        step_text = 'Existing debt';\n    }\n\n    // Step 8\n    if (step === 8) {\n        percentage.style.width = '70%';\n        step_text = 'Compare section';\n    }\n\n    // Step 9\n    if (step === 9) {\n        percentage.style.width = '80%';\n        step_text = 'Customer Details';\n    }\n\n    // Step 10\n    if (step === 10) {\n        percentage.style.width = '90%';\n        step_text = 'Bank Details';\n    }\n\n    // Step 11\n    if (step === 11) {\n        percentage.style.width = '100%';\n        step_text = 'Sign up successful';\n    }\n\n    /**-- FUNCTIONS --*/\n\n    // activeSidebar\n    const activeSidebar = () => {\n        // Active Sidebar \n        let sidebar = document.getElementById(\"sidebar\");\n        sidebar.classList.toggle('active-sidebar');\n\n        // setBtnCloseAnimation\n        setBtnCloseAnimation(false);\n\n        // Show Overlay\n        updateOverlay(true);\n    }\n\n    // closeSidebar\n    const closeSidebar = () => {\n        // Close Sidebar \n        let sidebar = document.getElementById(\"sidebar\");\n        sidebar.classList.remove('active-sidebar');\n\n        // setBtnCloseAnimation\n        setBtnCloseAnimation(true);\n\n        // Hide Overlay\n        updateOverlay(false);\n    }\n\n    // startBreak\n    const startBreak = async () => {\n        console.log('startBreak');\n        // Get year\n        let year = new Date().getFullYear();\n        // Get month\n        let month = new Date().getMonth();\n        // Get date\n        let date = new Date().getDate();\n        // Get time in milliseconds\n        let milliseconds = new Date().getTime();\n        // Break ID\n        let breakId = `break-start-${date}-${month}-${year}-${milliseconds}`;\n\n        // Break data object\n        let breakData = {};\n\n        // Create new object key\n        breakData[breakId] = { timeStamp: firebase.firestore.FieldValue.serverTimestamp() };\n\n        // Document ref\n        let docRef = await db.collection(\"users\").doc(user.uid);\n\n        // Fetching userData data\n        const getUserData = async () => docRef.get().then((doc) => {\n            // If userData exist\n            if (doc.exists) {\n                return doc.data();\n            }\n\n            return;\n        });\n\n        // Assign getUserData\n        let userData = await getUserData();\n\n        // Validation\n        if (userData) {\n            // Update user in firebase\n            db.collection(\"users\").doc(user.uid).update({\n                // Save a copy of the actual data\n                ...userData,\n                // Add into the breakStart object\n                breakStart: {\n                    // Save a copy of the actual data\n                    ...userData.breakStart,\n                    // Add new field\n                    ...breakData\n                }\n            });\n        }\n\n        // Close Sidebar \n        let sidebar = document.getElementById(\"sidebar\");\n        sidebar.classList.remove('active-sidebar');\n\n        // Hide Overlay\n        updateOverlay(false);\n        // Uodate activeBreak\n        updateActiveBreak(!activeBreak);\n    }\n\n    // endBreak\n    const endBreak = async () => {\n        console.log('endBreak');\n        // Get year\n        let year = new Date().getFullYear();\n        // Get month\n        let month = new Date().getMonth();\n        // Get date\n        let date = new Date().getDate();\n        // Get time in milliseconds\n        let milliseconds = new Date().getTime();\n        // Break ID\n        let breakId = `break-end-${date}-${month}-${year}-${milliseconds}`;\n\n        // Break data object\n        let breakData = {};\n\n        // Create new object key\n        breakData[breakId] = { timeStamp: firebase.firestore.FieldValue.serverTimestamp() };\n\n        // Document ref\n        let docRef = await db.collection(\"users\").doc(user.uid);\n\n        // Fetching userData data\n        const getUserData = async () => docRef.get().then((doc) => {\n            // If userData exist\n            if (doc.exists) {\n                return doc.data();\n            }\n\n            return;\n        });\n\n        // Assign getUserData\n        let userData = await getUserData();\n\n        // Validation\n        if (userData) {\n            // Update user in firebase\n            db.collection(\"users\").doc(user.uid).update({\n                // Save a copy of the actual data\n                ...userData,\n                // Add into the breakEnd object\n                breakEnd: {\n                    // Save a copy of the actual data\n                    ...userData.breakEnd,\n                    // Add new field\n                    ...breakData\n                }\n            });\n        }\n\n        // Close Sidebar \n        let sidebar = document.getElementById(\"sidebar\");\n        sidebar.classList.remove('active-sidebar');\n\n        // Hide Overlay\n        updateOverlay(false);\n        // Uodate activeBreak\n        updateActiveBreak(!activeBreak);\n    }\n\n    // signOut\n    const signOut = async () => {\n        // Sign Out - Firebase\n        await auth.signOut().then(() => {\n            console.log('Sign-out successful.');\n            // Redirect\n            history.push('/');\n            // Firebase\n            db.collection('signOutLogs').add({\n                email,\n                signInTime: firebase.firestore.FieldValue.serverTimestamp()\n            });\n        }).catch((error) => {\n            console.log('An error happened.');\n            console.log(error);\n        });\n\n        return;\n    }\n\n    // User information\n    const email = user.email;\n    const name = user.displayName;\n    const photoURL = user.photoURL;\n\n    // customMargin\n    let customMargin;\n\n    // signContainer\n    let signContainer = document.getElementById('sign-container');\n\n    if (signContainer) {\n        customMargin = ((signContainer.offsetWidth - 120) / 2);\n    }\n\n    return (\n        <>\n            {/* Overlay */}\n            {overlay ?\n                <Overlay />\n                :\n                null\n            }\n\n            {/* Sidebar */}\n            <div id=\"sidebar\" className=\"sidebar-container\">\n                <div className=\"sidebar\">\n                    {/* <button className=\"closebtn\" onClick={() => closeSidebar()}><i className=\"far fa-times-circle\"></i></button> */}\n                    <a className=\"sidebar-btn\" href=\"https://sales-portal.utilityswitchboard.com/\" target=\"_blank\" rel=\"noopener\">Sales Portal</a>\n                    <IoMdCloseCircleOutline className={btnCloseAnimation ? \"closebtn animate__animated animate__slideOutRight\" : 'closebtn'} onClick={() => closeSidebar()} />\n\n                    {activeBreak ?\n                        (\n                            <button className=\"sidebar-btn\" onClick={() => startBreak()}>\n                                Start break\n                            </button>\n                        )\n                        :\n                        (\n                            <button className=\"sidebar-btn\" onClick={() => endBreak()}>\n                                End break\n                            </button>\n                        )\n                    }\n\n                    <button className=\"sidebar-btn\" onClick={() => signOut()}>\n                        Log Out\n                    </button>\n                </div>\n            </div>\n\n            {/* Navbar */}\n            <div className=\"navbar-container\">\n                <nav className=\"navbar\">\n                    <a href=\".\" className=\"navbar-logo\" style={{marginRight: customMargin}}>\n                        <img src=\"https://924601.smushcdn.com/2398792/wp-content/themes/twentytwentyone/assets/images/usb-logo-white.png?lossy=1&strip=1&webp=1\" alt=\"Logo\" width=\"120\" loading=\"lazy\" />\n                    </a>\n\n                    <div className=\"progress-bar-container\">\n                        <div id=\"progress-bar\" className=\"progress-bar\">\n                            <div className=\"percentage\" id=\"percentage\"></div>\n                        </div>\n                        <p>{step_text}</p>\n                    </div>\n\n                    <div className=\"sign-container\" id=\"sign-container\" >\n                        <div className=\"sign-content\" onClick={() => activeSidebar()}>\n                            {\n                                photoURL ?\n                                    (\n                                        <>\n                                            <div className=\"avatar-container\">\n                                                <img src={photoURL} alt=\"Avatar\" width=\"35\" style={{ borderRadius: \"50%\" }} loading=\"lazy\" />\n                                                <div className={activeBreak ? 'status-circle break' : 'status-circle'} id=\"status\"></div>\n                                            </div>\n                                        </>\n                                    )\n                                    :\n                                    (\n                                        <>\n                                            <div className=\"avatar-container\">\n                                                <FaRegUser className=\"user-icon\" />\n                                                <div className={activeBreak ? 'status-circle-icon break' : 'status-circle-icon'} id=\"status\"></div>\n                                            </div>\n                                        </>\n                                    )\n                            }\n                            <p className=\"sign\">Hi, {user !== undefined ? name ? name.split(' ').slice(0, 2).join(' ') : email.replace('@utilityswitchboard.com', '') : null}!</p>\n                            {/* <p className=\"sign\">Hi, {user.displayName}!</p> */}\n                        </div>\n                    </div>\n                </nav>\n            </div>\n        </>\n    )\n}\n\nexport default Navbar;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/Error/Error.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormPostCode/FormPostCode.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormMPN-MPRN/FormMpanMprn.jsx",["194","195","196","197","198"],"import React, { useState, useEffect } from \"react\";\nimport \"./FormMpanMprn.css\";\n// Firebase\nimport { db } from \"../../../firebase/firebase\";\nimport firebase from \"firebase/app\";\n// Images\nimport Search from '../../../assets/img/search.png';\n// Swal\nimport swal from '@sweetalert/with-react';\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { ImSad } from 'react-icons/im';\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\nimport { FaRegEdit } from \"react-icons/fa\";\n\n// Components\nimport FormScript from '../FormScript/FormScript';\nimport FormAssistant from '../FormAssistant/FormAssistant';\nimport Error from '../../Error/Error';\n\nfunction FormMpanMprn({ customerAddres, electricityInformation, gasInformation, customerInformation, useGas, fuel, progressBar, showScript, updateCustomerAddress, updateElectricityInformation, updateGasInformation, updateCustomerInformation, updateProgressBar, updateShowFormMpanMprn, updateShowFormSupply, updateShowFomrFuelType, updateShowOverlay }) {\n  /* STATES */\n  // Edit\n  const [editMPAN, updateEditMPAN] = useState(true);\n  const [editMPRN, updateEditMPRN] = useState(true);\n  // Search by MPAN\n  const [searchByMPAN, updateSearchByMPAN] = useState(false);\n  // Search by MPRN\n  const [serachByMPRN, updateSearchByMPRN] = useState(false);\n  // Error MPAN\n  const [error_mpan, updateError_mpan] = useState(false);\n  // Error MPRN\n  const [error_mprn, updateError_mprn] = useState(false);\n  // Button focus animation - MPAN\n  const [focusAnimationMpan, setFocusAnimationMpan] = useState(false);\n  // Button focus animation - MPRN\n  const [focusAnimationMprn, setFocusAnimationMprn] = useState(false);\n\n  /* FUNCTIONS */\n  // Scroll to top\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Variables\n  const mpan = customerAddres.mpan;\n  const mprn = customerAddres.mprn;\n  const supplier_mpid = electricityInformation.MPANDetails.supplier_mpid;\n  const current_supplier_id = gasInformation.dataGas.current_supplier_id;\n  const dual_active = customerInformation.fuel_description.dual_active;\n  const gas_only = customerInformation.fuel_description.gas_only;\n  const elec_only = customerInformation.fuel_description.elec_only;\n  const same_supplier = customerInformation.fuel_description.same_supplier;\n  const postcode_formatted = customerAddres.postcode.replace(/\\s/g, '').trim().toLowerCase();\n  const doornumber_formatted = customerAddres.doornumber.replace(/\\s/g, '').trim().toLowerCase();\n  const uid = `${postcode_formatted}-${doornumber_formatted}`;\n\n  // Function to check if the first request to the ECOES API comes with data\n  useEffect(() => {\n    if (supplier_mpid !== '') {\n      updateSearchByMPAN(false);\n    } else {\n      updateSearchByMPAN(true);\n    }\n  }, []);\n\n  // Function to check if the first request to the XOSERVE API comes with data\n  useEffect(() => {\n    if (current_supplier_id !== '') {\n      updateSearchByMPRN(false);\n    } else {\n      updateSearchByMPRN(true);\n    }\n  }, []);\n\n  // Function that runs every time the user writes to the input\n  const handleChange = (e) => {\n    // Update valus for MPAN and MPRN\n    updateCustomerAddress({\n      ...customerAddres,\n      [e.target.name]: e.target.value.replace(/[^\\w\\s]/gi, '').trim(),\n    });\n  };\n\n  // Go to Supply Information\n  const goToSupplyInformation = async (e) => {\n    e.preventDefault();\n\n    // Show Overlay\n    updateShowOverlay(true);\n\n    /**-- Swal alert-- */\n    const swal_es = () => {\n      swal({\n        closeOnClickOutside: false,\n        buttons: {\n          cancel: {\n            text: \"Go back\",\n            value: false,\n            visible: true\n          }\n        },\n        content: (\n          <div className=\"swal-text-custom\">\n            <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n              <ImSad />\n            </IconContext.Provider>\n            <h1>No results found for electricity supplier...</h1>\n          </div>\n        )\n      });\n    }\n\n    const swal_gs = () => {\n      swal({\n        closeOnClickOutside: false,\n        buttons: {\n          cancel: {\n            text: \"Go back\",\n            value: false,\n            visible: true\n          }\n        },\n        content: (\n          <div className=\"swal-text-custom\">\n            <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n              <ImSad />\n            </IconContext.Provider>\n            <h1>No results found for gas supplier...</h1>\n          </div>\n        )\n      });\n    }\n\n    const swal_es_gs = () => {\n      swal({\n        closeOnClickOutside: false,\n        buttons: {\n          cancel: {\n            text: \"Go back\",\n            value: false,\n            visible: true\n          }\n        },\n        content: (\n          <div className=\"swal-text-custom\">\n            <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n              <ImSad />\n            </IconContext.Provider>\n            <h1>No results found...</h1>\n          </div>\n        )\n      });\n    }\n\n    let dispatch_swal_es;\n    let dispatch_swal_gs;\n\n    // Conditional Swal ES\n    const swal_checker_es = (swal_es_dispatch) => {\n      dispatch_swal_es = swal_es_dispatch;\n      return swal_es_dispatch;\n    }\n\n    // Conditional Swal GS\n    const swal_checker_gs = (swal_gs_dispatch) => {\n      dispatch_swal_gs = swal_gs_dispatch;\n      return swal_gs_dispatch\n    }\n\n    // ecoes_api\n    const ecoes_api = process.env.REACT_APP_ECOES_API;\n    // xoserve_api\n    const xoserve_api = process.env.REACT_APP_XOSERVE_API;\n\n    // Fetch ECOES API\n    if (searchByMPAN) {\n      if (mpan !== '') {\n        // MPAN Validation - MinLength = 13 digits\n        if (mpan.length < 13) {\n          if ((mpan.length < 13) && ((mprn.length < 10))) {\n            // Show error MPAN\n            updateError_mpan(true);\n            // Show error MPRN\n            updateError_mprn(true);\n\n            if (mprn.length === 0) {\n              // Hidde error MPRN\n              updateError_mprn(false);\n            }\n          } else {\n            // Show error MPAN\n            updateError_mpan(true);\n          }\n\n          // Hidde Overlay\n          updateShowOverlay(false);\n          return;\n        }\n\n        /**-- Response ECOES DETAILS by MPAN--  */\n        // Body parameters\n        const detailsParameters = {\n          \"Authentication\": {\n            \"Key\": ecoes_api\n          },\n          \"ParameterSets\": [{\n            \"Parameters\": [{\n              \"Key\": \"MPAN\",\n              \"Value\": mpan\n            }]\n          }]\n        }\n\n        const responseECOESDetails = await fetch('https://cors-anywhere.herokuapp.com/https://www.ecoes.co.uk/WebServices/Trial/ECOESAPI.svc/RESTful/JSON/GetTechnicalDetailsByMpan', {\n          method: 'POST',\n          body: JSON.stringify(detailsParameters),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n        }).then(function (response) {\n          if (response.status === 200) {\n            return response.json();\n          } else {\n            return console.error('An error ocurred fetching to GetTechnicalDetailsByMpan');\n          }\n        }).then(function (response) {\n          if (response !== undefined) {\n            // Error response\n            const error_response = response.Results[0].Errors.length;\n            // Check values and return \n            if (error_response >= 1) {\n              // Electricity Infomartion values\n              const MPANDetails = {\n                mpan_core: '',\n                meter_serial_number: '',\n                meter_type: '',\n                supplier_mpid: ''\n              }\n\n              // Update the state\n              updateElectricityInformation({ ...electricityInformation, MPANDetails });\n            } else {\n              // Extract the values from the response\n              const meter_serial_number = response.Results[0].UtilityMatches[0].Meters[0].MeterDetails[1].Value;\n              const meter_type = response.Results[0].UtilityMatches[0].Meters[0].MeterDetails[2].Value;\n              const supplier_mpid = response.Results[0].UtilityMatches[0].UtilityDetails[11].Value;\n              // Assign values\n              const MPANDetails = {\n                mpan_core: mpan,\n                meter_serial_number,\n                meter_type,\n                supplier_mpid\n              }\n              // Update the state\n              updateElectricityInformation({ ...electricityInformation, MPANDetails });\n            }\n          } else {\n            // Show alert\n            swal_checker_es(true);\n\n            // Electricity Infomartion values\n            const MPANDetails = {\n              mpan_core: '',\n              meter_serial_number: '',\n              meter_type: '',\n              supplier_mpid: ''\n            }\n            // Update the state\n            return updateElectricityInformation({ ...electricityInformation, MPANDetails });\n          }\n        }).catch(error => {\n          console.error(error);\n          // Show alert\n          swal_checker_es(true);\n        });\n      }\n    }\n\n    // Fetch XOSERVE API\n    if (serachByMPRN) {\n      if (mprn !== '') {\n        // MPRN Validation - MinLength = 10 digits\n        if (mprn.length < 10) {\n          if ((mprn.length < 10) && ((mpan.length < 13))) {\n            // Show error MPRN\n            updateError_mprn(true);\n            // Show error MPAN\n            updateError_mpan(true);\n\n            if (mpan.length === 0) {\n              // Hidde error MPAN\n              updateError_mpan(false);\n            }\n          } else {\n            // Show error MPRN\n            updateError_mprn(true);\n          }\n\n          // Hidde Overlay\n          updateShowOverlay(false);\n          return;\n        }\n\n        /** -- XOSERVE API -- */\n        const responseXOSERVE = await fetch(`https://cors-anywhere.herokuapp.com/https://xoserve.apimanagement.hana.ondemand.com:443/v1/switchdataTBB.svc?&mprn='${mprn}'`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'APIKey': xoserve_api\n          },\n        }).then(function (response) {\n          if (response.status === 200) {\n            return response.json();\n          } else {\n            updateGasInformation({\n              ...gasInformation,\n              dataGas: {\n                mprn: '',\n                meter_mechanism_code: '',\n                current_supplier_id: '',\n                gas_transport_id: ''\n              }\n            });\n            return console.error('An error ocurred fetching to Xoserve switchdataTBB');\n          }\n        }).then(function (response) {\n          // console.log(response);\n          // If exist information about the property \n          const success = response.hasOwnProperty('mprn');\n\n          if (success === true) {\n            const dataGas = response.mprn[0];\n            const mprn_core = response.mprn[0].mprn;\n            updateGasInformation({ ...gasInformation, dataGas });\n            return mprn_core;\n          } else {\n            // Show alert\n            swal_checker_gs(true);\n            return updateGasInformation({\n              ...gasInformation,\n              dataGas: {\n                mprn: '',\n                meter_mechanism_code: '',\n                current_supplier_id: '',\n                gas_transport_id: ''\n              }\n            });\n          }\n        }).catch(function (error) {\n          // Show alert\n          swal_checker_gs(true);\n          return console.error('Catch an error fetching to Xoserve switchdataTBB:' + ' ' + error);\n        });\n      }\n    }\n\n    if ((dispatch_swal_es && dispatch_swal_gs) === true) {\n      swal_es_gs();\n    } else {\n      if (dispatch_swal_es === true) {\n        swal_es();\n      }\n\n      if (dispatch_swal_gs === true) {\n        swal_gs();\n      }\n    }\n    // Update progress bar\n    updateProgressBar({\n      ...progressBar,\n      step: 4\n    });\n    // Hidde MPAN/MPRN\n    updateShowFormMpanMprn(false);\n    // Show Overlay\n    updateShowOverlay(false);\n    // Show Form Supply\n    updateShowFormSupply(true);\n  }\n\n  const goBack = (e) => {\n    e.preventDefault();\n\n    // Update progress bar\n    updateProgressBar({\n      ...progressBar,\n      step: 2\n    });\n    // Update state\n    const copy_customerInformation = { ...customerInformation };\n    delete copy_customerInformation['fuel_description'];\n    updateCustomerInformation({\n      ...copy_customerInformation\n    });\n    // Hidde error \n    updateError_mpan(false);\n    updateError_mprn(false);\n    // Hidde MPAN/MPRN\n    updateShowFormMpanMprn(false);\n    // Show Fuetl Type\n    updateShowFomrFuelType(true);\n\n    /**-- Firebase --*/\n\n    // Update customer information in firebase\n    db.collection(\"customers\").doc(uid).set({\n      created: firebase.firestore.FieldValue.serverTimestamp(),\n      step: 2,\n      customerAddres: {\n        doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n        addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n        addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n        city: customerAddres.city ? customerAddres.city : '',\n        postcode: customerAddres.postcode ? customerAddres.postcode : '',\n        mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n        mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n      },\n      MPANDetails: {\n        meter_serial_number: electricityInformation.MPANDetails.meter_serial_number ? electricityInformation.MPANDetails.meter_serial_number : '',\n        meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n        mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n        supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : ''\n      },\n      dataGas: {\n        mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n        meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n        current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n        gas_transport_id: gasInformation.dataGas.gas_transport_id ? gasInformation.dataGas.gas_transport_id : ''\n      }\n    });\n  }\n\n  return (\n    <>\n      <section className=\"form-mpanmprn-section\">\n        <div className=\"form-mpanmprn-container\">\n          <div className=\"form-mpanmprn-content\">\n            <div className=\"form-mpanmprn\">\n              <div>\n                <h1>We need your {elec_only ? 'MPAN' : null} {gas_only ? 'MPRN' : null} {dual_active ? same_supplier ? \"MPAN\" : 'MPAN & MPRN' : null}</h1>\n\n                {/* Elec only */}\n                {elec_only ?\n                  (\n                    <>\n                      <p>Meter Point Administration Number (MPAN)</p>\n                      <div className=\"form-mpanmprn-input-container\">\n                        <input type=\"text\" className=\"form-mpanmprn-input\" name=\"mpan\" placeholder={mpan === '' ? 'Introduce MPAN' : ''} value={mpan} onChange={(e) => handleChange(e)} disabled={editMPAN} onPointerDown={() => editMPAN ? setFocusAnimationMpan(!focusAnimationMpan) : null} />\n                        <FaRegEdit className={focusAnimationMpan ? 'edit-search-icon animate__animated animate__headShake': 'edit-search-icon'} onClick={() => updateEditMPAN(!editMPAN)} />\n                        {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditMPAN(!editMPAN)}></i> */}\n                      </div>\n\n                      {error_mpan ? (\n                        <Error message={'Please, enter a valid MPAN number.'} />\n                      ) : null}\n                    </>\n                  )\n                  :\n                  null\n                }\n\n                {/* Gas only */}\n                {gas_only ?\n                  (\n                    <>\n                      <p>Meter Point Reference Number (MPRN)</p>\n                      <div className=\"form-mpanmprn-input-container\">\n                        <input type=\"text\" className=\"form-mpanmprn-input\" name=\"mprn\" placeholder={mprn === '' ? 'Introduce MPRN' : ''} value={mprn} onChange={(e) => handleChange(e)} disabled={editMPRN} onPointerDown={() => editMPRN ? setFocusAnimationMprn(!focusAnimationMprn) : null} />\n                        <FaRegEdit className={focusAnimationMprn ? 'edit-search-icon animate__animated animate__headShake': 'edit-search-icon'} onClick={() => updateEditMPRN(!editMPRN)} />\n                        {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditMPRN(!editMPRN)}></i> */}\n                      </div>\n\n                      {error_mprn ? (\n                        <Error message={'Please, enter a valid MPRN number.'} />\n                      ) : null}\n                    </>\n                  )\n                  :\n                  null\n                }\n\n                {/* Dual tariff */}\n                {dual_active ?\n                  // Same supplier\n                  same_supplier ?\n                    (\n                      <>\n                        <p>Meter Point Administration Number (MPAN)</p>\n                        <div className=\"form-mpanmprn-input-container\">\n                          <input type=\"text\" className=\"form-mpanmprn-input\" name=\"mpan\" placeholder={mpan === '' ? 'Introduce MPAN' : ''} value={mpan} onChange={(e) => handleChange(e)} disabled={editMPAN} onPointerDown={() => editMPAN ? setFocusAnimationMpan(!focusAnimationMpan) : null} />\n                          <FaRegEdit className={focusAnimationMpan ? 'edit-search-icon animate__animated animate__headShake': 'edit-search-icon'} onClick={() => updateEditMPAN(!editMPAN)} />\n                          {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditMPAN(!editMPAN)}></i> */}\n                        </div>\n\n                        {error_mpan ? (\n                          <Error message={'Please, enter a valid MPAN number.'} />\n                        ) : null}\n                      </>\n                    )\n                    :\n                    // Different suppliers\n                    (\n                      <>\n                        <p>Meter Point Administration Number (MPAN)</p>\n                        <div className=\"form-mpanmprn-input-container\">\n                          <input type=\"text\" className=\"form-mpanmprn-input\" name=\"mpan\" placeholder={mpan === '' ? 'Introduce MPAN' : ''} value={mpan} onChange={(e) => handleChange(e)} disabled={editMPAN} onPointerDown={() => editMPAN ? setFocusAnimationMpan(!focusAnimationMpan) : null} />\n                          <FaRegEdit className={focusAnimationMpan ? 'edit-search-icon animate__animated animate__headShake': 'edit-search-icon'} onClick={() => updateEditMPAN(!editMPAN)} />\n                          {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditMPAN(!editMPAN)}></i> */}\n                        </div>\n\n                        {error_mpan ? (\n                          <Error message={'Please, enter a valid MPAN number.'} />\n                        ) : null}\n\n                        <p>Meter Point Reference Number (MPRN)</p>\n                        <div className=\"form-mpanmprn-input-container\">\n                          <input type=\"text\" className=\"form-mpanmprn-input\" name=\"mprn\" placeholder={mprn === '' ? 'Introduce MPRN' : ''} value={mprn} onChange={(e) => handleChange(e)} disabled={editMPRN} onPointerDown={() => editMPRN ? setFocusAnimationMprn(!focusAnimationMprn) : null} />\n                          <FaRegEdit className={focusAnimationMprn ? 'edit-search-icon animate__animated animate__headShake': 'edit-search-icon'} onClick={() => updateEditMPRN(!editMPRN)} />\n                          {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditMPRN(!editMPRN)}></i> */}\n                        </div>\n\n                        {error_mprn ? (\n                          <Error message={'Please, enter a valid MPRN number.'} />\n                        ) : null}\n                      </>\n                    )\n                  :\n                  null\n                }\n\n              </div>\n              {/* Image */}\n              <div className=\"form-mpanmprn-img\">\n                <img src={Search} alt=\"\" width=\"80\" />\n              </div>\n            </div>\n\n            {/* Buttons */}\n            <div className=\"form-mpanmprn-btn-container\">\n              <button className=\"form-mpanmprn-btn btn-back\" onClick={(e) => goBack(e)}>\n                <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                  <IoMdArrowDropleft className=\"icon-back\" />\n                </IconContext.Provider>\n                Go back\n              </button>\n\n              <button data-cy=\"mpanmprn-continue\" className=\"form-mpanmprn-btn btn-next\" onClick={(e) => goToSupplyInformation(e)}>\n                Continue\n                <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                  <IoMdArrowDropright className=\"icon-next\" />\n                </IconContext.Provider>\n              </button>\n            </div>\n          </div>\n\n          {showScript ?\n            (\n              <div className=\"helper-mpanmprn\">\n                <div className=\"script-mpanmprn\">\n                  <FormScript step={4} />\n                </div>\n\n                <div className=\"assistant-mpanmprn-custom\">\n                  <FormAssistant tips={3} />\n                </div>\n              </div>\n            )\n            :\n            <div style={{ width: '100%' }}>\n              <div className=\"assistant-mpanmprn\">\n                <FormAssistant tips={3} />\n              </div>\n            </div>\n          }\n\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default FormMpanMprn;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormAddress/FormAddress.jsx",["199","200","201","202"],"import React, { useState, useEffect } from \"react\";\n// Styles\nimport \"./FormAddress.css\";\n// Firebase\nimport { db } from \"../../../firebase/firebase\";\nimport firebase from \"firebase/app\";\n// Swal\nimport swal from '@sweetalert/with-react';\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\nimport { ImProfile } from 'react-icons/im';\n\n// Hooks\nimport useAddress from \"../../../hooks/useAddress/useAddress\";\n\n// Components\nimport FormScript from '../FormScript/FormScript';\nimport Error from '../../Error/Error';\nimport FormAssistant from \"../FormAssistant/FormAssistant\";\n\nfunction FormAddress({ postcodeValue, gasInformation, electricityInformation, progressBar, showScript, customerStep, updateCustomerAddress, updateGasInformation, updateElectricityInformation, updateShowFormPostCode, updateShowFormAddres, updateShowOverlay, updateProgressBar, updateShowFomrFuelType }) {\n  /** STATES */\n  // Customer Address JSON\n  const [dataAddress, updateDataAddress] = useState({\n    doornumber: '',\n    addressline1: '',\n    addressline2: '',\n    city: '',\n    postcode: '',\n    mpan: '',\n    mprn: ''\n  });\n\n  // Customer Address List\n  const [addressList, updateAddressList] = useState([]);\n\n  // Hook useAddress\n  const [address, SelectAddress, updateAddress] = useAddress(\n    \"\", //Label\n    \"\", //Initial State\n    addressList //Array(response)\n  );\n\n  // Show Address type section\n  const [showTypeAddress, updateShowTypeAddres] = useState(true);\n\n  // Error State\n  const [error, updateError] = useState(false);\n\n  // Create customer in firebase\n  const [createCustomer, updateCreateCustomer] = useState(false);\n\n  // Button focus animation\n  const [focusAnimation, setFocusAnimation] = useState(false);\n\n  /** FUNCTIONS */\n\n  // Error smooth scroll\n  useEffect(() => {\n    if (error) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n      }\n\n      scroll_to()\n    }\n  }, [error]);\n\n  // Scroll to top\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // useEffect to fetch the data from API\n  useEffect(() => {\n\n    // const address_api = process.env.REACT_APP_ADDRESS_API;\n\n    // Fetching Data\n    const fetchAPI = async () => {\n      // const url = `https://ws.postcoder.com/pcw/${address_api}/address/uk/${postcodeValue.replace(/ /g, '').toLowerCase()}`;\n      const key = process.env.REACT_APP_ADDRESS_API;\n      const url = `https://api.getAddress.io/find/${postcodeValue.replace(/ /g, '').toLowerCase()}?api-key=${key}&expand=true`;\n      const response_postcode = await fetch(url, {\n        method: 'GET'\n      }).then(function (response) {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          swal({\n            button: \"Ok\",\n            icon: \"info\",\n            content: (\n              <div className=\"swal-text-custom\">\n                <h1>Address not found</h1>\n                <p>\n                  Please enter the address manually\n                </p>\n              </div>\n            )\n          });\n          return;\n        }\n      }).then(function (response) {\n        return response;\n      }).catch(function (error) {\n        console.error(`Catch an error fetching to postcoder ${error}`);\n        swal({\n          button: \"Ok\",\n          icon: \"info\",\n          content: (\n            <div className=\"swal-text-custom\">\n              <h1>Address not found</h1>\n              <p>\n                Please enter the address manually\n              </p>\n            </div>\n          )\n        });\n        return;\n      });\n\n      if (response_postcode !== undefined) {\n\n        const data = response_postcode.addresses;\n\n        // Adding an ID\n        data.forEach((item, i) => {\n          item.id = i + 1;\n        });\n\n        if (addressList === []) {\n          return;\n        } else {\n          updateAddressList(data);\n        }\n      } else {\n        return;\n      }\n    }\n    // Execute Fetch API\n    fetchAPI();\n  }, []);\n\n  // Address Data\n  if (address !== '') {\n    // Selected Value\n    const selectedValue = addressList[address - 1];\n\n    // Separated Values\n    var doornumberValue = selectedValue.formatted_address[0].replace(/[^0-9.]/g, '');\n    var addressline1Value = selectedValue.formatted_address.toString().replace(/,*,/g,',').replace(/,/g, \", \");\n    var addressline2Value = '';\n    var cityValue = selectedValue.town_or_city;\n    var mpanValue = '';\n    var mprnValue = '';\n\n    if (doornumberValue === undefined || doornumberValue === '') {\n      doornumberValue = \"N/A\";\n    } else {\n      doornumberValue = selectedValue.formatted_address[0].replace(/[^0-9.]/g, '');\n    }\n\n    if (addressline1Value === undefined || addressline1Value === '') {\n      addressline1Value = \"N/A\";\n    } else {\n      addressline1Value = selectedValue.formatted_address.toString().replace(/,*,/g,',').replace(/,/g, \", \");\n    }\n\n    if (addressline2Value === undefined || addressline2Value === '') {\n      addressline2Value = \"N/A\";\n    } else {\n      addressline2Value = \"\";\n    }\n\n    if (cityValue === undefined || cityValue === '') {\n      cityValue = \"N/A\";\n    } else {\n      cityValue = selectedValue.town_or_city;\n    }\n\n    if (mpanValue === undefined || mpanValue === '') {\n      mpanValue = '';\n    } else {\n      mpanValue = '';\n    }\n\n    if (mprnValue === undefined || mprnValue === '') {\n      mprnValue = '';\n    } else {\n      mprnValue = '';\n    }\n  }\n\n  const doornumber = doornumberValue;\n  const addressline1 = addressline1Value;\n  const addressline2 = addressline2Value;\n  const city = cityValue;\n  const postcode = postcodeValue;\n  const mpan = mpanValue;\n  const mprn = mprnValue;\n\n  // useEffect to add the data to the state\n  useEffect(() => {\n    updateDataAddress({\n      ...dataAddress,\n      doornumber: doornumber,\n      addressline1: addressline1,\n      addressline2: addressline2,\n      city: city,\n      postcode: postcode,\n      mpan: mpan,\n      mprn: mprn\n    });\n\n    updateError(false);\n  }, [address]);\n\n  // Function that runs every time the user writes to the input\n  const handleChange = (e) => {\n    updateDataAddress({\n      ...dataAddress,\n      [e.target.name]: e.target.value.replace(/[^\\w\\s]/gi, '').trim(),\n      mpan: '',\n      mprn: ''\n    });\n  };\n\n  const handleChangeTypeAddress = () => {\n    const door_typed = document.getElementById(\"door-number\").value;\n    const addres_line1_typed = document.getElementById(\"line1\").value;\n    const city_typed = document.getElementById(\"city\").value;\n\n    // Validation for Typeaddress\n    if ((door_typed !== '') && (addres_line1_typed !== '') && (city_typed !== '')) {\n      // Hidde message\n      updateError(false);\n    }\n  }\n\n  // Send Add address to CustomerData \n  const sendAddress = async (dataAddress) => {\n\n    const door_typed = document.getElementById(\"door-number\").value;\n    const addres_line1_typed = document.getElementById(\"line1\").value;\n    const city_typed = document.getElementById(\"city\").value;\n\n    // Validation for type address section\n    if (((door_typed === '') || (door_typed === undefined)) || ((addres_line1_typed === '') || (addres_line1_typed === undefined)) || ((city_typed === '') || (city_typed === undefined))) {\n      updateError(true);\n      return;\n    } else {\n      updateError(false);\n    }\n\n    // Show Overlay\n    updateShowOverlay(true);\n\n    // Values to validate\n    const doornumberValidate = dataAddress.doornumber.replace(/[^\\w\\s]/gi, '').trim();\n    const addressValidate = dataAddress.addressline1.replace(/[^\\w\\s]/gi, '').trim();\n    const cityValidate = dataAddress.city.replace(/[^\\w\\s]/gi, '').trim();\n\n    if (doornumberValidate === '' || doornumberValidate === undefined || addressValidate === '' || addressValidate === undefined || cityValidate === '' || cityValidate === undefined) {\n      // Validation failed\n      updateError(true);\n    } else {\n      /** -- ECOES API -- */\n\n      // ecoes_api\n      const ecoes_api = process.env.REACT_APP_ECOES_API;\n\n      // Body parameters\n      const postcodeParameters = {\n        \"Authentication\": {\n          \"Key\": ecoes_api\n        },\n        \"ParameterSets\": [{\n          \"Parameters\": [\n            {\n              \"Key\": \"Postcode\",\n              \"Value\": postcodeValue.replace(/[^\\w\\s]/gi, '').trim()\n            },\n            {\n              \"Key\": \"BuildingNumber\",\n              \"Value\": doornumberValidate\n            }\n          ]\n        }]\n      }\n\n      // Response ECOES MPAN\n      const responseECOESMPAN = await fetch('https://cors-anywhere.herokuapp.com/https://www.ecoes.co.uk/WebServices/Trial/ECOESAPI.svc/RESTful/JSON/SearchUtilityAddress', {\n        method: 'POST',\n        body: JSON.stringify(postcodeParameters),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      }).then(function (response) {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          return console.error('An error ocurred fetching to ECOES SearchUtilityAddress');\n        }\n      }).then(function (response) {\n        // Error response\n        const error_response = response.Results[0].Errors.length;\n\n        // Check values and return \n        if (error_response >= 1) {\n          const NA = 'NA';\n          return NA;\n        } else {\n          // Successful response\n          const successful_response = response.Results[0].UtilityAddressMatches[0].AddressDetails[0].Value;\n          return successful_response;\n        }\n      }).catch(function (error) {\n\n        return console.error(`Catch an error fetching to ECOES SearchUtilityAddress ${error}`);\n      });\n\n      // MPAN value\n      let mpan_core = '';\n\n      if (responseECOESMPAN !== \"NA\" && responseECOESMPAN !== undefined) {\n        mpan_core = responseECOESMPAN.replace(/[^\\w\\s]/gi, '').trim();\n      } else {\n        mpan_core = '';\n      }\n\n      //If we get a MPAN value call ECOES Details - Conditional\n      if (mpan_core !== '') {\n        /**-- Response ECOES DETAILS by MPAN--  */\n        // Body parameters\n        const detailsParameters = {\n          \"Authentication\": {\n            \"Key\": ecoes_api\n          },\n          \"ParameterSets\": [{\n            \"Parameters\": [{\n              \"Key\": \"MPAN\",\n              \"Value\": mpan_core\n            }]\n          }]\n        }\n\n        const responseECOESDetails = await fetch('https://cors-anywhere.herokuapp.com/https://www.ecoes.co.uk/WebServices/Trial/ECOESAPI.svc/RESTful/JSON/GetTechnicalDetailsByMpan', {\n          method: 'POST',\n          body: JSON.stringify(detailsParameters),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n        }).then(function (response) {\n          if (response.status === 200) {\n            return response.json();\n          } else {\n            return console.error('An error ocurred fetching to GetTechnicalDetailsByMpan');\n          }\n        }).then(function (response) {\n          if (response !== undefined) {\n            // Error response\n            const error_response = response.Results[0].Errors.length;\n            // Check values and return \n            if (error_response >= 1) {\n              // Electricity Infomartion values\n              const MPANDetails = {\n                mpan_core: '',\n                meter_serial_number: '',\n                meter_type: '',\n                supplier_mpid: ''\n              }\n\n              // Update the state\n              updateElectricityInformation({ ...electricityInformation, MPANDetails });\n            } else {\n              // Extract the values from the response\n              const meter_serial_number = response.Results[0].UtilityMatches[0].Meters[0].MeterDetails[1].Value;\n              const meter_type = response.Results[0].UtilityMatches[0].Meters[0].MeterDetails[2].Value;\n              const supplier_mpid = response.Results[0].UtilityMatches[0].UtilityDetails[11].Value;\n              // Assign values\n              const MPANDetails = {\n                mpan_core,\n                meter_serial_number,\n                meter_type,\n                supplier_mpid\n              }\n\n              // Update the state\n              updateElectricityInformation({ ...electricityInformation, MPANDetails });\n            }\n          } else {\n            // Electricity Infomartion values\n            const MPANDetails = {\n              mpan_core: '',\n              meter_serial_number: '',\n              meter_type: '',\n              supplier_mpid: ''\n            }\n            // Update the state\n            return updateElectricityInformation({ ...electricityInformation, MPANDetails });\n          }\n        });\n      } else {\n        // Electricity Infomartion values\n        const MPANDetails = {\n          mpan_core: '',\n          meter_serial_number: '',\n          meter_type: '',\n          supplier_mpid: ''\n        }\n        // Update the state\n        updateElectricityInformation({ ...electricityInformation, MPANDetails });\n      }\n\n      /**--Postcode structure */\n\n      // Postcode unformatted\n      let postcode_unformatted = postcode;\n      // Postcode without spaces\n      let postcode_unformatted_no_space = postcode_unformatted.replace(/ /g, '');\n      // Postcode formated\n      let postcode_formated = '';\n\n      // For a postcode structure AN-NAA\n      if (postcode_unformatted_no_space.length === 5) {\n        // First two chars \n        let first_two = postcode_unformatted_no_space.slice(0, 2);\n        // Last three chars\n        let last_three = postcode_unformatted_no_space.slice(2, 5);\n        // Formated Postcode\n        postcode_formated = first_two + ' ' + last_three;\n      }\n\n      // For a postcode structure ANN-NAA, AAN-NAA, ANA-NAA\n      if (postcode_unformatted_no_space.length === 6) {\n        // First three chars \n        let first_three = postcode_unformatted_no_space.slice(0, 3);\n        // Last three chars\n        let last_three = postcode_unformatted_no_space.slice(3, 6);\n        // Formated Postcode\n        postcode_formated = first_three + ' ' + last_three;\n      }\n\n      // For a postcode structure AANN-NAA, AANA-NAA\n      if (postcode_unformatted_no_space.length === 7) {\n        // First three chars \n        let first_four = postcode_unformatted_no_space.slice(0, 4);\n        // Last three chars\n        let last_three = postcode_unformatted_no_space.slice(4, 7);\n        // Formated Postcode\n        postcode_formated = first_four + ' ' + last_three;\n      }\n\n      /** -- XOSERVE API -- */\n\n      // xoserve_api\n      const xoserve_api = process.env.REACT_APP_XOSERVE_API;\n\n      const responseXOSERVE = await fetch(`https://cors-anywhere.herokuapp.com/https://xoserve.apimanagement.hana.ondemand.com:443/v1/switchdataTBB.svc?postcode='${postcode_formated}'&house_no='${doornumberValidate}'`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'APIKey': xoserve_api\n        },\n      }).then(function (response) {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          const mprn_core = '';\n          updateGasInformation({\n            ...gasInformation,\n            dataGas: {\n              mprn: '',\n              meter_mechanism_code: '',\n              current_supplier_id: '',\n              gas_transport_id: ''\n            }\n          });\n\n          console.error('An error ocurred fetching to Xoserve switchdataTBB');\n\n          return mprn_core;\n\n        }\n      }).then(function (response) {\n        // If exist information about the property \n        const success = response.hasOwnProperty('mprn');\n\n        if (success === true) {\n          const dataGas = response.mprn[0];\n          const mprn_core = response.mprn[0].mprn;\n          updateGasInformation({ ...gasInformation, dataGas });\n          return mprn_core;\n        } else {\n          const mprn_core = '';\n          updateGasInformation({\n            ...gasInformation,\n            dataGas: {\n              mprn: mprn_core,\n              meter_mechanism_code: '',\n              current_supplier_id: '',\n              gas_transport_id: ''\n            }\n          });\n          return mprn_core;\n        }\n      }).catch(function (error) {\n\n        return console.error(`Catch an error fetching to Xoserve switchdataTBB: ${error}`);\n      });\n\n      // MPRN value\n      let mprn_core = responseXOSERVE;\n\n      if (mprn_core === undefined) {\n        mprn_core = '';\n        updateGasInformation({\n          ...gasInformation,\n          dataGas: {\n            mprn: '',\n            meter_mechanism_code: '',\n            current_supplier_id: '',\n            gas_transport_id: ''\n          }\n        });\n      }\n\n      const postcode_formatted = dataAddress.postcode.replace(/\\s/g, '').trim().toLowerCase();\n      const doornumber_formatted = dataAddress.doornumber.replace(/\\s/g, '').trim().toLowerCase();\n\n      const uid = `${postcode_formatted}-${doornumber_formatted}`;\n\n      // Document ref\n      let docRef = await db.collection(\"customers\").doc(uid);\n\n      // // Fetching customer data\n      // const getCustomerData = async () => docRef.get().then((doc) => {\n      //   // If customer exist\n      //   if (doc.exists) {\n      //     return doc.data();\n      //   }\n      //   return;\n      // });\n\n      // Fetching customer data\n      const getCustomerData = async () => docRef.get().then((doc) => {\n        // If customer exist\n        if (doc.exists) {\n          return doc.data();\n        }\n        return;\n      }).catch((error) => {\n        console.log(error)\n        console.log('Fetching customer data failed');\n        return;\n      });\n\n      // Execute getCustomerData\n      let customer = await getCustomerData();\n\n      // Validate if customer exists\n      if (customer) {\n\n        // customerData\n        const customerData = customer;\n\n        // Customer Information\n        const { customerAddres, MPANDetails, dataGas } = customerData;\n\n        // Customer Address\n        const { doornumber, addressline1, addressline2, city, postcode } = customerAddres;\n\n        // MPANDetails\n        const { meter_type } = MPANDetails;\n\n        // dataGas\n        const { meter_mechanism_code } = dataGas;\n\n        // Electricity company name\n        const company_name_es = MPANDetails.company_name;\n        // MPAN\n        const mpan_fetched = MPANDetails.mpan_core;\n\n        // Gas company name\n        const company_name_gs = dataGas.company_name;\n        // MPRN\n        const mprn_fetched = dataGas.mprn;\n\n        // Customer Information - Sweet alert\n        swal({\n          className: 'swal-modal_custom',\n          buttons: {\n            cancel: \"Cancel\",\n            confirm: \"Use this information\"\n          },\n          content: (\n            <>\n              <div className=\"form-address-details-info-container\">\n                <div className=\"form-address-details-info\">\n\n                  <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                    <ImProfile />\n                  </IconContext.Provider>\n\n                  <h3 style={{ marginBottom: '0' }}>Data found for this customer</h3>\n\n                  <div className=\"form-address-details-container\">\n                    {/* Customer Address */}\n                    <div className=\"form-address-single-details\">\n                      <div style={{ display: 'flex', flexDirection: 'column', textAlign: 'start' }}>\n                        <p>Address:<span>{`${addressline1.toUpperCase()}${addressline2 === \"N/A\" ? '' : `, ${addressline2.toUpperCase()}`} `}</span></p>\n                        <p>Flat number:<span>{doornumber.toUpperCase()}</span></p>\n                        <p>City:<span>{city.toUpperCase()}</span></p>\n                        <p>Postcode:<span>{postcode.toUpperCase()}</span></p>\n                      </div>\n                    </div>\n\n                    {/* -------- ELECTRICITY INFORMATION -------- */}\n\n                    {/* Title - Elictricity Information */}\n                    {(!!company_name_es) || (!!meter_type) || (!!mpan_fetched) ?\n                      (<h3>Electricity Information</h3>)\n                      :\n                      null}\n\n                    {/* Address - Elictricity Information */}\n                    {!!company_name_es ?\n                      (\n                        <div className=\"form-address-single-details\">\n                          <p>Supplier: <span>{company_name_es}</span></p>\n                        </div>\n                      )\n                      :\n                      null\n                    }\n\n                    {/* Meter Type - Elictricity Information */}\n                    {!!meter_type ?\n                      (\n                        <div className=\"form-address-single-details\">\n                          <p>Meter Type: <span>{meter_type}</span></p>\n                        </div>\n                      )\n                      :\n                      null\n                    }\n\n                    {/* Meter Type - Elictricity Information */}\n                    {!!mpan_fetched ?\n                      (\n                        <div className=\"form-address-single-details\">\n                          <p>MPAN: <span>{mpan_fetched}</span></p>\n                        </div>\n                      )\n                      :\n                      null\n                    }\n\n                    {/* -------- GAS INFORMATION -------- */}\n\n                    {/* Title - Gas Information */}\n                    {(!!company_name_gs) || (!!meter_mechanism_code) || (!!mprn_fetched) ?\n                      (<h3>Gas Information</h3>)\n                      :\n                      null}\n\n                    {/* Address - Gas Information */}\n                    {!!company_name_gs ?\n                      (\n                        <div className=\"form-address-single-details\">\n                          <p>Supplier: <span>{company_name_gs}</span></p>\n                        </div>\n                      )\n                      :\n                      null\n                    }\n\n                    {/* Meter Type - Gas Information */}\n                    {!!meter_mechanism_code ?\n                      (\n                        <div className=\"form-address-single-details\">\n                          <p>Meter Type: <span>{meter_mechanism_code}</span></p>\n                        </div>\n                      )\n                      :\n                      null\n                    }\n\n                    {/* Meter Type - Gas Information */}\n                    {!!mprn_fetched ?\n                      (\n                        <div className=\"form-address-single-details\">\n                          <p>MPAN: <span>{mprn_fetched}</span></p>\n                        </div>\n                      )\n                      :\n                      null\n                    }\n\n                  </div>\n                </div>\n              </div>\n            </>\n          )\n        }).then((result) => {\n\n          if (result !== true) {\n\n            // postcode_formatted\n            const postcode_formatted = dataAddress.postcode.replace(/\\s/g, '').trim().toLowerCase();\n            // doornumber_formatted\n            const doornumber_formatted = dataAddress.doornumber.replace(/\\s/g, '').trim().toLowerCase();\n            // uid\n            const uid = `${postcode_formatted}-${doornumber_formatted}`;\n\n            // Update firebase customer\n            db.collection(\"customers\").doc(uid).set({\n              created: firebase.firestore.FieldValue.serverTimestamp(),\n              step: 1,\n              customerAddres: {\n                doornumber: dataAddress.doornumber ? dataAddress.doornumber : '',\n                addressline1: dataAddress.addressline1 ? dataAddress.addressline1 : '',\n                addressline2: dataAddress.addressline2 ? dataAddress.addressline2 : '',\n                city: dataAddress.city ? dataAddress.city : '',\n                postcode: dataAddress.postcode ? dataAddress.postcode : '',\n                mpan: mpan_core ? mpan_core : '',\n                mprn: mprn_core ? mprn_core : ''\n              },\n              MPANDetails: {\n                mpan_core: '',\n                meter_serial_number: '',\n                meter_type: '',\n                supplier_mpid: '',\n                company_name: ''\n              },\n              dataGas: {\n                mprn: '',\n                meter_mechanism_code: '',\n                current_supplier_id: '',\n                gas_transport_id: '',\n                company_name: ''\n              }\n            });\n\n            // Validation successful\n            updateError(false);\n            // Update data\n            updateCustomerAddress({\n              ...dataAddress,\n              mpan: mpan_core,\n              mprn: mprn_core\n            });\n            // Update progress bar\n            updateProgressBar({ ...progressBar, step: 2 });\n            // Hidde Form Address\n            updateShowFormAddres(false);\n            // Show Form Fuel type\n            updateShowFomrFuelType(true);\n            // Hidde Overlay\n            updateShowOverlay(false);\n            console.log('Data was sent successfully - From cancel alert');\n            console.log('Update customers in firebse if it is necessary');\n\n            return;\n          }\n\n          console.log('Data was sent successfully - Using DB');\n          return customerStep(customerData);\n\n        }).catch((error) => {\n\n          // Update firebase customer\n          db.collection(\"customers\").doc(uid).set({\n            created: firebase.firestore.FieldValue.serverTimestamp(),\n            step: 1,\n            customerAddres: {\n              doornumber: dataAddress.doornumber ? dataAddress.doornumber : '',\n              addressline1: dataAddress.addressline1 ? dataAddress.addressline1 : '',\n              addressline2: dataAddress.addressline2 ? dataAddress.addressline2 : '',\n              city: dataAddress.city ? dataAddress.city : '',\n              postcode: dataAddress.postcode ? dataAddress.postcode : '',\n              mpan: mpan_core ? mpan_core : '',\n              mprn: mprn_core ? mprn_core : ''\n            },\n            MPANDetails: {\n              mpan_core: '',\n              meter_serial_number: '',\n              meter_type: '',\n              supplier_mpid: '',\n              company_name: ''\n            },\n            dataGas: {\n              mprn: '',\n              meter_mechanism_code: '',\n              current_supplier_id: '',\n              gas_transport_id: '',\n              company_name: ''\n            }\n          });\n\n          console.log(error);\n\n          // Validation successful\n          updateError(false);\n          // Update data\n          updateCustomerAddress({\n            ...dataAddress,\n            mpan: mpan_core,\n            mprn: mprn_core\n          });\n          // Update progress bar\n          updateProgressBar({ ...progressBar, step: 2 });\n          // Hidde Form Address\n          updateShowFormAddres(false);\n          // Show Form Fuel type\n          updateShowFomrFuelType(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n          console.log('Data was sent successfully - From error');\n          console.log('Update customers in firebse if it is necessary');\n          return;\n        });\n\n        // End process\n        return;\n      }\n\n      // Create customer in firebase\n      updateCreateCustomer(true);\n\n      // Validation successful\n      updateError(false);\n      // Update data\n      updateCustomerAddress({\n        ...dataAddress,\n        mpan: mpan_core,\n        mprn: mprn_core\n      });\n      // Update progress bar\n      updateProgressBar({ ...progressBar, step: 2 });\n      // Hidde Form Address\n      updateShowFormAddres(false);\n      // Show Form Fuel type\n      updateShowFomrFuelType(true);\n      // Hidde Overlay\n      updateShowOverlay(false);\n      console.log('Data was sent successfully - No user found');\n      console.log('Create a new customer in firebase');\n\n      // End process\n      return;\n    }\n  }\n\n  /** --  Listener to create a customer in firebase -- */\n  useEffect(() => {\n    (async () => {\n      // createCustomer\n      if (createCustomer) {\n        // postcode_formatted\n        const postcode_formatted = dataAddress.postcode.replace(/\\s/g, '').trim().toLowerCase();\n        // doornumber_formatted\n        const doornumber_formatted = dataAddress.doornumber.replace(/\\s/g, '').trim().toLowerCase();\n        // uid\n        const uid = `${postcode_formatted}-${doornumber_formatted}`;\n\n        // Firebase\n        await db.collection(\"customers\").doc(uid).set({\n          created: firebase.firestore.FieldValue.serverTimestamp(),\n          step: 1,\n          customerAddres: {\n            doornumber: dataAddress.doornumber ? dataAddress.doornumber : '',\n            addressline1: dataAddress.addressline1 ? dataAddress.addressline1 : '',\n            addressline2: dataAddress.addressline2 ? dataAddress.addressline2 : '',\n            city: dataAddress.city ? dataAddress.city : '',\n            postcode: dataAddress.postcode ? dataAddress.postcode : '',\n            mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n          },\n          MPANDetails: {\n            meter_serial_number: electricityInformation.MPANDetails.meter_serial_number ? electricityInformation.MPANDetails.meter_serial_number : '',\n            meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n            mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : ''\n          },\n          dataGas: {\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n            meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n            current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n            gas_transport_id: gasInformation.dataGas.gas_transport_id ? gasInformation.dataGas.gas_transport_id : ''\n          }\n        });\n      }\n    })();\n\n  }, [createCustomer]);\n\n  // Go back to postcode\n  const goToPostcode = (e) => {\n    e.preventDefault();\n    // Hidde Form Address\n    updateShowFormAddres(false);\n    // Show Postcode\n    updateShowFormPostCode(true);\n    // Update progress bar\n    updateProgressBar({ ...progressBar, step: 0 });\n  };\n\n  // Address is not listed\n  const type_address = (e) => {\n    e.preventDefault();\n    // Update data address \n    updateDataAddress({\n      ...dataAddress,\n      doornumber: '',\n      addressline1: '',\n      addressline2: '',\n      city: '',\n      // postcode: '',\n      mpan: '',\n      mprn: ''\n    });\n    // Cleaning states\n    updateElectricityInformation({});\n    updateGasInformation({});\n    updateAddress('');\n    updateShowTypeAddres(false);\n    updateError(false);\n\n    // Reset form\n    let reset_doornumber = document.getElementById('door-number');\n    let reset_line1 = document.getElementById('line1');\n    let reset_line2 = document.getElementById('line2');\n    let reset_city = document.getElementById('city');\n    if ((reset_doornumber !== null) && (reset_line1 !== null) && (reset_line2 !== null) && (reset_city !== null)) {\n      reset_doornumber.value = '';\n      reset_line1.value = '';\n      reset_line2.value = '';\n      reset_city.value = '';\n    }\n  }\n\n  // HandleChangeSelect\n  const handleChangeSelect = (e) => {\n    e.preventDefault();\n    // Update states\n    updateShowTypeAddres(true);\n    updateDataAddress({\n      ...dataAddress,\n      doornumber: '',\n      addressline1: '',\n      addressline2: '',\n      city: '',\n      // postcode: '',\n      mpan: '',\n      mprn: ''\n    });\n  }\n\n  return (\n    <>\n      {showTypeAddress ?\n        address === \"\" ? (\n          <section className=\"form-address-section\">\n            <div className=\"form-address-container\">\n              <div className=\"form-address-content\">\n                <div className=\"form-address\">\n                  <h1>Select your addres from the below</h1>\n                  <p>Having the correct address is key to ensuring we select the correct MPAN / MRPN for the customer's address. Id the customer's address is not present in the list below, we must enter it manually and request the customers MPAN / MPRN to enable successful switch.</p>\n                </div>\n\n                {/* Address */}\n                <div>\n                  <SelectAddress />\n                </div>\n\n                <div className='form-address-manually-btn'>\n                  <button data-cy=\"addr-empty\" onClick={(e) => type_address(e)}>My address isn't listed</button>\n                </div>\n\n                {/* Error */}\n                {error === true ? <Error message={'Please enter an address'} /> : null}\n\n                {/* Buttons */}\n                <div className=\"form-address-btn-container\">\n                  <button className=\"form-address-btn btn-back\" onClick={goToPostcode}>\n                    <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                      <IoMdArrowDropleft className=\"icon-back\" />\n                    </IconContext.Provider>\n                    Go back\n                  </button>\n\n                  <button data-cy=\"addr-noselected\" className=\"form-address-btn btn-next\" onClick={() => address === '' ? updateError(true) : null}>\n                    Continue\n\n                    <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                      <IoMdArrowDropright className=\"icon-next\" />\n                    </IconContext.Provider>\n                  </button>\n                </div>\n              </div>\n\n              {showScript ?\n                (\n                  <div className=\"helper-address\">\n                    <div className=\"script-address\">\n                      <FormScript step={2} />\n                    </div>\n\n                    <div className=\"assistant-address-custom\">\n                      <FormAssistant tips={1} />\n                    </div>\n                  </div>\n                )\n                :\n                <div style={{ width: '100%' }}>\n                  <div className=\"assistant-address\">\n                    <FormAssistant tips={1} />\n                  </div>\n                </div>\n              }\n\n            </div>\n          </section>\n        ) : (\n          <section className=\"form-address-section\">\n            <div className=\"form-address-container\">\n              <div className=\"form-address-content\">\n                <div className=\"form-address\">\n                  <h1>Select your addres from the below</h1>\n                  <p>Having the correct address is key to ensuring we select the correct MPAN / MRPN for the customer's address. Id the customer's address is not present in the list below, we must enter it manually and request the customers MPAN / MPRN to enable successful switch.</p>\n                </div>\n\n                {/* Address */}\n                <div>\n                  <SelectAddress />\n                </div>\n\n                <div className=\"form-address-manually-btn\">\n                  <button onClick={(e) => type_address(e)} className={focusAnimation ? 'animate__animated animate__headShake' : ''}>My address isn't listed</button>\n                </div>\n\n                {/* Inputs */}\n                <form className=\"form-address-input-container\">\n                  <div className=\"form-address-input-content\">\n                    <h2>Address Information</h2>\n\n                    {/* Error */}\n                    {error === true ? <Error message={'Please enter an address'} /> : null}\n\n                    <div className=\"form-address-input\">\n                      <label>Door number</label>\n                      <div onClick={() => setFocusAnimation(!focusAnimation)}>\n                        <input\n                          id=\"door-number\"\n                          name=\"doornumber\"\n                          type=\"text\"\n                          value={dataAddress.doornumber || ''}\n                          disabled={true}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"form-address-input\" style={{position: 'relative'}}>\n                      <label>Address Line 1</label>\n                      <div onClick={() => setFocusAnimation(!focusAnimation)}>\n                        <input\n                          id=\"line1\"\n                          name=\"addressline1\"\n                          type=\"text\"\n                          value={dataAddress.addressline1 || ''}\n                          disabled={true}\n                        />\n                      </div>\n                      <div className=\"form-address-tooltip\">{dataAddress.addressline1}</div>\n                    </div>\n\n                    <div className=\"form-address-input\">\n                      <label>Address line 2 (optional)</label>\n                      <div onClick={() => setFocusAnimation(!focusAnimation)}>\n                        <input\n                          id=\"line2\"\n                          name=\"addressline2\"\n                          type=\"text\"\n                          value={dataAddress.addressline2 || ''}\n                          disabled={true}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"form-address-input\">\n                      <label>City</label>\n                      <div onClick={() => setFocusAnimation(!focusAnimation)}>\n                        <input\n                          id=\"city\"\n                          name=\"city\"\n                          type=\"text\"\n                          value={dataAddress.city || ''}\n                          disabled={true}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"form-address-input\">\n                      <label>Postcode</label>\n                      <div onClick={() => setFocusAnimation(!focusAnimation)}>\n                        <input\n                          id=\"postcode\"\n                          name=\"postcode\"\n                          type=\"text\"\n                          value={dataAddress.postcode || ''}\n                          disabled={true}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </form>\n\n                {/* Buttons */}\n                <div className=\"form-address-btn-container\">\n                  <button className=\"form-address-btn btn-back\" onClick={goToPostcode}>\n                    <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                      <IoMdArrowDropleft className=\"icon-back\" />\n                    </IconContext.Provider>\n                    Go back\n                  </button>\n\n                  <button className=\"form-address-btn btn-next\" onClick={(e) => e.preventDefault(sendAddress(dataAddress))}>\n                    Continue\n\n                    <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                      <IoMdArrowDropright className=\"icon-next\" />\n                    </IconContext.Provider>\n                  </button>\n                </div>\n              </div>\n\n              {showScript ?\n                (\n                  <div className=\"helper-address\">\n                    <div className=\"script-address\">\n                      <FormScript step={2} />\n                    </div>\n\n                    <div className=\"assistant-address-custom\">\n                      <FormAssistant tips={1} />\n                    </div>\n                  </div>\n                )\n                :\n                <div style={{ width: '100%' }}>\n                  <div className=\"assistant-address\">\n                    <FormAssistant tips={1} />\n                  </div>\n                </div>\n              }\n\n            </div>\n          </section>\n        )\n        :\n        (\n          <section className=\"form-address-section\">\n            <div className=\"form-address-container\">\n              <div className=\"form-address-content\">\n                <div className=\"form-address\">\n                  <h1>Select your addres from the below</h1>\n                  <p>Having the correct address is key to ensuring we select the correct MPAN / MRPN for the customer's address. Id the customer's address is not present in the list below, we must enter it manually and request the customers MPAN / MPRN to enable successful switch.</p>\n                </div>\n\n                {/* Address */}\n                <div onChange={(e) => handleChangeSelect(e)}>\n                  <SelectAddress />\n                </div>\n\n                <div className='form-address-manually-btn'>\n                  <button onClick={(e) => type_address(e)}>My address isn't listed</button>\n                </div>\n\n                {/* Inputs */}\n                <form className=\"form-address-input-container\" onChange={() => handleChangeTypeAddress()}>\n                  <div className=\"form-address-input-content\">\n                    <h2>Type address manually</h2>\n\n                    {/* Error */}\n                    {error === true ? <Error message={'Please enter an address'} /> : null}\n\n                    <div className=\"form-address-input\">\n                      <label>Door number</label>\n                      <input\n                        id=\"door-number\"\n                        type=\"text\"\n                        value={dataAddress.doornumber || ''}\n                        onChange={(e) => handleChange(e)}\n                        name=\"doornumber\"\n                        data-cy=\"door-input\"\n                      />\n                    </div>\n\n                    <div className=\"form-address-input\" style={{position: 'relative'}}>\n                      <label>Address Line 1</label>\n                      <input\n                        id=\"line1\"\n                        type=\"text\"\n                        value={dataAddress.addressline1 || ''}\n                        onChange={(e) => handleChange(e)}\n                        name=\"addressline1\"\n                        data-cy=\"addr1-input\"\n                      />\n                    </div>\n\n                    <div className=\"form-address-input\">\n                      <label>Address line 2 (optional)</label>\n                      <input\n                        id=\"line2\"\n                        type=\"text\"\n                        value={dataAddress.addressline2 || ''}\n                        onChange={(e) => handleChange(e)}\n                        name=\"addressline2\"\n                        data-cy=\"addr2-input\"\n                      />\n                    </div>\n\n                    <div className=\"form-address-input\">\n                      <label>City</label>\n                      <input\n                        id=\"city\"\n                        type=\"text\"\n                        value={dataAddress.city || ''}\n                        onChange={(e) => handleChange(e)}\n                        name=\"city\"\n                        data-cy=\"city-input\"\n                      />\n                    </div>\n\n                    <div className=\"form-address-input\">\n                      <label>Postcode</label>\n                      <input\n                        id=\"postcode\"\n                        type=\"text\"\n                        value={postcodeValue}\n                        onChange={(e) => handleChange(e)}\n                        name=\"postcode\"\n                        disabled\n                      />\n                    </div>\n\n                  </div>\n                </form>\n\n                {/* Buttons */}\n                <div className=\"form-address-btn-container\">\n                  <button className=\"form-address-btn btn-back\" onClick={goToPostcode}>\n                    <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                      <IoMdArrowDropleft className=\"icon-back\" />\n                    </IconContext.Provider>\n                    Go back\n                  </button>\n\n                  <button data-cy=\"addrtyped-continue\" className=\"form-address-btn btn-next\" onClick={(e) => e.preventDefault(sendAddress(dataAddress))}>\n                    Continue\n\n                    <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                      <IoMdArrowDropright className=\"icon-next\" />\n                    </IconContext.Provider>\n                  </button>\n                </div>\n              </div>\n\n              {showScript ?\n                (\n                  <div className=\"helper-address\">\n                    <div className=\"script-address\">\n                      <FormScript step={2} />\n                    </div>\n\n                    <div className=\"assistant-address-custom\">\n                      <FormAssistant tips={1} />\n                    </div>\n                  </div>\n                )\n                :\n                <div style={{ width: '100%' }}>\n                  <div className=\"assistant-address\">\n                    <FormAssistant tips={1} />\n                  </div>\n                </div>\n              }\n\n            </div>\n          </section>\n        )}\n    </>\n  );\n}\n\nexport default FormAddress;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormFuelType/FormFuelType.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormTariffs/FormTariffs.jsx",["203","204","205","206"],"import React, { useState, useEffect, Fragment } from \"react\";\n// Data tariff ES\nimport data_electricity_tariffs from '../../../utilities/data_tariffs/data_tariffs_es/data_electricity_tariffs';\n// Data tariff GS\nimport data_gas_tariffs from '../../../utilities/data_tariffs/data_tariff_gs/data_gas_tariffs';\n// Data tariff dual\nimport data_dual_tariffs from '../../../utilities/data_tariffs/data_tariff_dual/data_dual_tariffs';\n// Components\nimport FormScript from '../FormScript/FormScript';\nimport FormAssistant from \"../FormAssistant/FormAssistant\";\nimport Error from '../../Error/Error';\n// Swal\nimport swal from '@sweetalert/with-react';\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\nimport { ImSad } from 'react-icons/im';\nimport { FaRegHandPointer, FaSearch } from 'react-icons/fa';\n// CSS\nimport \"./FormTariffs.css\";\n\nconst FormTariffs = ({ customerInformation, showScript, progressBar, updateShowE7, updateShowFormTariffs, updateShowOverlay, updateCustomerInformation, updateShowFormUsageKWH, updateShowFormUsageGAS, updateProgressBar }) => {\n  /** STATES */\n  const [select_elec_only, update_select_elec_only] = useState(false);\n  const [select_gas_only, update_select_gas_only] = useState(false);\n  const [select_dual_only, update_select_dual_only] = useState(false);\n  // Error\n  const [error, updateError] = useState(false);\n\n  /** FUNCTIONS */\n\n  // Variables\n  const elec_data = data_electricity_tariffs.tariffs;\n  const gas_data = data_gas_tariffs.tariffs;\n  const dual_data = data_dual_tariffs.tariffs;\n\n  // Function to sort the JSON by property\n  const sortByProperty = (property) => {\n    return function (a, b) {\n      if (a[property] < b[property])\n        return 1;\n      else if (a[property] > b[property])\n        return -1;\n\n      return 0;\n    }\n  }\n\n  // Error smooth scroll\n  useEffect(() => {\n    if (error) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n      }\n\n      scroll_to()\n    }\n  }, [error]);\n\n  // Scroll to top\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Variables\n  const elec_only = customerInformation.fuel_description.elec_only;\n  const gas_only = customerInformation.fuel_description.gas_only;\n  const same_supplier = customerInformation.fuel_description.same_supplier;\n  const dual_active = customerInformation.fuel_description.dual_active;\n  // Electricity tariff information\n  const elec_tariffs = data_electricity_tariffs.tariffs;\n  // Gas tarriff information\n  const gas_tariffs = data_gas_tariffs.tariffs;\n  // Dual tariff information\n  const dual_tariffs = data_dual_tariffs.tariffs;\n\n  // Effect to hide Overlay\n  useEffect(() => {\n    // Update Overlay\n    updateShowOverlay(false);\n  }, []);\n\n  // Supplier code for ES\n  const supplier_code_es = customerInformation.supplierInformation.electricity_supplier.supplier_mpid;\n  // Supplier code for ES\n  const supplier_code_gs = customerInformation.supplierInformation.gas_supplier.current_supplier_id;\n  // Variables\n  let supplier_id_es;\n  let supplier_id_gs;\n  let supplier_id_dual;\n\n  // Filter tariffs by property (supplier code)\n  const filter_by_property = (data, property) => {\n    const filter_by_supplier_code = data.filter(obj => {\n      return obj.supplier_code === property;\n    });\n\n    return filter_by_supplier_code;\n  }\n\n  /**-- Assigning sorted data */\n  // Sorted data\n  let sorted_data;\n  let sorted_data_elec;\n  let sorted_data_gas;\n\n  if (elec_only) {\n    // Sorted data\n    sorted_data = elec_data.sort(sortByProperty(\"unit_rate\"));\n  }\n\n  if (gas_only) {\n    // Sorted data\n    sorted_data = gas_data.sort(sortByProperty(\"unit_rate\"));\n  }\n\n  if (dual_active) {\n    if (same_supplier) {\n      // Sorted data\n      sorted_data = dual_data.sort(sortByProperty(\"unit_rate\"));\n    } else {\n      // Sorted data\n      sorted_data = elec_data.sort(sortByProperty(\"unit_rate\"));\n\n      sorted_data_elec = elec_data.sort(sortByProperty(\"unit_rate\"));\n      sorted_data_gas = gas_data.sort(sortByProperty(\"unit_rate\"));\n    }\n  }\n\n  // Filter tariffs by property (svt)\n  const filter_by_svt = (data, property) => {\n    const filtered = data.filter(obj => {\n      return obj.svt === property;\n    });\n\n    return filtered;\n  }\n\n  // Expensier tariff\n  const expensierTariff = () => {\n    const expensier_svt = filter_by_svt(sorted_data, true)[0];\n\n    return (\n      <div className=\"form-tariff-rb-content\" key={expensier_svt.tariff_id} onClick={() => update_select_elec_only(false)}>\n        <label className=\"form-tariff-rb\" htmlFor={expensier_svt.tariff_id}>\n          <p>Other</p>\n          <input type=\"radio\" id={expensier_svt.tariff_id} name=\"tariff\" defaultValue={expensier_svt.tariff_name} defaultChecked />\n        </label>\n      </div>\n    );\n  }\n\n  // Expensier tariff\n  const expensier_tariff = expensierTariff();\n\n  /** ---- */\n\n  // Expensier tariff elec\n  const expensierTariffElec = () => {\n    const expensier_svt_elec = filter_by_svt(sorted_data_elec, true)[0];\n\n    return (\n      <div className=\"form-tariff-rb-content\" key={expensier_svt_elec.tariff_id} onClick={() => update_select_elec_only(false)}>\n        <label className=\"form-tariff-rb\" htmlFor={expensier_svt_elec.tariff_id}>\n          <p>Other</p>\n          <input type=\"radio\" id={expensier_svt_elec.tariff_id} name=\"tariff\" defaultValue={expensier_svt_elec.tariff_name} defaultChecked />\n        </label>\n      </div>\n    );\n  }\n\n  // Exprensiert tariff elec - Apply just when dual_active === true and same_supplier === false\n  let expensier_tariff_elec;\n  if((dual_active) && (same_supplier === false)) {\n    expensier_tariff_elec = expensierTariffElec();\n  }\n\n  /** ---- */\n\n  // Expensier tariff gas\n  const expensierTariffGas = () => {\n    const expensier_svt_gas = filter_by_svt(sorted_data_gas, true)[0];\n\n    return (\n      <div className=\"form-tariff-rb-content\" key={expensier_svt_gas.tariff_id} onClick={() => update_select_elec_only(false)}>\n        <label className=\"form-tariff-rb\" htmlFor={expensier_svt_gas.tariff_id}>\n          <p>Other</p>\n          <input type=\"radio\" id={expensier_svt_gas.tariff_id} name=\"tariff\" defaultValue={expensier_svt_gas.tariff_name} defaultChecked />\n        </label>\n      </div>\n    );\n  }\n\n  // Exprensiert tariff gas - Apply just when dual_active === true and same_supplier === false\n  let expensier_tariff_gas;\n  if((dual_active) && (same_supplier === false)) {\n    expensier_tariff_gas = expensierTariffGas();\n  }\n\n  // Update the state when (supplier_code_es === 'IDK') or (supplier_code_gs === 'IDK')\n  useEffect(() => {\n\n    const expensier_svt = filter_by_svt(sorted_data, true)[0];\n\n    // Elec Only\n    if (supplier_code_es === 'IDK') {\n      if (elec_only) {\n        // Update Customer Information\n        updateCustomerInformation({\n          ...customerInformation,\n          tariff_description: {\n            elec_tariff: expensier_svt\n          }\n        });\n      }\n    }\n\n    // Gas Only\n    if (supplier_code_gs === 'IDK') {\n      if (gas_only) {\n        // Update Customer Information\n        updateCustomerInformation({\n          ...customerInformation,\n          tariff_description: {\n            gas_tariff: expensier_svt\n          }\n        });\n      }\n    }\n\n    if (dual_active) {\n      if (same_supplier === false) {\n        if ((supplier_code_es === 'IDK') && (supplier_code_gs != 'IDK')) {\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description_elec: {\n              elec_tariff: expensier_svt\n            }\n          });\n        }\n\n        if ((supplier_code_gs === 'IDK') && (supplier_code_es != 'IDK')) {\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description_gas: {\n              gas_tariff: expensier_svt\n            }\n          });\n        }\n\n        if ((supplier_code_gs === 'IDK') && (supplier_code_es === 'IDK')) {\n          const sorted_elec = elec_data.sort(sortByProperty(\"unit_rate\"));\n          const sorted_gas = gas_data.sort(sortByProperty(\"unit_rate\"));\n\n          const expensier_svt_elect = filter_by_svt(sorted_elec, true)[0];\n          const expensier_svt_gas = filter_by_svt(sorted_gas, true)[0];\n\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description_elec: {\n              elec_tariff: expensier_svt_elect\n            },\n            tariff_description_gas: {\n              gas_tariff: expensier_svt_gas\n            }\n          });\n        }\n\n        return;\n      } else {\n        if (supplier_code_es === 'IDK') {\n          // Update Customer Information\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description: expensier_svt\n          });\n        }\n      }\n    }\n  }, []);\n\n  // ELEC_ONLY - Assign supplier_id_es in function to the supplier_code_es\n  if (elec_only) {\n    // EDF\n    if ((supplier_code_es === \"LOND\") || (supplier_code_es === \"SEEB\") || (supplier_code_es === \"SWEB\")) {\n      supplier_id_es = 'EDF';\n    }\n\n    // British Gas\n    if (((supplier_code_es === \"BGAS\") || (supplier_code_es === \"BIZZ\") || (supplier_code_es === \"ECOA\") || (supplier_code_es === \"ENRD\") || (supplier_code_es === \"OGAS\"))) {\n      supplier_id_es = 'BRG';\n    }\n\n    // EON\n    if (((supplier_code_es === \"PGEN\") || (supplier_code_es === \"EELC\") || (supplier_code_es === \"EENG\") || (supplier_code_es === \"EMEB\") || (supplier_code_es === \"NORW\"))) {\n      supplier_id_es = 'EON';\n    }\n\n    // SSE\n    if (((supplier_code_es === \"HYDE\") || (supplier_code_es === \"IMPO\") || (supplier_code_es === \"SOUT\") || (supplier_code_es === \"SWAE\"))) {\n      supplier_id_es = 'SSE';\n    }\n\n    // Scottish Power\n    if (((supplier_code_es === \"MANW\") || (supplier_code_es === \"SPOW\"))) {\n      supplier_id_es = 'SCO';\n    }\n\n    // NPOWER\n    if (((supplier_code_es === \"INDE\") || (supplier_code_es === \"MIDE\") || (supplier_code_es === \"NATP\") || (supplier_code_es === \"NEEB\") || (supplier_code_es === \"PSUK\") || (supplier_code_es === \"YELG\"))) {\n      supplier_id_es = 'NPO';\n    }\n  }\n\n  // GAS_ONLY - Assign supplier_id in function to the supplier_code_gs\n  if (gas_only) {\n    // British Gas\n    if ((supplier_code_gs === \"BGT\") || (supplier_code_gs === \"BGB\") || (supplier_code_gs === \"BSA\")) {\n      supplier_id_gs = 'BRG';\n    }\n\n    // EDF\n    if ((supplier_code_gs === \"LED\") || (supplier_code_gs === \"SBR\") || (supplier_code_gs === \"EDS\") || (supplier_code_gs === \"LDE\") || (supplier_code_gs === \"LEI\")) {\n      supplier_id_gs = 'EDF';\n    }\n\n    // EON Selected\n    if ((supplier_code_gs === \"TUK\") || (supplier_code_gs === \"EAS\") || (supplier_code_gs === \"PWR\") || (supplier_code_gs === \"EMI\") || (supplier_code_gs === \"PWG\") || (supplier_code_gs === \"OWN\") || (supplier_code_gs === \"ATE\") || (supplier_code_gs === \"EST\") || (supplier_code_gs === \"SGL\") || (supplier_code_gs === \"SGY\") || (supplier_code_gs === \"TUU\") || (supplier_code_gs === \"EOD\") || (supplier_code_gs === \"POW\")) {\n      supplier_id_gs = 'EON';\n    }\n\n    // SSE Selected\n    if ((supplier_code_gs === \"ATL\") || (supplier_code_gs === \"SHH\")) {\n      supplier_id_gs = 'SSE';\n    }\n\n    // Scottish power selected\n    if ((supplier_code_gs === \"SCT\")) {\n      supplier_id_gs = 'SCO';\n    }\n\n    // Npower Selected\n    if ((supplier_code_gs === \"NGD\") || (supplier_code_gs === \"NPC\") || (supplier_code_gs === \"NDS\") || (supplier_code_gs === \"IND\") || (supplier_code_gs === \"CLT\") || (supplier_code_gs === \"TCG\") || (supplier_code_gs === \"NRZ\") || (supplier_code_gs === \"GUK\") || (supplier_code_gs === \"YGS\") || (supplier_code_gs === \"YKE\")) {\n      supplier_id_gs = 'NPO';\n    }\n  }\n\n  // Dual_active - Assign supplier_id_gs in function to the supplier_code_es and supplier_code_gs\n  if (dual_active) {\n    if (same_supplier) {\n      // EDF\n      if ((supplier_code_es === \"LOND\") || (supplier_code_es === \"SEEB\") || (supplier_code_es === \"SWEB\")) {\n        supplier_id_dual = 'EDF';\n      }\n\n      // British Gas\n      if (((supplier_code_es === \"BGAS\") || (supplier_code_es === \"BIZZ\") || (supplier_code_es === \"ECOA\") || (supplier_code_es === \"ENRD\") || (supplier_code_es === \"OGAS\"))) {\n        supplier_id_dual = 'BRG';\n      }\n\n      // EON\n      if (((supplier_code_es === \"PGEN\") || (supplier_code_es === \"EELC\") || (supplier_code_es === \"EENG\") || (supplier_code_es === \"EMEB\") || (supplier_code_es === \"NORW\"))) {\n        supplier_id_dual = 'EON';\n      }\n\n      // SSE\n      if (((supplier_code_es === \"HYDE\") || (supplier_code_es === \"IMPO\") || (supplier_code_es === \"SOUT\") || (supplier_code_es === \"SWAE\"))) {\n        supplier_id_dual = 'SSE';\n      }\n\n      // Scottish Power\n      if (((supplier_code_es === \"MANW\") || (supplier_code_es === \"SPOW\"))) {\n        supplier_id_dual = 'SCO';\n      }\n\n      // NPOWER\n      if (((supplier_code_es === \"INDE\") || (supplier_code_es === \"MIDE\") || (supplier_code_es === \"NATP\") || (supplier_code_es === \"NEEB\") || (supplier_code_es === \"PSUK\") || (supplier_code_es === \"YELG\"))) {\n        supplier_id_dual = 'NPO';\n      }\n    } else {\n      /**-- ELECTRICITY --*/\n\n      // EDF\n      if ((supplier_code_es === \"LOND\") || (supplier_code_es === \"SEEB\") || (supplier_code_es === \"SWEB\")) {\n        supplier_id_es = 'EDF';\n      }\n\n      // British Gas\n      if (((supplier_code_es === \"BGAS\") || (supplier_code_es === \"BIZZ\") || (supplier_code_es === \"ECOA\") || (supplier_code_es === \"ENRD\") || (supplier_code_es === \"OGAS\"))) {\n        supplier_id_es = 'BRG';\n      }\n\n      // EON\n      if (((supplier_code_es === \"PGEN\") || (supplier_code_es === \"EELC\") || (supplier_code_es === \"EENG\") || (supplier_code_es === \"EMEB\") || (supplier_code_es === \"NORW\"))) {\n        supplier_id_es = 'EON';\n      }\n\n      // SSE\n      if (((supplier_code_es === \"HYDE\") || (supplier_code_es === \"IMPO\") || (supplier_code_es === \"SOUT\") || (supplier_code_es === \"SWAE\"))) {\n        supplier_id_es = 'SSE';\n      }\n\n      // Scottish Power\n      if (((supplier_code_es === \"MANW\") || (supplier_code_es === \"SPOW\"))) {\n        supplier_id_es = 'SCO';\n      }\n\n      // NPOWER\n      if (((supplier_code_es === \"INDE\") || (supplier_code_es === \"MIDE\") || (supplier_code_es === \"NATP\") || (supplier_code_es === \"NEEB\") || (supplier_code_es === \"PSUK\") || (supplier_code_es === \"YELG\"))) {\n        supplier_id_es = 'NPO';\n      }\n\n      /**-- GAS --*/\n      // British Gas\n      if ((supplier_code_gs === \"BGT\") || (supplier_code_gs === \"BGB\") || (supplier_code_gs === \"BSA\")) {\n        supplier_id_gs = 'BRG';\n      }\n\n      // EDF\n      if ((supplier_code_gs === \"LED\") || (supplier_code_gs === \"SBR\") || (supplier_code_gs === \"EDS\") || (supplier_code_gs === \"LDE\") || (supplier_code_gs === \"LEI\")) {\n        supplier_id_gs = 'EDF';\n      }\n\n      // EON Selected\n      if ((supplier_code_gs === \"TUK\") || (supplier_code_gs === \"EAS\") || (supplier_code_gs === \"PWR\") || (supplier_code_gs === \"EMI\") || (supplier_code_gs === \"PWG\") || (supplier_code_gs === \"OWN\") || (supplier_code_gs === \"ATE\") || (supplier_code_gs === \"EST\") || (supplier_code_gs === \"SGL\") || (supplier_code_gs === \"SGY\") || (supplier_code_gs === \"TUU\") || (supplier_code_gs === \"EOD\") || (supplier_code_gs === \"POW\")) {\n        supplier_id_gs = 'EON';\n      }\n\n      // SSE Selected\n      if ((supplier_code_gs === \"ATL\") || (supplier_code_gs === \"SHH\")) {\n        supplier_id_gs = 'SSE';\n      }\n\n      // Scottish power selected\n      if ((supplier_code_gs === \"SCT\")) {\n        supplier_id_gs = 'SCO';\n      }\n\n      // Npower Selected\n      if ((supplier_code_gs === \"NGD\") || (supplier_code_gs === \"NPC\") || (supplier_code_gs === \"NDS\") || (supplier_code_gs === \"IND\") || (supplier_code_gs === \"CLT\") || (supplier_code_gs === \"TCG\") || (supplier_code_gs === \"NRZ\") || (supplier_code_gs === \"GUK\") || (supplier_code_gs === \"YGS\") || (supplier_code_gs === \"YKE\")) {\n        supplier_id_gs = 'NPO';\n      }\n    }\n  }\n\n  // Handle change for Electricity tariff\n  const handleChangeTariffES = (e) => {\n    /**-- Select section --*/\n    if (select_elec_only) {\n      /**-- For dual_active & same_supplier === false */\n      if (dual_active) {\n        if (same_supplier === false) {\n          // Update Error\n          updateError(false);\n          const selected_elec_tariff = document.getElementById('selected_elec_tariff').value;\n          // Take the selected position in the array\n          let name = selected_elec_tariff\n          let index_select = filter_by_property(elec_tariffs, supplier_id_es).findIndex(function (item, i) {\n            return item.tariff_name === name\n          });\n\n          // Fetch the data by the current position\n          const tariff_description = filter_by_property(elec_tariffs, supplier_id_es)[index_select];\n          // Update Customer Information\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description_elec: {\n              elec_tariff: tariff_description\n            }\n          });\n\n          // IDK selection \n          const position_selected = e.target.selectedIndex;\n          if ((position_selected !== undefined)) {\n            // console.log(position_selected);\n            let value_selected = document.getElementById('selected_elec_tariff')[position_selected].value;\n            if (value_selected === 'tariff_not_listed') {\n              // Update Customer Information\n              updateCustomerInformation({\n                ...customerInformation,\n                tariff_description_elec: {\n                  elec_tariff: 'tariff_not_listed'\n                }\n              });\n            }\n          }\n          return;\n        }\n      } /**--End Dual */\n\n      // Update Error\n      updateError(false);\n      const selected_elec_tariff = document.getElementById('selected_elec_tariff').value;\n      // Take the selected position in the array\n      let name = selected_elec_tariff\n      let index_select = filter_by_property(elec_tariffs, supplier_id_es).findIndex(function (item, i) {\n        return item.tariff_name === name\n      });\n\n      // Fetch the data by the current position\n      const tariff_description = filter_by_property(elec_tariffs, supplier_id_es)[index_select];\n      // Update Customer Information\n      updateCustomerInformation({\n        ...customerInformation,\n        tariff_description\n      });\n\n      // IDK selection \n      const position_selected = e.target.selectedIndex;\n      if ((position_selected !== undefined)) {\n        // console.log(position_selected);\n        let value_selected = document.getElementById('selected_elec_tariff')[position_selected].value;\n        if (value_selected === 'tariff_not_listed') {\n          // Update Customer Information\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description: 'tariff_not_listed'\n          });\n        }\n      }\n\n    } else {\n      /**-- For dual_active & same_supplier === false */\n      if (dual_active) {\n        if (same_supplier === false) {\n          // Update Error\n          updateError(false);\n          /**-- RADIO BUTTONS SECTION --*/\n          // Take the selected position in the array\n          let id = e.target.id\n          let index_rb = filter_by_property(elec_tariffs, supplier_id_es).findIndex(function (item, i) {\n            return item.tariff_id === id\n          });\n          // Fetch the data by the current position\n          const tariff_description = filter_by_property(elec_tariffs, supplier_id_es)[index_rb];\n          // Update Customer Information\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description_elec: {\n              elec_tariff: tariff_description\n            }\n          });\n          return;\n        }\n      }  /**--End Dual */\n\n      // Update Error\n      updateError(false);\n      /**-- RADIO BUTTONS SECTION --*/\n      // Take the selected position in the array\n      let id = e.target.id\n      let index_rb = filter_by_property(elec_tariffs, supplier_id_es).findIndex(function (item, i) {\n        return item.tariff_id === id\n      });\n      // Fetch the data by the current position\n      const tariff_description = filter_by_property(elec_tariffs, supplier_id_es)[index_rb];\n      // Update Customer Information\n      updateCustomerInformation({\n        ...customerInformation,\n        tariff_description\n      });\n    }\n  }\n\n  // Handle change for Electricity tariff\n  const handleChangeTariffGS = (e) => {\n    /**-- Select section --*/\n    if (select_gas_only) {\n      /**-- For dual_active & same_supplier === false */\n      if (dual_active) {\n        if (same_supplier === false) {\n          // Update Error\n          updateError(false);\n          const selected_gas_tariff = document.getElementById('selected_gas_tariff').value;\n          // Take the selected position in the array\n          let name = selected_gas_tariff\n          let index_select = filter_by_property(gas_tariffs, supplier_id_gs).findIndex(function (item, i) {\n            return item.tariff_name === name\n          });\n\n          // Fetch the data by the current position\n          const tariff_description = filter_by_property(gas_tariffs, supplier_id_gs)[index_select];\n          // Update Customer Information\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description_gas: {\n              gas_tariff: tariff_description\n            }\n          });\n\n          // IDK selection \n          const position_selected = e.target.selectedIndex;\n          if ((position_selected !== undefined)) {\n            // console.log(position_selected);\n            let value_selected = document.getElementById('selected_gas_tariff')[position_selected].value;\n            if (value_selected === 'tariff_not_listed') {\n              // Update Customer Information\n              updateCustomerInformation({\n                ...customerInformation,\n                tariff_description_gas: {\n                  gas_tariff: 'tariff_not_listed'\n                }\n              });\n            }\n          }\n\n          return;\n        }\n      } /**--End Dual */\n\n      // Update Error\n      updateError(false);\n      const selected_gas_tariff = document.getElementById('selected_gas_tariff').value;\n      // Take the selected position in the array\n      let name = selected_gas_tariff\n      let index_select = filter_by_property(gas_tariffs, supplier_id_gs).findIndex(function (item, i) {\n        return item.tariff_name === name\n      });\n\n      // Fetch the data by the current position\n      const tariff_description = filter_by_property(gas_tariffs, supplier_id_gs)[index_select];\n      // Update Customer Information\n      updateCustomerInformation({\n        ...customerInformation,\n        tariff_description\n      });\n\n      // IDK selection \n      const position_selected = e.target.selectedIndex;\n      if ((position_selected !== undefined)) {\n        // console.log(position_selected);\n        let value_selected = document.getElementById('selected_gas_tariff')[position_selected].value;\n        if (value_selected === 'tariff_not_listed') {\n          // Update Customer Information\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description: 'tariff_not_listed'\n          });\n        }\n      }\n\n    } else {\n      /**-- For dual_active & same_supplier === false */\n      if (dual_active) {\n        if (same_supplier === false) {\n          // Update Error\n          updateError(false);\n          /**-- RADIO BUTTONS SECTION --*/\n          // Take the selected position in the array\n          let id = e.target.id\n          let index_rb = filter_by_property(gas_tariffs, supplier_id_gs).findIndex(function (item, i) {\n            return item.tariff_id === id\n          });\n          // Fetch the data by the current position\n          const tariff_description = filter_by_property(gas_tariffs, supplier_id_gs)[index_rb];\n          // Update Customer Information\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description_gas: {\n              gas_tariff: tariff_description\n            }\n          });\n          return;\n        }\n      }\n\n      // Update Error\n      updateError(false);\n      /**-- RADIO BUTTONS SECTION --*/\n      // Take the selected position in the array\n      let id = e.target.id\n      let index_rb = filter_by_property(gas_tariffs, supplier_id_gs).findIndex(function (item, i) {\n        return item.tariff_id === id\n      });\n      // Fetch the data by the current position\n      const tariff_description = filter_by_property(gas_tariffs, supplier_id_gs)[index_rb];\n      // Update Customer Information\n      updateCustomerInformation({\n        ...customerInformation,\n        tariff_description\n      });\n    }\n  }\n\n  // Handle change for Electricity tariff\n  const handleChangeTariffDual = (e) => {\n    /**-- Select section --*/\n    if (select_dual_only) {\n      // Update Error\n      updateError(false);\n      const selected_dual_tariff = document.getElementById('selected_dual_tariff').value;\n      // Take the selected position in the array\n      let name = selected_dual_tariff\n      let index_select = filter_by_property(dual_tariffs, supplier_id_dual).findIndex(function (item, i) {\n        return item.tariff_name === name\n      });\n\n      // Fetch the data by the current position\n      const tariff_description = filter_by_property(dual_tariffs, supplier_id_dual)[index_select];\n      // Update Customer Information\n      updateCustomerInformation({\n        ...customerInformation,\n        tariff_description\n      });\n\n      // IDK selection \n      const position_selected = e.target.selectedIndex;\n      if ((position_selected !== undefined)) {\n        // console.log(position_selected);\n        let value_selected = document.getElementById('selected_dual_tariff')[position_selected].value;\n        if (value_selected === 'tariff_not_listed') {\n          // Update Customer Information\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description: 'tariff_not_listed'\n          });\n        }\n      }\n    } else {\n      // Update Error\n      updateError(false);\n      /**-- RADIO BUTTONS SECTION --*/\n      // Take the selected position in the array\n      let id = e.target.id\n      let index_rb = filter_by_property(dual_tariffs, supplier_id_dual).findIndex(function (item, i) {\n        return item.tariff_id === id\n      });\n      // Fetch the data by the current position\n      const tariff_description = filter_by_property(dual_tariffs, supplier_id_dual)[index_rb];\n      // Update Customer Information\n      updateCustomerInformation({\n        ...customerInformation,\n        tariff_description\n      });\n    }\n  }\n\n  // Send tariff\n  const sendTariff = (e) => {\n    e.preventDefault();\n    if (dual_active) {\n      if (same_supplier === false) {\n        // Validation dual with different suppplier\n        if ((customerInformation.hasOwnProperty('tariff_description_elec')) && (customerInformation.hasOwnProperty('tariff_description_gas'))) {\n          if ((customerInformation.tariff_description_elec.elec_tariff === undefined) || (customerInformation.tariff_description_gas.gas_tariff === undefined)) {\n            // Update Error\n            updateError(true);\n            return;\n          } else {\n            // Hidde tariffs\n            updateShowFormTariffs(false);\n            // Show Form Usage\n            updateShowFormUsageKWH(true);\n            // Update Progress Bar\n            updateProgressBar({ ...progressBar, step: 7 });\n          }\n        } else {\n          // Update Error\n          updateError(true);\n          return;\n        }\n      } else {\n        // Validation dual with same supplier\n        if (customerInformation.hasOwnProperty('tariff_description')) {\n          if (customerInformation.tariff_description === undefined) {\n            // Update error\n            updateError(true);\n            return;\n          } else {\n            // Hidde tariffs\n            updateShowFormTariffs(false);\n            // Show Form Usage\n            updateShowFormUsageKWH(true);\n            // Update Progress Bar\n            updateProgressBar({ ...progressBar, step: 7 });\n          }\n          // Update Error\n          updateError(false);\n        } else {\n          // Update error\n          updateError(true);\n          return;\n        }\n      }\n      return;\n    }\n\n    // Validation, elec_only, gas_only\n    if (customerInformation.hasOwnProperty('tariff_description')) {\n      if (customerInformation.tariff_description === undefined) {\n        // Update error\n        updateError(true);\n        return;\n      } else {\n        if (gas_only) {\n          // Hidde tariffs\n          updateShowFormTariffs(false);\n          // Show Form Usage Gas\n          updateShowFormUsageGAS(true);\n          // Update Progress Bar\n          updateProgressBar({ ...progressBar, step: 7 });\n        } else {\n          // Hidde tariffs\n          updateShowFormTariffs(false);\n          // Show Form Usage\n          updateShowFormUsageKWH(true);\n          // Update Progress Bar\n          updateProgressBar({ ...progressBar, step: 7 });\n        }\n      }\n      // Update Error\n      updateError(false);\n    } else {\n      // Update error\n      updateError(true);\n      return;\n    }\n  }\n\n  // Handle search ES\n  const HandleSearchES = (e) => {\n    // First step - Take the text introduced in the input\n    swal({\n      closeOnClickOutside: false,\n      buttons: {\n        cancel: {\n          text: \"Go back\",\n          value: false,\n          visible: true\n        },\n        confirm: \"Search\"\n      },\n      content: (\n        <div className=\"swal-text-custom\">\n          <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n            <FaSearch />\n          </IconContext.Provider>\n          <h1>Search tariff...</h1>\n          <div>\n            <input type=\"text\" id=\"search-input\" />\n          </div>\n        </div>\n      )\n    }).then(search => {\n      if (search !== true) {\n        return;\n      }\n      const search_input = document.getElementById('search-input').value.toLowerCase();\n      // Validation search input\n      if (search_input === '') {\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            }\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImSad />\n              </IconContext.Provider>\n              <h1>No results found...</h1>\n            </div>\n          )\n        });\n        return;\n      }\n      const data = data_electricity_tariffs;\n      return search_option(search_input, data);\n    });\n\n    // Second step - Filter and serach\n    let search_option = (search_input, data) => {\n      // Access to the data\n      const data_tariff = data.tariffs;\n      let filter;\n      // Filter by search_input \n      filter = filter_by_property(data_tariff, supplier_id_es).filter((option) => {\n        let options = option.tariff_name.toLowerCase().includes(search_input);\n        return (\n          options\n        );\n      });\n\n      // Print options from filter_es \n      let results = filter.map((data) => (\n        <Fragment key={data.tariff_id + '_search_key'}>\n          <input type=\"radio\" id={data.tariff_id + '_search_filtered'} name=\"search_es\" value={data.tariff_id} />\n          <label>{data.tariff_name} - <span style={{ color: 'var(--text_dark)' }}>Tariff ID:</span> {data.tariff_id}</label><br />\n        </Fragment>\n      ));\n\n      // Validation - No results found\n      if (filter.length <= 0) {\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            }\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImSad />\n              </IconContext.Provider>\n              <h1>No results found...</h1>\n            </div>\n          )\n        });\n        return;\n      }\n\n      swal({\n        closeOnClickOutside: false,\n        buttons: {\n          cancel: {\n            text: \"Go back\",\n            value: false,\n            visible: true\n          },\n          confirm: \"Select\"\n        },\n        content: (\n          <div className=\"swal-text-custom\">\n            <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n              <FaRegHandPointer />\n            </IconContext.Provider>\n\n            <h1>Results...</h1>\n            <div className=\"swal-custom-container\">\n              {results}\n            </div>\n          </div>\n        )\n      }).then(result => {\n        if (result !== true) {\n          return;\n        }\n\n        // Search for all the radio buttons by name\n        let rb_selected = document.getElementsByName('search_es');\n        // Take the value of the rb selected\n        for (let i = 0; i < rb_selected.length; i++) {\n          if (rb_selected[i].checked) {\n            const rb_id = rb_selected[i].value; //rb_id selected\n\n            // If does not exit as a input - Code for options\n            if (document.getElementById(rb_id) === null) {\n              document.getElementById(rb_id + '_option').selected = true; //Show option selected\n              // Fetch data \n              let data = data_electricity_tariffs;\n              // Filter by id \n              let filter;\n              filter = data.tariffs.filter((option) => {\n                let options = option.tariff_id.includes(rb_id);\n                return (\n                  options\n                );\n              });\n\n              // Tariff data\n              let tariff_description = filter.map((data) => (\n                data\n              ));\n\n              // Conditional - dual_active\n              if ((dual_active === true) && (same_supplier === false)) {\n                // Update Customer Information\n                updateCustomerInformation({\n                  ...customerInformation,\n                  tariff_description_elec: {\n                    elec_tariff: tariff_description[0]\n                  }\n                });\n              } else {\n                // Update Customer Information\n                updateCustomerInformation({\n                  ...customerInformation,\n                  tariff_description: tariff_description[0]\n                });\n              }\n\n              // Hidde error\n              updateError(false);\n\n            } else { // Existing inputs (the firts four);\n              // Checked selected input \n              document.getElementById(rb_id).checked = true;\n\n              // Hidde select - options\n              update_select_elec_only(false);\n\n              // Fetch Data\n              let data = data_electricity_tariffs;\n\n              // Filter by id \n              let filter;\n              filter = data.tariffs.filter((option) => {\n                let options = option.tariff_id.includes(rb_id);\n                return (\n                  options\n                );\n              });\n\n              // Tariff data\n              let tariff_description = filter.map((data) => (\n                data\n              ));\n\n              // Conditional - dual_active\n              if ((dual_active === true) && (same_supplier === false)) {\n                // Update Customer Information\n                updateCustomerInformation({\n                  ...customerInformation,\n                  tariff_description_elec: {\n                    elec_tariff: tariff_description[0]\n                  }\n                });\n              } else {\n                // Update Customer Information\n                updateCustomerInformation({\n                  ...customerInformation,\n                  tariff_description: tariff_description[0]\n                });\n              }\n\n              // Hidde error\n              updateError(false);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  // Handle search GS\n  const HandleSearchGS = (e) => {\n    // First step - Take the text introduced in the input\n    swal({\n      closeOnClickOutside: false,\n      buttons: {\n        cancel: {\n          text: \"Go back\",\n          value: false,\n          visible: true\n        },\n        confirm: \"Search\"\n      },\n      content: (\n        <div className=\"swal-text-custom\">\n          <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n            <FaSearch />\n          </IconContext.Provider>\n          <h1>Search tariff...</h1>\n          <div>\n            <input type=\"text\" id=\"search-input\" />\n          </div>\n        </div>\n      )\n    }).then(search => {\n      if (search !== true) {\n        return;\n      }\n      const search_input = document.getElementById('search-input').value.toLowerCase();\n      // Validation search input\n      if (search_input === '') {\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            }\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImSad />\n              </IconContext.Provider>\n              <h1>No results found...</h1>\n            </div>\n          )\n        });\n        return;\n      }\n      const data = data_gas_tariffs;\n      return search_option(search_input, data);\n    });\n\n    // Second step - Filter and serach\n    let search_option = (search_input, data) => {\n      // Access to the data\n      const data_tariff = data.tariffs;\n      let filter;\n      // Filter by search_input \n      filter = filter_by_property(data_tariff, supplier_id_gs).filter((option) => {\n        let options = option.tariff_name.toLowerCase().includes(search_input);\n        return (\n          options\n        );\n      });\n\n      // Print options from filter_es \n      let results = filter.map((data) => (\n        <Fragment key={data.tariff_id + '_search_key'}>\n          <input type=\"radio\" id={data.tariff_id + '_search_filtered'} name=\"search_es\" value={data.tariff_id} />\n          <label>{data.tariff_name} - <span style={{ color: 'var(--text_dark)' }}>Tariff ID:</span> {data.tariff_id}</label><br />\n        </Fragment>\n      ));\n\n      // Validation - No results found\n      if (filter.length <= 0) {\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            }\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImSad />\n              </IconContext.Provider>\n              <h1>No results found...</h1>\n            </div>\n          )\n        });\n        return;\n      }\n\n      swal({\n        closeOnClickOutside: false,\n        buttons: {\n          cancel: {\n            text: \"Go back\",\n            value: false,\n            visible: true\n          },\n          confirm: \"Select\"\n        },\n        content: (\n          <div className=\"swal-text-custom\">\n            <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n              <FaRegHandPointer />\n            </IconContext.Provider>\n\n            <h1>Results...</h1>\n            <div className=\"swal-custom-container\">\n              {results}\n            </div>\n          </div>\n        )\n      }).then(result => {\n        if (result !== true) {\n          return;\n        }\n\n        // Search for all the radio buttons by name\n        let rb_selected = document.getElementsByName('search_es');\n        // Take the value of the rb selected\n        for (let i = 0; i < rb_selected.length; i++) {\n          if (rb_selected[i].checked) {\n            const rb_id = rb_selected[i].value; //rb_id selected\n\n            // If does not exit as a input - Code for options\n            if (document.getElementById(rb_id) === null) {\n              document.getElementById(rb_id + '_option').selected = true; //Show option selected\n              // Fetch data \n              let data = data_gas_tariffs;\n              // Filter by id \n              let filter;\n              filter = data.tariffs.filter((option) => {\n                let options = option.tariff_id.includes(rb_id);\n                return (\n                  options\n                );\n              });\n\n              // Tariff data\n              let tariff_description = filter.map((data) => (\n                data\n              ));\n\n              // Conditional - dual_active\n              if ((dual_active === true) && (same_supplier === false)) {\n                // Update Customer Information\n                updateCustomerInformation({\n                  ...customerInformation,\n                  tariff_description_gas: {\n                    gas_tariff: tariff_description[0]\n                  }\n                });\n              } else {\n                // Update Customer Information\n                updateCustomerInformation({\n                  ...customerInformation,\n                  tariff_description: tariff_description[0]\n                });\n              }\n\n              // Hidde error\n              updateError(false);\n\n            } else { // Existing inputs (the firts four);\n              // Checked selected input \n              document.getElementById(rb_id).checked = true;\n\n              // Hidde select - options\n              update_select_gas_only(false);\n\n              // Fetch Data\n              let data = data_gas_tariffs;\n\n              // Filter by id \n              let filter;\n              filter = data.tariffs.filter((option) => {\n                let options = option.tariff_id.includes(rb_id);\n                return (\n                  options\n                );\n              });\n\n              // Tariff data\n              let tariff_description = filter.map((data) => (\n                data\n              ));\n\n              // Conditional - dual_active\n              if ((dual_active === true) && (same_supplier === false)) {\n                // Update Customer Information\n                updateCustomerInformation({\n                  ...customerInformation,\n                  tariff_description_gas: {\n                    gas_tariff: tariff_description[0]\n                  }\n                });\n              } else {\n                // Update Customer Information\n                updateCustomerInformation({\n                  ...customerInformation,\n                  tariff_description: tariff_description[0]\n                });\n              }\n\n              // Hidde error\n              updateError(false);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  // Handle search Dual\n  const HandleSearchDual = (e) => {\n    // First step - Take the text introduced in the input\n    swal({\n      closeOnClickOutside: false,\n      buttons: {\n        cancel: {\n          text: \"Go back\",\n          value: false,\n          visible: true\n        },\n        confirm: \"Search\"\n      },\n      content: (\n        <div className=\"swal-text-custom\">\n          <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n            <FaSearch />\n          </IconContext.Provider>\n          <h1>Search tariff...</h1>\n          <div>\n            <input type=\"text\" id=\"search-input\" />\n          </div>\n        </div>\n      )\n    }).then(search => {\n      if (search !== true) {\n        return;\n      }\n      const search_input = document.getElementById('search-input').value.toLowerCase();\n      // Validation search input\n      if (search_input === '') {\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            }\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImSad />\n              </IconContext.Provider>\n              <h1>No results found...</h1>\n            </div>\n          )\n        });\n        return;\n      }\n      const data = data_dual_tariffs;\n      return search_option(search_input, data);\n    });\n\n    // Second step - Filter and serach\n    let search_option = (search_input, data) => {\n      // Access to the data\n      const data_tariff = data.tariffs;\n      let filter;\n      // Filter by search_input \n      filter = filter_by_property(data_tariff, supplier_id_dual).filter((option) => {\n        let options = option.tariff_name.toLowerCase().includes(search_input);\n        return (\n          options\n        );\n      });\n\n      // Print options from filter_es \n      let results = filter.map((data) => (\n        <Fragment key={data.tariff_id + '_search_key'}>\n          <input type=\"radio\" id={data.tariff_id + '_search_filtered'} name=\"search_es\" value={data.tariff_id} />\n          <label>{data.tariff_name} - <span style={{ color: 'var(--text_dark)' }}>Tariff ID:</span> {data.tariff_id}</label><br />\n        </Fragment>\n      ));\n\n      // Validation - No results found\n      if (filter.length <= 0) {\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            }\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImSad />\n              </IconContext.Provider>\n              <h1>No results found...</h1>\n            </div>\n          )\n        });\n        return;\n      }\n\n      swal({\n        closeOnClickOutside: false,\n        buttons: {\n          cancel: {\n            text: \"Go back\",\n            value: false,\n            visible: true\n          },\n          confirm: \"Select\"\n        },\n        content: (\n          <div className=\"swal-text-custom\">\n            <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n              <FaRegHandPointer />\n            </IconContext.Provider>\n\n            <h1>Results...</h1>\n            <div className=\"swal-custom-container\">\n              {results}\n            </div>\n          </div>\n        )\n      }).then(result => {\n        if (result !== true) {\n          return;\n        }\n\n        // Search for all the radio buttons by name\n        let rb_selected = document.getElementsByName('search_es');\n        // Take the value of the rb selected\n        for (let i = 0; i < rb_selected.length; i++) {\n          if (rb_selected[i].checked) {\n            const rb_id = rb_selected[i].value; //rb_id selected\n\n            // If does not exit as a input - Code for options\n            if (document.getElementById(rb_id) === null) {\n              document.getElementById(rb_id + '_option').selected = true; //Show option selected\n              // Fetch data \n              let data = data_dual_tariffs;\n              // Filter by id \n              let filter;\n              filter = data.tariffs.filter((option) => {\n                let options = option.tariff_id.includes(rb_id);\n                return (\n                  options\n                );\n              });\n\n              // Tariff data\n              let tariff_description = filter.map((data) => (\n                data\n              ));\n\n              // Update Customer Information\n              updateCustomerInformation({\n                ...customerInformation,\n                tariff_description: tariff_description[0]\n              });\n\n              // Hidde error\n              updateError(false);\n\n            } else { // Existing inputs (the firts four);\n              // Checked selected input \n              document.getElementById(rb_id).checked = true;\n\n              // Hidde select - options\n              update_select_dual_only(false);\n\n              // Fetch Data\n              let data = data_dual_tariffs;\n\n              // Filter by id \n              let filter;\n              filter = data.tariffs.filter((option) => {\n                let options = option.tariff_id.includes(rb_id);\n                return (\n                  options\n                );\n              });\n\n              // Tariff data\n              let tariff_description = filter.map((data) => (\n                data\n              ));\n\n              // Update Customer Information\n              updateCustomerInformation({\n                ...customerInformation,\n                tariff_description: tariff_description[0]\n              });\n\n              // Hidde error\n              updateError(false);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  // Tariff is not listed - Elec\n  const tariff_not_listed_elec = (e) => {\n    e.preventDefault();\n    const tariff_not_selected = document.getElementById('not_listed_es');\n    // Conditional - dual_active\n    if ((dual_active === true) && (same_supplier === false)) {\n      // Update Customer Information\n      updateCustomerInformation({\n        ...customerInformation,\n        tariff_description_elec: {\n          elec_tariff: 'tariff_not_listed'\n        }\n      });\n      // Selected tariff\n      tariff_not_selected.selected = true;\n    } else {\n      // Update Customer Information\n      updateCustomerInformation({\n        ...customerInformation,\n        tariff_description: 'tariff_not_listed'\n      });\n      // Selected tariff\n      tariff_not_selected.selected = true;\n    }\n\n    // Hidde error\n    updateError(false);\n  }\n\n  // Tariff is not listed - Gas\n  const tariff_not_listed_gas = (e) => {\n    e.preventDefault();\n    const tariff_not_selected = document.getElementById('not_listed_gs');\n    // Conditional - dual_active\n    if ((dual_active === true) && (same_supplier === false)) {\n      // Update Customer Information\n      updateCustomerInformation({\n        ...customerInformation,\n        tariff_description_gas: {\n          gas_tariff: 'tariff_not_listed'\n        }\n      });\n      // Selected tariff\n      tariff_not_selected.selected = true;\n    } else {\n      // Update Customer Information\n      updateCustomerInformation({\n        ...customerInformation,\n        tariff_description: 'tariff_not_listed'\n      });\n      // Selected tariff\n      tariff_not_selected.selected = true;\n    }\n\n    // Hidde error\n    updateError(false);\n  }\n\n  // Go back to E7\n  const goBack = (e) => {\n    e.preventDefault();\n    // Update Progress Bar\n    updateProgressBar({ ...progressBar, step: 5 });\n    // Delete Customer tariff\n    const copy_customer_tariff = { ...customerInformation };\n    delete copy_customer_tariff['tariff_description'];\n    delete copy_customer_tariff['tariff_description_elec'];\n    delete copy_customer_tariff['tariff_description_gas'];\n    //Update Customer Information\n    updateCustomerInformation({ ...copy_customer_tariff });\n    // Hidde Error\n    updateError(false);\n    // Hidde Form Tariffs\n    updateShowFormTariffs(false);\n    // Show E7\n    updateShowE7(true);\n  }\n\n  return (\n    <>\n      <section className=\"form-tariff-section\">\n        <div className=\"form-tariff-container\">\n          <div className=\"form-tariff-content\">\n            <div className=\"form-tariff\">\n              <h1>Select your tariff from the below</h1>\n              <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s. the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s. the printing and typesetting industry Lorem Ipsum has been the industry's standard dummy text. ply dummy text o ply dummy text</p>\n            </div>\n\n            {/* Elec only */}\n            {elec_only ?\n              (\n                <>\n                  <form className=\"form-tariff-rb-container\" onChange={(e) => handleChangeTariffES(e)}>\n                    {filter_by_property(elec_tariffs, supplier_id_es).slice(0, 3).map((data) => (\n                      <div className=\"form-tariff-rb-content\" key={data.tariff_id} onClick={() => update_select_elec_only(false)}>\n                        <label className=\"form-tariff-rb\" htmlFor={data.tariff_id}>\n                          <p>{data.tariff_name}</p>\n                          <input type=\"radio\" id={data.tariff_id} name=\"elec_tariff\" value={data.tariff_name} />\n                        </label>\n                      </div>\n                    ))}\n\n                    {supplier_code_es === 'IDK' ?\n                      expensier_tariff\n                      :\n                      (\n                        <div className=\"form-tariff-rb-content\" onClick={() => update_select_elec_only(true)}>\n                          <label className=\"form-tariff-rb\" htmlFor=\"other\">\n                            <p>Other</p>\n                            <input type=\"radio\" id=\"other\" name=\"elec_tariff\" value='' />\n                          </label>\n                        </div>\n                      )}\n\n                    {select_elec_only ?\n                      (\n                        <>\n                          <div className=\"form-tariff-select\">\n                            <select id=\"selected_elec_tariff\" className=\"supply-information-input\" onChange={(e) => handleChangeTariffES(e)}>\n                              <option value=\"\">- Select - </option>\n                              {filter_by_property(elec_tariffs, supplier_id_es).map((data) => (\n                                <option value={data.tariff_name} id={data.tariff_id + '_option'} key={data.tariff_id}>{data.tariff_name}</option>\n                              ))}\n                              <option value=\"tariff_not_listed\" id=\"not_listed_es\">My tariff is not listed</option>\n                            </select>\n                            <i className=\"edit-icon fas fa-search\" onClick={(e) => HandleSearchES(e)}></i>\n                          </div>\n                          <button className=\"form-tariff-not-listed\" onClick={(e) => tariff_not_listed_elec(e)}>My tariff is not listed</button>\n                        </>\n                      )\n                      :\n                      null\n                    }\n                  </form>\n                </>\n              )\n              :\n              null\n            }\n\n            {/* Gas only */}\n            {gas_only ?\n              (\n                <>\n                  <form className=\"form-tariff-rb-container\" onChange={(e) => handleChangeTariffGS(e)}>\n                    {filter_by_property(gas_tariffs, supplier_id_gs).slice(0, 3).map((data) => (\n                      <div className=\"form-tariff-rb-content\" key={data.tariff_id} onClick={() => update_select_gas_only(false)}>\n                        <label className=\"form-tariff-rb\" htmlFor={data.tariff_id}>\n                          <p>{data.tariff_name}</p>\n                          <input type=\"radio\" id={data.tariff_id} name=\"gas_tariff\" value={data.tariff_name} />\n                        </label>\n                      </div>\n                    ))}\n\n                    {supplier_code_gs === 'IDK' ?\n                      expensier_tariff\n                      :\n                      (\n                        <div className=\"form-tariff-rb-content\" onClick={() => update_select_gas_only(true)}>\n                          <label className=\"form-tariff-rb\" htmlFor=\"other\">\n                            <p>Other</p>\n                            <input type=\"radio\" id=\"other\" name=\"gas_tariff\" value='' />\n                          </label>\n                        </div>\n                      )}\n\n                    {select_gas_only ?\n                      (\n                        <>\n                          <div className=\"form-tariff-select\">\n                            <select id=\"selected_gas_tariff\" className=\"supply-information-input\">\n                              <option value=\"\">- Select - </option>\n                              {filter_by_property(gas_tariffs, supplier_id_gs).map((data) => (\n                                <option value={data.tariff_name} id={data.tariff_id + '_option'} key={data.tariff_id}>{data.tariff_name}</option>\n                              ))}\n                              <option value=\"tariff_not_listed\" id=\"not_listed_gs\">My tariff is not listed</option>\n                            </select>\n                            <i className=\"edit-icon fas fa-search\" onClick={(e) => HandleSearchGS(e)}></i>\n                          </div>\n                          <button className=\"form-tariff-not-listed\" onClick={(e) => tariff_not_listed_gas(e)}>My tariff is not listed</button>\n                        </>\n                      )\n                      :\n                      null\n                    }\n                  </form>\n                </>\n              )\n              :\n              null\n            }\n\n            {/* Dual active */}\n            {dual_active ?\n              same_supplier ?\n                (\n                  <>\n                    <form className=\"form-tariff-rb-container\" onChange={(e) => handleChangeTariffDual(e)}>\n                      {filter_by_property(dual_tariffs, supplier_id_dual).slice(0, 3).map((data) => (\n                        <div className=\"form-tariff-rb-content\" key={data.tariff_id} onClick={() => update_select_dual_only(false)}>\n                          <label className=\"form-tariff-rb\" htmlFor={data.tariff_id}>\n                            <p>{data.tariff_name}</p>\n                            <input type=\"radio\" id={data.tariff_id} name=\"dual_tariff\" value={data.tariff_name} />\n                          </label>\n                        </div>\n                      ))}\n\n                      {supplier_code_es === 'IDK' ?\n                        expensier_tariff\n                        :\n                        (\n                          <div className=\"form-tariff-rb-content\" onClick={() => update_select_dual_only(true)}>\n                            <label className=\"form-tariff-rb\" htmlFor=\"other\">\n                              <p>Other</p>\n                              <input type=\"radio\" id=\"other\" name=\"dual_tariff\" value='' />\n                            </label>\n                          </div>\n                        )}\n\n                      {select_dual_only ?\n                        (\n                          <>\n                            <div className=\"form-tariff-select\">\n                              <select id=\"selected_dual_tariff\" className=\"supply-information-input\">\n                                <option value=\"\">- Select - </option>\n                                {filter_by_property(dual_tariffs, supplier_id_dual).map((data) => (\n                                  <option value={data.tariff_name} id={data.tariff_id + '_option'} key={data.tariff_id}>{data.tariff_name}</option>\n                                ))}\n                                <option value=\"tariff_not_listed\" id=\"not_listed_es\">My tariff is not listed</option>\n                              </select>\n                              <i className=\"edit-icon fas fa-search\" onClick={(e) => HandleSearchDual(e)}></i>\n                            </div>\n                            <button className=\"form-tariff-not-listed\" onClick={(e) => tariff_not_listed_elec(e)}>My tariff is not listed</button>\n                          </>\n\n                        )\n                        :\n                        null\n                      }\n                    </form>\n                  </>\n                )\n                :\n                (\n                  <>\n                    <div className=\"form-tariff-rb-dual-container\">\n                      <form className=\"form-tariff-rb-container-custom\" onChange={(e) => handleChangeTariffES(e)}>\n                        <h1>Electricity tariff</h1>\n                        {filter_by_property(elec_tariffs, supplier_id_es).slice(0, 3).map((data) => (\n                          <div className=\"form-tariff-rb-content\" key={data.tariff_id} onClick={() => update_select_elec_only(false)}>\n                            <label className=\"form-tariff-rb\" htmlFor={data.tariff_id}>\n                              <p>{data.tariff_name}</p>\n                              <input type=\"radio\" id={data.tariff_id} name=\"elec_tariff\" value={data.tariff_name} />\n                            </label>\n                          </div>\n                        ))}\n\n                        {supplier_code_es === 'IDK' ?\n                          expensier_tariff_elec\n                          :\n                          (\n                            <div className=\"form-tariff-rb-content\" onClick={() => update_select_elec_only(true)}>\n                              <label className=\"form-tariff-rb\" htmlFor=\"other_elec\">\n                                <p>Other</p>\n                                <input type=\"radio\" id=\"other_elec\" name=\"elec_tariff\" value='' />\n                              </label>\n                            </div>\n                          )}\n\n                        {select_elec_only ?\n                          (\n                            <>\n                              <div className=\"form-tariff-select\">\n                                <select id=\"selected_elec_tariff\" className=\"supply-information-input\">\n                                  <option value=\"\">- Select - </option>\n                                  {filter_by_property(elec_tariffs, supplier_id_es).map((data) => (\n                                    <option value={data.tariff_name} id={data.tariff_id + '_option'} key={data.tariff_id}>{data.tariff_name}</option>\n                                  ))}\n                                  <option value=\"tariff_not_listed\" id=\"not_listed_es\">My tariff is not listed</option>\n                                </select>\n                                <i className=\"edit-icon fas fa-search\" onClick={(e) => HandleSearchES(e)}></i>\n                              </div>\n                              <button className=\"form-tariff-not-listed\" onClick={(e) => tariff_not_listed_elec(e)}>My tariff is not listed</button>\n                            </>\n                          )\n                          :\n                          null\n                        }\n                      </form>\n\n                      <form className=\"form-tariff-rb-container\" onChange={(e) => handleChangeTariffGS(e)}>\n                        <h1>Gas tariff</h1>\n                        {filter_by_property(gas_tariffs, supplier_id_gs).slice(0, 3).map((data) => (\n                          <div className=\"form-tariff-rb-content\" key={data.tariff_id} onClick={() => update_select_gas_only(false)}>\n                            <label className=\"form-tariff-rb\" htmlFor={data.tariff_id}>\n                              <p>{data.tariff_name}</p>\n                              <input type=\"radio\" id={data.tariff_id} name=\"gas_tariff\" value={data.tariff_name} />\n                            </label>\n                          </div>\n                        ))}\n\n                        {supplier_code_gs === 'IDK' ?\n                          expensier_tariff_gas\n                          :\n                          (\n                            <div className=\"form-tariff-rb-content\" onClick={() => update_select_gas_only(true)}>\n                              <label className=\"form-tariff-rb\" htmlFor=\"other_gas\">\n                                <p>Other</p>\n                                <input type=\"radio\" id=\"other_gas\" name=\"gas_tariff\" value='' />\n                              </label>\n                            </div>\n                          )}\n\n                        {select_gas_only ?\n                          (\n                            <>\n                              <div className=\"form-tariff-select\">\n                                <select id=\"selected_gas_tariff\" className=\"supply-information-input\">\n                                  <option value=\"\">- Select - </option>\n                                  {filter_by_property(gas_tariffs, supplier_id_gs).map((data) => (\n                                    <option value={data.tariff_name} id={data.tariff_id + '_option'} key={data.tariff_id}>{data.tariff_name}</option>\n                                  ))}\n                                  <option value=\"tariff_not_listed\" id=\"not_listed_gs\">My tariff is not listed</option>\n                                </select>\n                                <i className=\"edit-icon fas fa-search\" onClick={(e) => HandleSearchGS(e)}></i>\n                              </div>\n                              <button className=\"form-tariff-not-listed\" onClick={(e) => tariff_not_listed_gas(e)}>My tariff is not listed</button>\n                            </>\n                          )\n                          :\n                          null\n                        }\n                      </form>\n                    </div>\n                  </>\n                )\n              :\n              null\n            }\n\n            {error ?\n              (\n                <div className=\"error-center\">\n                  <Error message=\"Please select a tariff\" />\n                </div>\n              )\n              :\n              null\n            }\n\n            {/* Buttons */}\n            <div className=\"form-tariff-btn-container\">\n              <button className=\"form-tariff-btn btn-back\" onClick={(e) => goBack(e)}>\n                <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                  <IoMdArrowDropleft className=\"icon-back\" />\n                </IconContext.Provider>\n                Go back\n              </button>\n\n              <button className=\"form-tariff-btn btn-next\" onClick={(e) => sendTariff(e)}>\n                Continue\n                <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                  <IoMdArrowDropright className=\"icon-next\" />\n                </IconContext.Provider>\n              </button>\n            </div>\n          </div>\n\n          {showScript ?\n            (\n              <div className=\"helper-tariff\">\n                <div className=\"script-tariff\">\n                  <FormScript />\n                </div>\n\n                <div className=\"assistant-tariff-custom\">\n                  <FormAssistant tips=\"Hello world\" />\n                </div>\n              </div>\n            )\n            :\n            <div style={{ width: '100%' }}>\n              <div className=\"assistant-tariff\">\n                <FormAssistant tips=\"Hello world\" />\n              </div>\n            </div>\n          }\n\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default FormTariffs;\n",["207","208"],"/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormSupply/FormSupply.jsx",["209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252"],"import React, { useState, useEffect, Fragment } from \"react\";\n// Firebase\nimport { db } from \"../../../firebase/firebase\";\nimport firebase from \"firebase/app\";\n// Data Supplier\nimport data_electricity_supplier_id from \"../../../utilities/data_electricity_supplier/data_electricity_supplier_id\";\nimport data_electricity_supplier_name from \"../../../utilities/data_electricity_supplier/data_electricity_supplier_name\";\nimport data_gas_supplier_name from \"../../../utilities/data_gas_supplier/data_gas_supplier_name\";\nimport data_gas_supplier_id from \"../../../utilities/data_gas_supplier/data_gas_supplier_id\";\nimport data_custom_es from '../../../utilities/data_electricity_supplier/data_custom_es';\n// Swal\nimport swal from '@sweetalert/with-react';\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { ImProfile, ImSad } from 'react-icons/im';\nimport { FaRegHandPointer, FaSearchengin, FaCheckSquare, FaTachometerAlt, FaMoneyCheckAlt, FaRegEdit, FaSearch } from 'react-icons/fa';\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\n// CSS\nimport \"./FormSupply.css\";\n\n// Images\nimport BGAS_logo from '../../../assets/img/suppliers/brisith-gas-logo.png';\nimport EDF_logo from '../../../assets/img/suppliers/edf-logo.svg';\nimport EON_logo from '../../../assets/img/suppliers/eon-logo.png';\nimport SSE_logo from '../../../assets/img/suppliers/sse-logo.svg';\nimport Scottish_logo from '../../../assets/img/suppliers/scottish-logo.png';\nimport Npower_logo from '../../../assets/img/suppliers/npower-logo.svg';\n\n// Components\nimport FormScript from '../FormScript/FormScript';\nimport FormAssistant from '../FormAssistant/FormAssistant';\nimport Error from \"../../Error/Error\";\n\nfunction FormSupply({\n  customerAddres,\n  electricityInformation,\n  gasInformation,\n  supplierInformation,\n  useGas,\n  fuel,\n  customerInformation,\n  electricityPaymentType,\n  gasPaymentType,\n  progressBar,\n  showScript,\n  updateShowFormMpanMprn,\n  updateShowFormSupply,\n  updateShowE7,\n  updateSupplierInformation,\n  updateElectricityInformation,\n  updateGasInformation,\n  updateCustomerInformation,\n  updateElectricityPaymentType,\n  updateGasPaymentType,\n  updateFuel,\n  updateProgressBar\n}) {\n  /* STATES */\n  // Edit Electricity Supplier\n  const [editES, updateEditES] = useState(true);\n  const [editMTES, updateEditMTES] = useState(true);\n\n  // Edit Gas Supplier\n  const [editGS, updateEditGS] = useState(true);\n  const [editMTGS, updateEditMTGS] = useState(true);\n\n  // Show Electricity Payment type\n  const [payment_electricity_input, update_payment_electricity_input] = useState(false);\n\n  // Show Gas Payment type\n  const [payment_gas_input, update_payment_gas_input] = useState(false);\n\n  // Customer Supplier\n  const [supplier, updateSupplier] = useState({\n    electricity_supplier: {\n      supplier_id: \"\",\n      meter_type: \"\",\n      mpan_core: \"\",\n      company_name: \"\"\n    },\n    gas_supplier: {\n      current_supplier_id: \"\",\n      meter_mechanism_code: \"\",\n      mprn: \"\",\n      company_name: \"\"\n    }\n  });\n\n  /**-- Error States --*/\n  // Electricity Error\n  const [error_electricity_supplier, update_error_electricity_supplier] = useState(false);\n  const [error_electricity_meter_type, update_error_electricity_meter_type] = useState(false);\n  const [error_electricity_payment, update_error_electricity_payment] = useState(false);\n  // Gas Error\n  const [error_gas_supplier, update_error_gas_supplier] = useState(false);\n  const [error_gas_meter_type, update_error_gas_meter_type] = useState(false);\n  const [error_gas_payment, update_error_gas_payment] = useState(false);\n\n  // Button focus animation - Supplier\n  const [focusAnimationSupplier, setFocusAnimationSupplier] = useState(false);\n\n  // Button focus animation - Meter\n  const [focusAnimationMeter, setFocusAnimationMeter] = useState(false);\n\n  /* FUNCTIONS */\n\n  // // Function to sort the JSON by property\n  // const sortByProperty = (property) => {\n  //   return function (a, b) {\n  //     if (a[property] < b[property])\n  //       return 1;\n  //     else if (a[property] > b[property])\n  //       return -1;\n\n  //     return 0;\n  //   }\n  // }\n\n  // postcode_formatted\n  const postcode_formatted = customerAddres.postcode.replace(/\\s/g, '').trim().toLowerCase();\n  // doornumber_formatted\n  const doornumber_formatted = customerAddres.doornumber.replace(/\\s/g, '').trim().toLowerCase();\n  // uid\n  const uid = `${postcode_formatted}-${doornumber_formatted}`;\n\n  // Scroll to top\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Error smooth scroll\n  useEffect(() => {\n    if (error_electricity_supplier) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n      }\n\n      scroll_to();\n    }\n\n    if (error_electricity_meter_type) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n      }\n\n      scroll_to();\n    }\n\n    if (error_electricity_payment) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n      }\n\n      scroll_to();\n    }\n\n    if (error_gas_supplier) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n      }\n\n      scroll_to();\n    }\n\n    if (error_gas_meter_type) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n      }\n\n      scroll_to();\n    }\n\n    if (error_gas_payment) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n      }\n\n      scroll_to();\n    }\n\n  }, [error_electricity_supplier, error_electricity_meter_type, error_electricity_payment, error_gas_supplier, error_gas_meter_type, error_gas_payment]);\n\n  // Variables\n  const mpan = customerAddres.mpan;\n  const mprn = customerAddres.mprn;\n  const dual_fuel = fuel.dual_fuel_apply;\n  const dual_active = customerInformation.fuel_description.dual_active;\n  const elec_only = customerInformation.fuel_description.elec_only;\n  const gas_only = customerInformation.fuel_description.gas_only;\n  const same_supplier = customerInformation.fuel_description.same_supplier;\n\n  const { meter_type, supplier_mpid, mpan_core } = electricityInformation.MPANDetails;\n\n  const { meter_mechanism_code, current_supplier_id } = gasInformation.dataGas;\n\n  // Validation Electricity Meter Type Supported\n  const meterSupportedElec = () => {\n    const { meter_type } = electricityInformation.MPANDetails;\n    const start_with_S2 = meter_type.startsWith(\"S2\");\n\n    if (meter_type === \"\" || meter_type === \"K\" || meter_type === \"N\" || meter_type === \"NSS\" || meter_type === \"S\" || meter_type === \"S1\" || start_with_S2 === true) {\n      return meter_type;\n    } else {\n      const not_supported = \"NOT\";\n      return not_supported;\n    }\n  };\n\n  let electricity_meter_supported = meterSupportedElec();\n\n  const meterSupportedGas = () => {\n    const { meter_mechanism_code } = gasInformation.dataGas;\n    const start_with_S2 = meter_type.startsWith(\"S2\");\n\n    if (\n      meter_mechanism_code === \"\" ||\n      meter_mechanism_code === \"PP\" ||\n      meter_mechanism_code === \"CR\" ||\n      meter_mechanism_code === \"NS\" ||\n      meter_mechanism_code === \"S1\" ||\n      meter_mechanism_code === \"S2\" ||\n      meter_mechanism_code === \"NOT\" ||\n      start_with_S2 === true\n    ) {\n      return meter_mechanism_code;\n    } else {\n      const not_supported = \"NOT\";\n      return not_supported;\n    }\n  };\n\n  let gas_meter_supported = meterSupportedGas();\n\n  // supplier_id value from MPANDetails\n  const supplier_id = electricityInformation.MPANDetails.supplier_mpid;\n\n  // Function that runs every time the user select electricity supplier\n  const handleChangeES = (e) => {\n    // Selectors\n    const cb_es_1 = document.getElementById('cb_es-1');\n    const cb_es_2 = document.getElementById('cb_es-2');\n    const cb_es_3 = document.getElementById('cb_es-3');\n    const cb_es_4 = document.getElementById('cb_es-4');\n    const cb_es_5 = document.getElementById('cb_es-5');\n    const cb_es_6 = document.getElementById('cb_es-6');\n\n    if ((e.target.value !== \"BGAS\") || (e.target.value !== \"BIZZ\") || (e.target.value !== \"BIZZ\") || (e.target.value !== \"ECOA\") || (e.target.value !== \"ENRD\") || (e.target.value !== \"OGAS\") || (e.target.value !== \"LOND\") || (e.target.value !== \"SEEB\") || (e.target.value !== \"SWEB\") || (e.target.value !== \"ENRD\") || (e.target.value !== \"PGEN\") || (e.target.value !== \"EELC\") || (e.target.value !== \"EENG\") || (e.target.value !== \"EMEB\") || (e.target.value !== \"NORW\")(e.target.value !== \"HYDE\") || (e.target.value !== \"IMPO\") || (e.target.value !== \"SOUT\") || (e.target.value !== \"SWAE\") || (e.target.value !== \"MANW\") || (e.target.value !== \"SPOW\") || (e.target.value !== \"INDE\") || (e.target.value !== \"MIDE\") || (e.target.value !== \"NATP\") || (e.target.value !== \"NEEB\") || (e.target.value !== \"PSUK\") || (e.target.value !== \"YELG\")) {\n      // Uncheck values\n      cb_es_1.checked = false;\n      cb_es_2.checked = false;\n      cb_es_3.checked = false;\n      cb_es_4.checked = false;\n      cb_es_5.checked = false;\n      cb_es_6.checked = false;\n\n      // Take off border style\n      cb_es_1.parentElement.style.border = null;\n      cb_es_2.parentElement.style.border = null;\n      cb_es_3.parentElement.style.border = null;\n      cb_es_4.parentElement.style.border = null;\n      cb_es_5.parentElement.style.border = null;\n      cb_es_6.parentElement.style.border = null;\n      // Check icon\n      cb_es_1.parentElement.children[1].style.opacity = null;\n      cb_es_2.parentElement.children[1].style.opacity = null;\n      cb_es_3.parentElement.children[1].style.opacity = null;\n      cb_es_4.parentElement.children[1].style.opacity = null;\n      cb_es_5.parentElement.children[1].style.opacity = null;\n      cb_es_6.parentElement.children[1].style.opacity = null;\n    }\n\n    // Hidde error message\n    if (e.target.value !== \"\") {\n      update_error_electricity_supplier(false);\n    }\n\n    // Update supplier state\n    updateSupplier({\n      ...supplier,\n      electricity_supplier: {\n        [e.target.name]: e.target.value\n      }\n    });\n\n    // Company name\n    let companyName = data_electricity_supplier_name;\n\n    // Supplier selected\n    const supplier_selected = document.getElementById(\"selected\").value;\n\n    // Update electricity information state\n    updateElectricityInformation({\n      ...electricityInformation,\n      MPANDetails: {\n        mpan_core,\n        meter_type,\n        supplier_mpid: supplier_selected,\n        company_name: companyName[supplier_selected]\n      }\n    });\n  };\n\n  // Function that runs every time the user Select Gas Supplier\n  const handleChangeGS = (e) => {\n\n    // Selectors\n    const cb_gs_1 = document.getElementById('cb_gs-1');\n    const cb_gs_2 = document.getElementById('cb_gs-2');\n    const cb_gs_3 = document.getElementById('cb_gs-3');\n    const cb_gs_4 = document.getElementById('cb_gs-4');\n    const cb_gs_5 = document.getElementById('cb_gs-5');\n    const cb_gs_6 = document.getElementById('cb_gs-6');\n\n    if ((e.target.value !== \"BGT\") || (e.target.value !== \"BGB\") || (e.target.value !== \"BSA\") || (e.target.value !== \"LED\") || (e.target.value !== \"SBR\") || (e.target.value !== \"EDS\") || (e.target.value !== \"LDE\") || (e.target.value !== \"LEI\") || (e.target.value !== \"TUK\") || (e.target.value !== \"EAS\") || (e.target.value !== \"PWR\") || (e.target.value !== \"EMI\") || (e.target.value !== \"PWG\") || (e.target.value !== \"OWN\") || (e.target.value !== \"ATE\") || (e.target.value !== \"EST\") || (e.target.value !== \"SGL\") || (e.target.value !== \"SGY\") || (e.target.value !== \"TUU\") || (e.target.value !== \"EOD\") || (e.target.value !== \"POW\") || (e.target.value !== \"ATL\") || (e.target.value !== \"SHH\") || (e.target.value !== \"SCT\") || (e.target.value !== \"NGD\") || (e.target.value !== \"NPC\") || (e.target.value !== \"NDS\") || (e.target.value !== \"IND\") || (e.target.value !== \"CLT\") || (e.target.value !== \"TCG\") || (e.target.value !== \"NRZ\") || (e.target.value !== \"GUK\") || (e.target.value !== \"YGS\") || (e.target.value !== \"YGS\")) {\n      // Uncheck values\n      cb_gs_1.checked = false;\n      cb_gs_2.checked = false;\n      cb_gs_3.checked = false;\n      cb_gs_4.checked = false;\n      cb_gs_5.checked = false;\n      cb_gs_6.checked = false;\n\n      // take off border style\n      cb_gs_1.parentElement.style.border = null;\n      cb_gs_2.parentElement.style.border = null;\n      cb_gs_3.parentElement.style.border = null;\n      cb_gs_4.parentElement.style.border = null;\n      cb_gs_5.parentElement.style.border = null;\n      cb_gs_6.parentElement.style.border = null;\n      // Check icon\n      cb_gs_1.parentElement.children[1].style.opacity = null;\n      cb_gs_2.parentElement.children[1].style.opacity = null;\n      cb_gs_3.parentElement.children[1].style.opacity = null;\n      cb_gs_4.parentElement.children[1].style.opacity = null;\n      cb_gs_5.parentElement.children[1].style.opacity = null;\n      cb_gs_6.parentElement.children[1].style.opacity = null;\n    }\n\n    // Hidde error message\n    if (e.target.value !== \"\") {\n      update_error_gas_supplier(false);\n    }\n\n    // Destructuring mprn and meter_mechanism_code values\n    const { mprn, meter_mechanism_code } = gasInformation.dataGas;\n\n    // Company name\n    let companyName = data_gas_supplier_name;\n\n    // Update supplier state\n    updateSupplier({\n      ...supplier,\n      gas_supplier: {\n        [e.target.name]: e.target.value\n      }\n    });\n\n    // Selected supplier\n    const supplier_selected = document.getElementById(\"gas_selected\").value;\n\n    // Update gas information state\n    updateGasInformation({\n      ...gasInformation,\n      dataGas: {\n        current_supplier_id: supplier_selected,\n        meter_mechanism_code,\n        mprn,\n        company_name: companyName[supplier_selected]\n      }\n    });\n  };\n\n  // Function that runs every time the user select electricity meter supplier\n  const handleChangeMTES = (e) => {\n    const meter_type = e.target.value;\n    let companyName = data_electricity_supplier_name[supplier_mpid];\n\n    if (e.target.value !== \"\") {\n      update_error_electricity_meter_type(false);\n    }\n\n    if (\n      meter_type === \"K\" ||\n      meter_type === \"N\" ||\n      meter_type === \"NSS\" ||\n      meter_type === \"S\" ||\n      meter_type === \"S1\" ||\n      meter_type.startsWith(\"S2\") === true ||\n      meter_type === \"NOT\"\n    ) {\n      update_payment_electricity_input(true);\n    } else {\n      update_payment_electricity_input(false);\n      update_error_electricity_payment(false);\n    }\n\n    updateElectricityInformation({\n      ...electricityInformation,\n      MPANDetails: {\n        mpan_core,\n        meter_type,\n        supplier_mpid,\n        company_name: companyName\n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      electricity_supplier: {\n        mpan_core,\n        meter_type: meter_type,\n        supplier_mpid,\n        company_name: companyName\n      }\n    });\n  };\n\n  // Function that runs every time the user select gas meter supplier\n  const handleChangeMTGS = (e) => {\n    const meter_mechanism_code = e.target.value;\n    let companyName = data_gas_supplier_name[current_supplier_id];\n\n    if (e.target.value !== \"\") {\n      update_error_gas_meter_type(false);\n    }\n\n    if (\n      meter_mechanism_code === \"PP\" ||\n      meter_mechanism_code === \"CR\" ||\n      meter_mechanism_code === \"NS\" ||\n      meter_mechanism_code === \"S1\" ||\n      meter_mechanism_code.startsWith(\"S2\") === true ||\n      meter_mechanism_code === \"NOT\"\n    ) {\n      update_payment_gas_input(true);\n    } else {\n      update_payment_gas_input(false);\n      update_error_gas_payment(false);\n    }\n\n    updateGasInformation({\n      ...gasInformation,\n      dataGas: {\n        current_supplier_id,\n        meter_mechanism_code,\n        mprn,\n        company_name: companyName\n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      gas_supplier: {\n        current_supplier_id: current_supplier_id,\n        meter_mechanism_code: meter_mechanism_code,\n        mprn: mprn,\n        company_name: companyName\n      }\n    });\n  };\n\n  // Function that runs every time the user select electricity payment type\n  const handleChangePTES = (e) => {\n    // console.log(e.target.value);\n\n    if (e.target.value !== '') {\n\n      let payment_type_electricity_id = document.getElementById('payment_type_electricity').value;\n      let payment_type_electricity_name = '';\n\n      // Monthly direct debit\n      if (payment_type_electricity_id === \"MDD\") {\n        payment_type_electricity_name = 'Monthly direct debit';\n      }\n\n      // Quarterly direct debit\n      if (payment_type_electricity_id === \"QDD\") {\n        payment_type_electricity_name = 'Quarterly direct debit';\n      }\n\n      // Monthly payment on receipt of bill\n      if (payment_type_electricity_id === \"MPB\") {\n        payment_type_electricity_name = 'Monthly payment on receipt of bill';\n      }\n\n      // Monthly payment on receipt of bill\n      if (payment_type_electricity_id === \"QPB\") {\n        payment_type_electricity_name = 'Quarterly payment on receipt of bill';\n      }\n\n      // Monthly payment on receipt of bill\n      if (payment_type_electricity_id === \"PAYG\") {\n        payment_type_electricity_name = 'Pay as you go';\n      }\n\n      // Payment options not available\n      // if (payment_type_electricity_id === \"NA\") {\n      //   payment_type_electricity_name = 'Not available';\n      // }\n\n      // console.log(payment_type_electricity_id);\n\n      updateElectricityPaymentType({\n        ...electricityPaymentType,\n        electricity_payment_type_id: e.target.value,\n        electricity_payment_type_method: payment_type_electricity_name\n      });\n\n      if (dual_fuel) {\n        if (same_supplier) {\n          updateGasPaymentType({\n            ...gasPaymentType,\n            gas_payment_type_id: e.target.value,\n            gas_payment_type_method: payment_type_electricity_name\n          });\n        }\n      }\n\n      // Clear the error when a value is selected\n      update_error_electricity_payment(false);\n    }\n\n  };\n\n  // Function that runs every time the user select electricity payment type\n  const handleChangePTGS = (e) => {\n    // console.log(e.target.value);\n\n    if (e.target.value !== '') {\n\n      let payment_type_gas_id = document.getElementById('payment_type_gas').value;\n      let payment_type_gas_name = '';\n\n      // Monthly direct debit\n      if (payment_type_gas_id === \"MDD\") {\n        payment_type_gas_name = 'Monthly direct debit';\n      }\n\n      // Quarterly direct debit\n      if (payment_type_gas_id === \"QDD\") {\n        payment_type_gas_name = 'Quarterly direct debit';\n      }\n\n      // Monthly payment on receipt of bill\n      if (payment_type_gas_id === \"MPB\") {\n        payment_type_gas_name = 'Monthly payment on receipt of bill';\n      }\n\n      // Monthly payment on receipt of bill\n      if (payment_type_gas_id === \"QPB\") {\n        payment_type_gas_name = 'Quarterly payment on receipt of bill';\n      }\n\n      // Monthly payment on receipt of bill\n      if (payment_type_gas_id === \"PAYG\") {\n        payment_type_gas_name = 'Pay as you go';\n      }\n\n      // Payment options not available\n      // if (payment_type_gas_id === \"NA\") {\n      //   payment_type_gas_name = 'Not available';\n      // }\n\n      // console.log(payment_type_gas_id);\n\n      updateGasPaymentType({\n        ...gasPaymentType,\n        gas_payment_type_id: e.target.value,\n        gas_payment_type_method: payment_type_gas_name\n      });\n\n      // Clear the error when a value is selected\n      update_error_gas_payment(false);\n    }\n\n  };\n\n  // Function to save name of electricity supplier\n  useEffect(() => {\n    let companyName = data_electricity_supplier_name[supplier_mpid];\n\n    updateSupplier({\n      ...supplier,\n      electricity_supplier: {\n        supplier_id,\n        meter_type,\n        mpan_core: mpan,\n        company_name: companyName \n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      electricity_supplier: {\n        mpan_core,\n        meter_type,\n        supplier_mpid,\n        company_name: companyName\n      }\n    });\n\n    updateElectricityInformation({\n      ...electricityInformation,\n      MPANDetails: {\n        mpan_core,\n        meter_type,\n        supplier_mpid,\n        company_name: companyName\n      }\n    });\n  }, [supplier_id]);\n\n  // Function to save name of gas supplier\n  useEffect(() => {\n    let companyName = data_gas_supplier_name[current_supplier_id];\n\n    updateSupplier({\n      ...supplier,\n      gas_supplier: {\n        current_supplier_id: current_supplier_id,\n        meter_mechanism_code: meter_mechanism_code,\n        mprn: mprn,\n        company_name: companyName\n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      gas_supplier: {\n        current_supplier_id: current_supplier_id,\n        meter_mechanism_code: meter_mechanism_code,\n        mprn: mprn,\n        company_name: companyName\n      }\n    });\n\n    updateGasInformation({\n      ...gasInformation,\n      dataGas: {\n        current_supplier_id,\n        meter_mechanism_code,\n        mprn,\n        company_name: companyName\n      }\n    });\n  }, [current_supplier_id]);\n\n  // Function to save value every time click in editES button\n  useEffect(() => {\n    // Take value of company\n    let GasCompanyName = data_gas_supplier_name[current_supplier_id];\n    let ElectricityCompanyName = data_electricity_supplier_name[supplier_mpid];\n\n    updateSupplier({\n      ...supplier,\n      electricity_supplier: {\n        supplier_id: supplier_mpid,\n        meter_type: meter_type,\n        mpan_core: mpan,\n        company_name: ElectricityCompanyName\n      },\n      gas_supplier: {\n        current_supplier_id: current_supplier_id,\n        meter_mechanism_code: meter_mechanism_code,\n        mprn: mprn,\n        company_name: GasCompanyName\n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      electricity_supplier: {\n        mpan_core: mpan,\n        meter_type: meter_type,\n        supplier_mpid: supplier_mpid,\n        company_name: ElectricityCompanyName\n      },\n\n      gas_supplier: {\n        current_supplier_id: current_supplier_id,\n        meter_mechanism_code: meter_mechanism_code,\n        mprn: mprn,\n        company_name: GasCompanyName\n      }\n    });\n\n    updateElectricityInformation({\n      ...electricityInformation,\n      MPANDetails: {\n        mpan_core: mpan,\n        meter_type: meter_type,\n        supplier_mpid: supplier_mpid,\n        company_name: ElectricityCompanyName\n      }\n    });\n  }, [editES]);\n\n  // Function to save value every time click in editGS button\n  useEffect(() => {\n    // Take value of company\n    let GasCompanyName = data_gas_supplier_name[current_supplier_id];\n    let ElectricityCompanyName = data_electricity_supplier_name[supplier_mpid];\n\n    updateSupplier({\n      ...supplier,\n      electricity_supplier: {\n        supplier_id,\n        meter_type,\n        mpan_core: mpan,\n        company_name: ElectricityCompanyName\n      },\n      gas_supplier: {\n        current_supplier_id: current_supplier_id,\n        meter_mechanism_code: meter_mechanism_code,\n        mprn: mprn,\n        company_name: GasCompanyName\n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      electricity_supplier: {\n        mpan_core: mpan,\n        meter_type: meter_type,\n        supplier_mpid: supplier_mpid,\n        company_name: ElectricityCompanyName\n      },\n\n      gas_supplier: {\n        current_supplier_id: current_supplier_id,\n        meter_mechanism_code: meter_mechanism_code,\n        mprn: mprn,\n        company_name: GasCompanyName\n      }\n    });\n\n    updateGasInformation({\n      ...gasInformation,\n      dataGas: {\n        current_supplier_id: current_supplier_id,\n        meter_mechanism_code: meter_mechanism_code,\n        mprn: mprn,\n        company_name: GasCompanyName\n      }\n    });\n  }, [editGS]);\n\n  // Function to show update_payment_electricity_input if it's comes with a value\n  useEffect(() => {\n    if (meter_type !== '') {\n      update_payment_electricity_input(true);\n    }\n\n  }, [electricity_meter_supported]);\n\n  // Function to show update_payment_gas_input if it's comes with a value\n  useEffect(() => {\n    if (meter_mechanism_code !== '') {\n      update_payment_gas_input(true);\n    }\n\n  }, [gas_meter_supported]);\n\n  /**-- Checkbox Section -- */\n\n  /**-- Electricity Checkboxes --*/\n  const selectOnlyThisES = (e) => {\n    for (var i = 1; i <= 6; i++) {\n      document.getElementById(\"cb_es-\" + i).checked = false;\n      document.getElementById(\"cb_es-\" + i).parentElement.style.border = null;\n    }\n\n    // Give a border styles to the element selected\n    document.getElementById(e.target.id).parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n\n    // Show checkboxes when it's select\n    document.getElementById(e.target.id).parentElement.children[1].style.opacity = \"1\";\n\n    let checkbox = document.getElementById(e.target.id);\n    let checkbox_selected = checkbox.checked = true;\n\n    return checkbox_selected;\n  }\n\n  // onChange event for electricity checkbox - Update the information in the states\n  const handleCheckboxES = (e) => {\n\n    // Hidde error message\n    if ((e.target.value === \"BGAS\") || (e.target.value === \"BIZZ\") || (e.target.value === \"BIZZ\") || (e.target.value === \"ECOA\") || (e.target.value === \"ENRD\") || (e.target.value === \"OGAS\")) {\n      update_error_electricity_supplier(false);\n    }\n\n    if ((e.target.value === \"LOND\") || (e.target.value === \"SEEB\") || (e.target.value === \"SWEB\") || (e.target.value === \"ENRD\")) {\n      update_error_electricity_supplier(false);\n    }\n\n    if ((e.target.value === \"PGEN\") || (e.target.value === \"EELC\") || (e.target.value === \"EENG\") || (e.target.value === \"EMEB\") || (e.target.value === \"NORW\")) {\n      update_error_electricity_supplier(false);\n    }\n\n    if ((e.target.value === \"HYDE\") || (e.target.value === \"IMPO\") || (e.target.value === \"SOUT\") || (e.target.value === \"SWAE\")) {\n      update_error_electricity_supplier(false);\n    }\n\n    if ((e.target.value === \"MANW\") || (e.target.value === \"SPOW\")) {\n      update_error_electricity_supplier(false);\n    }\n\n    if ((e.target.value === \"INDE\") || (e.target.value === \"MIDE\") || (e.target.value === \"NATP\") || (e.target.value === \"NEEB\") || (e.target.value === \"PSUK\") || (e.target.value === \"YELG\")) {\n      update_error_electricity_supplier(false);\n    }\n\n    /** Update states */\n\n    updateSupplier({\n      ...supplier,\n      electricity_supplier: {\n        supplier_id: e.target.value,\n        meter_type,\n        mpan_core\n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      electricity_supplier: {\n        mpan_core,\n        meter_type,\n        supplier_mpid: e.target.value\n      }\n    });\n\n    updateElectricityInformation({\n      ...electricityInformation,\n      MPANDetails: {\n        mpan_core,\n        meter_type,\n        supplier_mpid: e.target.value\n      }\n    });\n  }\n\n  // Function to load the current electricity checkbox selected if it comes with data from the API\n  useEffect(() => {\n    if ((elec_only) || (same_supplier === false) && (gas_only === false)) {\n      // Selectors\n      const cb_es_1 = document.getElementById('cb_es-1');\n      const cb_es_2 = document.getElementById('cb_es-2');\n      const cb_es_3 = document.getElementById('cb_es-3');\n      const cb_es_4 = document.getElementById('cb_es-4');\n      const cb_es_5 = document.getElementById('cb_es-5');\n      const cb_es_6 = document.getElementById('cb_es-6');\n\n      //British Gas Selected\n      if ((supplier_id === \"BGAS\") || (supplier_id === \"BIZZ\") || (supplier_id === \"ECOA\") || (supplier_id === \"ENRD\") || (supplier_id === \"OGAS\")) {\n        // Activate British Gas Checkbox and border\n        cb_es_1.checked = true;\n        cb_es_1.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_es_1.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_es_2.checked = false;\n        cb_es_3.checked = false;\n        cb_es_4.checked = false;\n        cb_es_5.checked = false;\n        cb_es_6.checked = false;\n\n        // Desactivate the border and check icon in checkbox NOT selected\n        cb_es_2.parentElement.style.border = null;\n        cb_es_3.parentElement.style.border = null;\n        cb_es_4.parentElement.style.border = null;\n        cb_es_5.parentElement.style.border = null;\n        cb_es_6.parentElement.style.border = null;\n        // Check icon\n        cb_es_2.parentElement.children[1].style.opacity = null;\n        cb_es_3.parentElement.children[1].style.opacity = null;\n        cb_es_4.parentElement.children[1].style.opacity = null;\n        cb_es_5.parentElement.children[1].style.opacity = null;\n        cb_es_6.parentElement.children[1].style.opacity = null;\n      }\n\n      // EDF Selected\n      if ((supplier_id === \"LOND\") || (supplier_id === \"SEEB\") || (supplier_id === \"SWEB\")) {\n        // Activate EDF Checkbox and border\n        cb_es_2.checked = true;\n        cb_es_2.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_es_2.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_es_1.checked = false;\n        cb_es_3.checked = false;\n        cb_es_4.checked = false;\n        cb_es_5.checked = false;\n        cb_es_6.checked = false;\n\n        // Desactivate the border and check icon in checkbox NOT selected\n        cb_es_1.parentElement.style.border = null;\n        cb_es_3.parentElement.style.border = null;\n        cb_es_4.parentElement.style.border = null;\n        cb_es_5.parentElement.style.border = null;\n        cb_es_6.parentElement.style.border = null;\n        // Check icon\n        cb_es_1.parentElement.children[1].style.opacity = null;\n        cb_es_3.parentElement.children[1].style.opacity = null;\n        cb_es_4.parentElement.children[1].style.opacity = null;\n        cb_es_5.parentElement.children[1].style.opacity = null;\n        cb_es_6.parentElement.children[1].style.opacity = null;\n      }\n\n      // EON Selected\n      if ((supplier_id === \"PGEN\") || (supplier_id === \"EELC\") || (supplier_id === \"EENG\") || (supplier_id === \"EMEB\") || (supplier_id === \"NORW\")) {\n        // Activate EON Checkbox and border\n        cb_es_3.checked = true;\n        cb_es_3.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_es_3.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_es_1.checked = false;\n        cb_es_2.checked = false;\n        cb_es_4.checked = false;\n        cb_es_5.checked = false;\n        cb_es_6.checked = false;\n\n        // Desactivate the border and check icon in checkbox NOT selected\n        cb_es_1.parentElement.style.border = null;\n        cb_es_2.parentElement.style.border = null;\n        cb_es_4.parentElement.style.border = null;\n        cb_es_5.parentElement.style.border = null;\n        cb_es_6.parentElement.style.border = null;\n        // Check icon\n        cb_es_1.parentElement.children[1].style.opacity = null;\n        cb_es_2.parentElement.children[1].style.opacity = null;\n        cb_es_4.parentElement.children[1].style.opacity = null;\n        cb_es_5.parentElement.children[1].style.opacity = null;\n        cb_es_6.parentElement.children[1].style.opacity = null;\n      }\n\n      // SSE Selected\n      if ((supplier_id === \"HYDE\") || (supplier_id === \"IMPO\") || (supplier_id === \"SOUT\") || (supplier_id === \"SWAE\")) {\n        // Activate SSE Checkbox and border\n        cb_es_4.checked = true;\n        cb_es_4.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_es_4.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_es_1.checked = false;\n        cb_es_2.checked = false;\n        cb_es_3.checked = false;\n        cb_es_5.checked = false;\n        cb_es_6.checked = false;\n\n        // Desactivate the border and check icon in checkbox NOT selected\n        cb_es_1.parentElement.style.border = null;\n        cb_es_2.parentElement.style.border = null;\n        cb_es_3.parentElement.style.border = null;\n        cb_es_5.parentElement.style.border = null;\n        cb_es_6.parentElement.style.border = null;\n        // Check icon\n        cb_es_1.parentElement.children[1].style.opacity = null;\n        cb_es_2.parentElement.children[1].style.opacity = null;\n        cb_es_3.parentElement.children[1].style.opacity = null;\n        cb_es_5.parentElement.children[1].style.opacity = null;\n        cb_es_6.parentElement.children[1].style.opacity = null;\n      }\n\n      // Scottish power selected\n      if ((supplier_id === \"MANW\") || (supplier_id === \"SPOW\")) {\n        // Activate Scottish power Checkbox and border\n        cb_es_5.checked = true;\n        cb_es_5.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_es_5.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_es_1.checked = false;\n        cb_es_2.checked = false;\n        cb_es_3.checked = false;\n        cb_es_4.checked = false;\n        cb_es_6.checked = false;\n\n        // Desactivate the border and check icon in checkbox NOT selected\n        cb_es_1.parentElement.style.border = null;\n        cb_es_2.parentElement.style.border = null;\n        cb_es_3.parentElement.style.border = null;\n        cb_es_4.parentElement.style.border = null;\n        cb_es_6.parentElement.style.border = null;\n        // Check icon\n        cb_es_1.parentElement.children[1].style.opacity = null;\n        cb_es_2.parentElement.children[1].style.opacity = null;\n        cb_es_3.parentElement.children[1].style.opacity = null;\n        cb_es_4.parentElement.children[1].style.opacity = null;\n        cb_es_6.parentElement.children[1].style.opacity = null;\n      }\n\n      // Npower Selected\n      if ((supplier_id === \"INDE\") || (supplier_id === \"MIDE\") || (supplier_id === \"NATP\") || (supplier_id === \"NEEB\") || (supplier_id === \"PSUK\") || (supplier_id === \"YELG\")) {\n        // Activate Npower Checkbox and border\n        cb_es_6.checked = true;\n        cb_es_6.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_es_6.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_es_1.checked = false;\n        cb_es_2.checked = false;\n        cb_es_3.checked = false;\n        cb_es_4.checked = false;\n        cb_es_5.checked = false;\n\n        // Desactivate the border and check icon in checkbox NOT selected\n        cb_es_1.parentElement.style.border = null;\n        cb_es_2.parentElement.style.border = null;\n        cb_es_3.parentElement.style.border = null;\n        cb_es_4.parentElement.style.border = null;\n        cb_es_5.parentElement.style.border = null;\n        // Check icon\n        cb_es_1.parentElement.children[1].style.opacity = null;\n        cb_es_2.parentElement.children[1].style.opacity = null;\n        cb_es_3.parentElement.children[1].style.opacity = null;\n        cb_es_4.parentElement.children[1].style.opacity = null;\n        cb_es_5.parentElement.children[1].style.opacity = null;\n      }\n    }\n  }, [supplier_id]);\n\n  /**-- Gas checkboxes --*/\n  const selectOnlyThisGS = (e) => {\n    for (var i = 1; i <= 6; i++) {\n      document.getElementById(\"cb_gs-\" + i).checked = false;\n      document.getElementById(\"cb_gs-\" + i).parentElement.style.border = null;\n    }\n\n    // Give a border styles to the element selected\n    document.getElementById(e.target.id).parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n\n    // Show checkboxes when it's select\n    document.getElementById(e.target.id).parentElement.children[1].style.opacity = \"1\";\n\n    let checkbox = document.getElementById(e.target.id);\n    let checkbox_selected = checkbox.checked = true;\n\n    return checkbox_selected;\n  }\n\n  // onChange event for gas checkbox - Update the information in the states\n  const handleCheckboxGS = (e) => {\n    // Hidde error message\n    if ((e.target.value === \"BGT\") || (e.target.value === \"BGB\") || (e.target.value === \"BSA\")) {\n      update_error_gas_supplier(false);\n    }\n\n    if ((e.target.value === \"LED\") || (e.target.value === \"SBR\") || (e.target.value === \"EDS\") || (e.target.value === \"LDE\") || (e.target.value === \"LEI\")) {\n      update_error_gas_supplier(false);\n    }\n\n    if ((e.target.value === \"TUK\") || (e.target.value === \"EAS\") || (e.target.value === \"PWR\") || (e.target.value === \"EMI\") || (e.target.value === \"PWG\") || (e.target.value === \"OWN\") || (e.target.value === \"ATE\") || (e.target.value === \"EST\") || (e.target.value === \"SGL\") || (e.target.value === \"SGY\") || (e.target.value === \"TUU\") || (e.target.value === \"EOD\") || (e.target.value === \"POW\")) {\n      update_error_gas_supplier(false);\n    }\n\n    if (e.target.value === \"ATL\" || e.target.value === \"SHH\") {\n      update_error_gas_supplier(false);\n    }\n\n    if (e.target.value === \"SCT\") {\n      update_error_gas_supplier(false);\n    }\n\n    if ((e.target.value === \"NGD\") || (e.target.value === \"NPC\") || (e.target.value === \"NDS\") || (e.target.value === \"IND\") || (e.target.value === \"CLT\") || (e.target.value === \"TCG\") || (e.target.value === \"NRZ\") || (e.target.value === \"GUK\") || (e.target.value === \"YGS\") || (e.target.value === \"YKE\")) {\n      update_error_gas_supplier(false);\n    }\n\n    /** Update states */\n    updateSupplier({\n      ...supplier,\n      gas_supplier: {\n        current_supplier_id: e.target.value,\n        meter_mechanism_code,\n        mprn\n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      gas_supplier: {\n        current_supplier_id: e.target.value,\n        meter_mechanism_code,\n        mprn\n      }\n    });\n\n    updateGasInformation({\n      ...gasInformation,\n      dataGas: {\n        current_supplier_id: e.target.value,\n        meter_mechanism_code,\n        mprn\n      }\n    });\n  }\n\n  // Function to load the current gas checkbox selected if it comes with data from the API\n  useEffect(() => {\n    if ((gas_only) || (same_supplier === false) && (elec_only === false)) {\n      // Selectors\n      const cb_gs_1 = document.getElementById('cb_gs-1');\n      const cb_gs_2 = document.getElementById('cb_gs-2');\n      const cb_gs_3 = document.getElementById('cb_gs-3');\n      const cb_gs_4 = document.getElementById('cb_gs-4');\n      const cb_gs_5 = document.getElementById('cb_gs-5');\n      const cb_gs_6 = document.getElementById('cb_gs-6');\n\n      //British Gas Selected\n      if ((current_supplier_id === \"BGT\") || (current_supplier_id === \"BGB\") || (current_supplier_id === \"BSA\")) {\n        // Activate British Gas Checkbox and border\n        cb_gs_1.checked = true;\n        cb_gs_1.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_gs_1.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_gs_2.checked = false;\n        cb_gs_3.checked = false;\n        cb_gs_4.checked = false;\n        cb_gs_5.checked = false;\n        cb_gs_6.checked = false;\n\n        // Desactivate the border and check icon in checkbox NOT selected\n        cb_gs_2.parentElement.style.border = null;\n        cb_gs_3.parentElement.style.border = null;\n        cb_gs_4.parentElement.style.border = null;\n        cb_gs_5.parentElement.style.border = null;\n        cb_gs_6.parentElement.style.border = null;\n        // Check icon\n        cb_gs_2.parentElement.children[1].style.opacity = null;\n        cb_gs_3.parentElement.children[1].style.opacity = null;\n        cb_gs_4.parentElement.children[1].style.opacity = null;\n        cb_gs_5.parentElement.children[1].style.opacity = null;\n        cb_gs_6.parentElement.children[1].style.opacity = null;\n      }\n\n      // EDF Selected\n      if ((current_supplier_id === \"LED\") || (current_supplier_id === \"SBR\") || (current_supplier_id === \"EDS\") || (current_supplier_id === \"LDE\") || (current_supplier_id === \"LEI\")) {\n        // Activate EDF Checkbox and border\n        cb_gs_2.checked = true;\n        cb_gs_2.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_gs_2.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_gs_1.checked = false;\n        cb_gs_3.checked = false;\n        cb_gs_4.checked = false;\n        cb_gs_5.checked = false;\n        cb_gs_6.checked = false;\n\n        // Desactivate the border and chech icon in checkbox NOT selected\n        cb_gs_1.parentElement.style.border = null;\n        cb_gs_3.parentElement.style.border = null;\n        cb_gs_4.parentElement.style.border = null;\n        cb_gs_5.parentElement.style.border = null;\n        cb_gs_6.parentElement.style.border = null;\n        // Check icon\n        cb_gs_1.parentElement.children[1].style.opacity = null;\n        cb_gs_3.parentElement.children[1].style.opacity = null;\n        cb_gs_4.parentElement.children[1].style.opacity = null;\n        cb_gs_5.parentElement.children[1].style.opacity = null;\n        cb_gs_6.parentElement.children[1].style.opacity = null;\n      }\n\n      // EON Selected\n      if ((current_supplier_id === \"TUK\") || (current_supplier_id === \"EAS\") || (current_supplier_id === \"PWR\") || (current_supplier_id === \"EMI\") || (current_supplier_id === \"PWG\") || (current_supplier_id === \"OWN\") || (current_supplier_id === \"ATE\") || (current_supplier_id === \"EST\") || (current_supplier_id === \"SGL\") || (current_supplier_id === \"SGY\") || (current_supplier_id === \"TUU\") || (current_supplier_id === \"EOD\") || (current_supplier_id === \"POW\")) {\n        // Activate EON Checkbox and border\n        cb_gs_3.checked = true;\n        cb_gs_3.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_gs_3.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_gs_1.checked = false;\n        cb_gs_2.checked = false;\n        cb_gs_4.checked = false;\n        cb_gs_5.checked = false;\n        cb_gs_6.checked = false;\n\n        // Desactivate the border and check icon in checkbox NOT selected\n        cb_gs_1.parentElement.style.border = null;\n        cb_gs_2.parentElement.style.border = null;\n        cb_gs_4.parentElement.style.border = null;\n        cb_gs_5.parentElement.style.border = null;\n        cb_gs_6.parentElement.style.border = null;\n        // Check icon\n        cb_gs_1.parentElement.children[1].style.opacity = null;\n        cb_gs_2.parentElement.children[1].style.opacity = null;\n        cb_gs_4.parentElement.children[1].style.opacity = null;\n        cb_gs_5.parentElement.children[1].style.opacity = null;\n        cb_gs_6.parentElement.children[1].style.opacity = null;\n      }\n\n      // SSE Selected\n      if ((current_supplier_id === \"ATL\") || (current_supplier_id === \"SHH\")) {\n        // Activate SSE Checkbox and border\n        cb_gs_4.checked = true;\n        cb_gs_4.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_gs_4.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_gs_1.checked = false;\n        cb_gs_2.checked = false;\n        cb_gs_3.checked = false;\n        cb_gs_5.checked = false;\n        cb_gs_6.checked = false;\n\n        // Desactivate the border and checkicon in checkbox NOT selected\n        cb_gs_1.parentElement.style.border = null;\n        cb_gs_2.parentElement.style.border = null;\n        cb_gs_3.parentElement.style.border = null;\n        cb_gs_5.parentElement.style.border = null;\n        cb_gs_6.parentElement.style.border = null;\n        // Check icon\n        cb_gs_1.parentElement.children[1].style.opacity = null;\n        cb_gs_2.parentElement.children[1].style.opacity = null;\n        cb_gs_3.parentElement.children[1].style.opacity = null;\n        cb_gs_5.parentElement.children[1].style.opacity = null;\n        cb_gs_6.parentElement.children[1].style.opacity = null;\n      }\n\n      // Scottish power selected\n      if ((current_supplier_id === \"SCT\")) {\n        // Activate Scottish power Checkbox and border\n        cb_gs_5.checked = true;\n        cb_gs_5.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_gs_5.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_gs_1.checked = false;\n        cb_gs_2.checked = false;\n        cb_gs_3.checked = false;\n        cb_gs_4.checked = false;\n        cb_gs_6.checked = false;\n\n        // Desactivate the border check icon in checkbox NOT selected\n        cb_gs_1.parentElement.style.border = null;\n        cb_gs_2.parentElement.style.border = null;\n        cb_gs_3.parentElement.style.border = null;\n        cb_gs_4.parentElement.style.border = null;\n        cb_gs_6.parentElement.style.border = null;\n        // Check icon\n        cb_gs_1.parentElement.children[1].style.opacity = null;\n        cb_gs_2.parentElement.children[1].style.opacity = null;\n        cb_gs_3.parentElement.children[1].style.opacity = null;\n        cb_gs_4.parentElement.children[1].style.opacity = null;\n        cb_gs_6.parentElement.children[1].style.opacity = null;\n      }\n\n      // Npower Selected\n      if ((current_supplier_id === \"NGD\") || (current_supplier_id === \"NPC\") || (current_supplier_id === \"NDS\") || (current_supplier_id === \"IND\") || (current_supplier_id === \"CLT\") || (current_supplier_id === \"TCG\") || (current_supplier_id === \"NRZ\") || (current_supplier_id === \"GUK\") || (current_supplier_id === \"YGS\") || (current_supplier_id === \"YKE\")) {\n        // Activate Npower Checkbox and border\n        cb_gs_6.checked = true;\n        cb_gs_6.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n        cb_gs_6.parentElement.children[1].style.opacity = \"1\";\n\n        // Desactivate the rest of checkboxes\n        cb_gs_1.checked = false;\n        cb_gs_2.checked = false;\n        cb_gs_3.checked = false;\n        cb_gs_4.checked = false;\n        cb_gs_5.checked = false;\n\n        // Desactivate the border and check icon in checkbox NOT selected\n        cb_gs_1.parentElement.style.border = null;\n        cb_gs_2.parentElement.style.border = null;\n        cb_gs_3.parentElement.style.border = null;\n        cb_gs_4.parentElement.style.border = null;\n        cb_gs_5.parentElement.style.border = null;\n        // Check icon\n        cb_gs_1.parentElement.children[1].style.opacity = null;\n        cb_gs_2.parentElement.children[1].style.opacity = null;\n        cb_gs_3.parentElement.children[1].style.opacity = null;\n        cb_gs_4.parentElement.children[1].style.opacity = null;\n        cb_gs_5.parentElement.children[1].style.opacity = null;\n      }\n    }\n  }, [current_supplier_id]);\n\n  const handleClickES = (e) => {\n    e.preventDefault();\n\n    // Hidde error\n    update_error_electricity_supplier(false);\n\n    // Selectors checboxes\n    const cb_es_1 = document.getElementById('cb_es-1');\n    const cb_es_2 = document.getElementById('cb_es-2');\n    const cb_es_3 = document.getElementById('cb_es-3');\n    const cb_es_4 = document.getElementById('cb_es-4');\n    const cb_es_5 = document.getElementById('cb_es-5');\n    const cb_es_6 = document.getElementById('cb_es-6');\n\n    // Uncheck values checkboxes\n    cb_es_1.checked = false;\n    cb_es_2.checked = false;\n    cb_es_3.checked = false;\n    cb_es_4.checked = false;\n    cb_es_5.checked = false;\n    cb_es_6.checked = false;\n\n    // Take off border style checkboxes\n    cb_es_1.parentElement.style.border = null;\n    cb_es_2.parentElement.style.border = null;\n    cb_es_3.parentElement.style.border = null;\n    cb_es_4.parentElement.style.border = null;\n    cb_es_5.parentElement.style.border = null;\n    cb_es_6.parentElement.style.border = null;\n    // Check icon\n    cb_es_1.parentElement.children[1].style.opacity = null;\n    cb_es_2.parentElement.children[1].style.opacity = null;\n    cb_es_3.parentElement.children[1].style.opacity = null;\n    cb_es_4.parentElement.children[1].style.opacity = null;\n    cb_es_5.parentElement.children[1].style.opacity = null;\n    cb_es_6.parentElement.children[1].style.opacity = null;\n\n    // Take value of company\n    let ElectricityCompanyName = data_electricity_supplier_name['IDK'];\n\n    updateSupplier({\n      ...supplier,\n      electricity_supplier: {\n        supplier_id: 'IDK',\n        meter_type,\n        mpan_core: mpan,\n        company_name: ElectricityCompanyName\n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      electricity_supplier: {\n        mpan_core: mpan,\n        meter_type,\n        supplier_mpid: 'IDK',\n        company_name: ElectricityCompanyName\n      }\n    });\n\n    updateElectricityInformation({\n      ...electricityInformation,\n      MPANDetails: {\n        mpan_core: mpan,\n        meter_type,\n        supplier_mpid: 'IDK',\n        company_name: ElectricityCompanyName\n      }\n    });\n  }\n\n  const handleClickGS = (e) => {\n    e.preventDefault();\n\n    // Hidde error\n    update_error_gas_supplier(false);\n\n    // Selectors checboxes\n    const cb_gs_1 = document.getElementById('cb_gs-1');\n    const cb_gs_2 = document.getElementById('cb_gs-2');\n    const cb_gs_3 = document.getElementById('cb_gs-3');\n    const cb_gs_4 = document.getElementById('cb_gs-4');\n    const cb_gs_5 = document.getElementById('cb_gs-5');\n    const cb_gs_6 = document.getElementById('cb_gs-6');\n\n    // Uncheck values checkboxes\n    cb_gs_1.checked = false;\n    cb_gs_2.checked = false;\n    cb_gs_3.checked = false;\n    cb_gs_4.checked = false;\n    cb_gs_5.checked = false;\n    cb_gs_6.checked = false;\n\n    // Take off border style checkboxes\n    cb_gs_1.parentElement.style.border = null;\n    cb_gs_2.parentElement.style.border = null;\n    cb_gs_3.parentElement.style.border = null;\n    cb_gs_4.parentElement.style.border = null;\n    cb_gs_5.parentElement.style.border = null;\n    cb_gs_6.parentElement.style.border = null;\n    // Check icon\n    cb_gs_1.parentElement.children[1].style.opacity = null;\n    cb_gs_2.parentElement.children[1].style.opacity = null;\n    cb_gs_3.parentElement.children[1].style.opacity = null;\n    cb_gs_4.parentElement.children[1].style.opacity = null;\n    cb_gs_5.parentElement.children[1].style.opacity = null;\n    cb_gs_6.parentElement.children[1].style.opacity = null;\n\n    // Take value of company\n    let GasCompanyName = data_gas_supplier_name['IDK'];\n\n    updateSupplier({\n      ...supplier,\n      gas_supplier: {\n        current_supplier_id: 'IDK',\n        meter_mechanism_code,\n        mprn,\n        company_name: GasCompanyName\n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      gas_supplier: {\n        current_supplier_id: 'IDK',\n        meter_mechanism_code,\n        mprn,\n        company_name: GasCompanyName\n      }\n    });\n\n    updateGasInformation({\n      ...gasInformation,\n      dataGas: {\n        current_supplier_id: 'IDK',\n        meter_mechanism_code,\n        mprn,\n        company_name: GasCompanyName\n      }\n    });\n  }\n\n  // Search Electrical Supplier\n  const handleSearchES = (e) => {\n\n    let search_option = (search_input, data_es) => {\n\n      // Removing duplicate values\n      const seen = new Set();\n      const filteredArr = data_es.filter(el => {\n        const duplicate = seen.has(el.company_name);\n        seen.add(el.company_name);\n        return !duplicate;\n      });\n\n      // Second step - Filter -> Look for the first step below\n      let filter_es;\n      // Filter by search_input \n      filter_es = filteredArr.filter((option) => {\n\n        let options = option.company_name.toLowerCase().includes(search_input);\n        return (\n          options\n        );\n      });\n\n      // Print options from filter_es \n      let results_es = filter_es.map((data) => (\n        <Fragment key={data.supplier_id + '_search_key'}>\n          <input type=\"radio\" id={data.supplier_id + '_search_filtered'} name=\"search_es\" value={data.supplier_id} />\n          <label>{data.company_name} - <span style={{ color: 'var(--text_dark)' }}>Supplier ID:</span> {data.supplier_id}</label><br />\n        </Fragment>\n      ));\n\n      // Validation - No results found\n      if (filter_es.length <= 0) {\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            }\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImSad />\n              </IconContext.Provider>\n              <h1>No results found...</h1>\n            </div>\n          )\n        });\n\n        return;\n      }\n\n      swal({\n        closeOnClickOutside: false,\n        buttons: {\n          cancel: {\n            text: \"Go back\",\n            value: false,\n            visible: true\n          },\n          confirm: \"Select\"\n        },\n        content: (\n          <div className=\"swal-text-custom\">\n            <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n              <FaRegHandPointer />\n            </IconContext.Provider>\n\n            <h1>Results...</h1>\n            <div className=\"swal-custom-container\">\n              {results_es}\n            </div>\n          </div>\n        )\n      }).then(result => {\n        if (result !== true) {\n          return;\n        }\n\n        let checkedValues = document.getElementsByName('search_es');\n\n        for (var i = 0, length = checkedValues.length; i < length; i++) {\n          if (checkedValues[i].checked) {\n            const checkedValue = checkedValues[i].value;\n\n            let companyName = data_electricity_supplier_name[checkedValue];\n\n            // Selectors\n            const cb_es_1 = document.getElementById('cb_es-1');\n            const cb_es_2 = document.getElementById('cb_es-2');\n            const cb_es_3 = document.getElementById('cb_es-3');\n            const cb_es_4 = document.getElementById('cb_es-4');\n            const cb_es_5 = document.getElementById('cb_es-5');\n            const cb_es_6 = document.getElementById('cb_es-6');\n\n            /** Evaluate and deactivate Electricity checkboxes supplier when selecting a not checkbox supplier */\n            //British Gas not selected\n            if (((checkedValue === \"BGAS\") || (checkedValue === \"BIZZ\") || (checkedValue === \"ECOA\") || (checkedValue === \"ENRD\") || (checkedValue === \"OGAS\")) !== checkedValue) {\n              // Deactivate British Gas checkbox\n              cb_es_1.checked = false;\n              // Desactivate the border in British Gas checkbox\n              cb_es_1.parentElement.style.border = null;\n              cb_es_1.parentElement.children[1].style.opacity = null;\n            }\n\n            // EDF not selected\n            if (((checkedValue === \"LOND\") || (checkedValue === \"SEEB\") || (checkedValue === \"SWEB\")) !== checkedValue) {\n              // Desactivate EDF Checkbox and border\n              cb_es_2.checked = false;\n              // Desactivate the border in EDF checkbox\n              cb_es_2.parentElement.style.border = null;\n              cb_es_2.parentElement.children[1].style.opacity = null;\n            }\n\n            // EON not selected\n            if (((checkedValue === \"PGEN\") || (checkedValue === \"EELC\") || (checkedValue === \"EENG\") || (checkedValue === \"EMEB\") || (checkedValue === \"NORW\")) !== checkedValue) {\n              // Desactivate EON Checkbox and border\n              cb_es_3.checked = false;\n              // Desactivate the border in EON checkbox\n              cb_es_3.parentElement.style.border = null;\n              cb_es_3.parentElement.children[1].style.opacity = null;\n            }\n\n            // SSE not selected\n            if (((checkedValue === \"HYDE\") || (checkedValue === \"IMPO\") || (checkedValue === \"SOUT\") || (checkedValue === \"SWAE\")) !== checkedValue) {\n              // Desactivate SSE Checkbox and border\n              cb_es_4.checked = false;\n              // Desactivate the border in SSE checkbox\n              cb_es_4.parentElement.style.border = null;\n              cb_es_4.parentElement.children[1].style.opacity = null;\n            }\n\n            // Scottish power not selected\n            if (((checkedValue === \"MANW\") || (checkedValue === \"SPOW\")) !== checkedValue) {\n              // Desactivate Scottish power Checkbox and border\n              cb_es_5.checked = false;\n              // Desactivate the border in Scottish power checkbox\n              cb_es_5.parentElement.style.border = null;\n              cb_es_5.parentElement.children[1].style.opacity = null;\n            }\n\n            // Npower not selected\n            if (((checkedValue === \"INDE\") || (checkedValue === \"MIDE\") || (checkedValue === \"NATP\") || (checkedValue === \"NEEB\") || (checkedValue === \"PSUK\") || (checkedValue === \"YELG\")) !== checkedValue) {\n              // Activate Npower Checkbox and border\n              cb_es_6.checked = false;\n              // Desactivate the border in Npower checkbox\n              cb_es_6.parentElement.style.border = null;\n              cb_es_6.parentElement.children[1].style.opacity = null;\n            }\n\n            /**-- Update states -- */\n            updateSupplier({\n              ...supplier,\n              electricity_supplier: {\n                supplier_id: checkedValue,\n                meter_type,\n                mpan_core: mpan,\n                company_name: companyName\n              }\n            });\n\n            updateSupplierInformation({\n              ...supplierInformation,\n              electricity_supplier: {\n                mpan_core,\n                meter_type,\n                supplier_mpid: checkedValue,\n                company_name: companyName\n              }\n            });\n\n            updateElectricityInformation({\n              ...electricityInformation,\n              MPANDetails: {\n                mpan_core,\n                meter_type,\n                supplier_mpid: checkedValue,\n                company_name: companyName\n              }\n            });\n          }\n        }\n      });\n    }\n\n    // First step - Take the text introduced in the input\n    swal({\n      closeOnClickOutside: false,\n      buttons: {\n        cancel: {\n          text: \"Go back\",\n          value: false,\n          visible: true\n        },\n        confirm: \"Search\"\n      },\n      content: (\n        <div className=\"swal-text-custom\">\n          <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n            <FaSearchengin />\n          </IconContext.Provider>\n          <h1>Search Electricity Supplier...</h1>\n          <div>\n            <input type=\"text\" id=\"search-input\" />\n          </div>\n        </div>\n      )\n    }).then(search => {\n      if (search !== true) {\n        return;\n      }\n      const search_input = document.getElementById('search-input').value.toLowerCase();\n      // Validation search input\n      if (search_input === '') {\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            }\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImSad />\n              </IconContext.Provider>\n              <h1>No results found...</h1>\n            </div>\n          )\n        });\n\n        return;\n      }\n      const data_es = data_electricity_supplier_id;\n      return search_option(search_input, data_es);\n    });\n  }\n\n  // Search Gas Supplier\n  const handleSearchGS = (e) => {\n\n    let search_option = (search_input, data_gs) => {\n\n      // Removing duplicate values\n      const seen = new Set();\n      const filteredArr = data_gs.filter(el => {\n        const duplicate = seen.has(el.company_name);\n        seen.add(el.company_name);\n        return !duplicate;\n      });\n\n      // Second step - Filter -> Look for the first step below\n      let filter_gs;\n      // Filter by search_input \n      filter_gs = filteredArr.filter((option) => {\n\n        let options = option.company_name.toLowerCase().includes(search_input);\n        return (\n          options\n        );\n      });\n\n      // Print options from filter_gs \n      let results_gs = filter_gs.map((data) => (\n        <Fragment key={data.supplier_id + '_search_key'}>\n          <input type=\"radio\" id={data.supplier_id + '_search_filtered'} name=\"search_gs\" value={data.supplier_id} />\n          <label>{data.company_name} - <span style={{ color: 'var(--text_dark)' }}>Supplier ID:</span> {data.supplier_id}</label><br />\n        </Fragment>\n      ));\n\n      // Validation - No results found\n      if (filter_gs.length <= 0) {\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            }\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImSad />\n              </IconContext.Provider>\n              <h1>No results found...</h1>\n            </div>\n          )\n        });\n\n        return;\n      }\n\n      swal({\n        closeOnClickOutside: false,\n        buttons: {\n          cancel: {\n            text: \"Go back\",\n            value: false,\n            visible: true\n          },\n          confirm: \"Select\"\n        },\n        content: (\n          <div className=\"swal-text-custom\">\n            <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n              <FaRegHandPointer />\n            </IconContext.Provider>\n\n            <h1>Results...</h1>\n            <div className=\"swal-custom-container\">\n              {results_gs}\n            </div>\n          </div>\n        )\n      }).then(result => {\n        if (result !== true) {\n          return;\n        }\n\n        let checkedValues = document.getElementsByName('search_gs');\n\n        for (var i = 0, length = checkedValues.length; i < length; i++) {\n          if (checkedValues[i].checked) {\n            const checkedValue = checkedValues[i].value;\n\n            let companyName = data_gas_supplier_name[checkedValue];\n\n            // Selectors\n            const cb_gs_1 = document.getElementById('cb_gs-1');\n            const cb_gs_2 = document.getElementById('cb_gs-2');\n            const cb_gs_3 = document.getElementById('cb_gs-3');\n            const cb_gs_4 = document.getElementById('cb_gs-4');\n            const cb_gs_5 = document.getElementById('cb_gs-5');\n            const cb_gs_6 = document.getElementById('cb_gs-6');\n\n            if ((checkedValue !== \"BGT\") || (checkedValue !== \"BGB\") || (checkedValue !== \"BSA\") || (checkedValue !== \"LED\") || (checkedValue !== \"SBR\") || (checkedValue !== \"EDS\") || (checkedValue !== \"LDE\") || (checkedValue !== \"LEI\") || (checkedValue !== \"TUK\") || (checkedValue !== \"EAS\") || (checkedValue !== \"PWR\") || (checkedValue !== \"EMI\") || (checkedValue !== \"PWG\") || (checkedValue !== \"OWN\") || (checkedValue !== \"ATE\") || (checkedValue !== \"EST\") || (checkedValue !== \"SGL\") || (checkedValue !== \"SGY\") || (checkedValue !== \"TUU\") || (checkedValue !== \"EOD\") || (checkedValue !== \"POW\") || (checkedValue !== \"ATL\") || (checkedValue !== \"SHH\") || (checkedValue !== \"SCT\") || (checkedValue !== \"NGD\") || (checkedValue !== \"NPC\") || (checkedValue !== \"NDS\") || (checkedValue !== \"IND\") || (checkedValue !== \"CLT\") || (checkedValue !== \"TCG\") || (checkedValue !== \"NRZ\") || (checkedValue !== \"GUK\") || (checkedValue !== \"YGS\") || (checkedValue !== \"YGS\")) {\n\n              // Uncheck values\n              cb_gs_1.checked = false;\n              cb_gs_2.checked = false;\n              cb_gs_3.checked = false;\n              cb_gs_4.checked = false;\n              cb_gs_5.checked = false;\n              cb_gs_6.checked = false;\n\n              // take off border style\n              cb_gs_1.parentElement.style.border = null;\n              cb_gs_2.parentElement.style.border = null;\n              cb_gs_3.parentElement.style.border = null;\n              cb_gs_4.parentElement.style.border = null;\n              cb_gs_5.parentElement.style.border = null;\n              cb_gs_6.parentElement.style.border = null;\n              // Check Icon\n              cb_gs_1.parentElement.children[1].style.opacity = null;\n              cb_gs_2.parentElement.children[1].style.opacity = null;\n              cb_gs_3.parentElement.children[1].style.opacity = null;\n              cb_gs_4.parentElement.children[1].style.opacity = null;\n              cb_gs_5.parentElement.children[1].style.opacity = null;\n              cb_gs_6.parentElement.children[1].style.opacity = null;\n            }\n\n            /**-- Update states -- */\n            updateSupplier({\n              ...supplier,\n              gas_supplier: {\n                current_supplier_id: checkedValue,\n                meter_mechanism_code,\n                mprn,\n                company_name: companyName\n              }\n            });\n\n            updateSupplierInformation({\n              ...supplierInformation,\n              gas_supplier: {\n                current_supplier_id: checkedValue,\n                meter_mechanism_code,\n                mprn,\n                company_name: companyName\n              }\n            });\n\n            updateGasInformation({\n              ...gasInformation,\n              dataGas: {\n                current_supplier_id: checkedValue,\n                meter_mechanism_code,\n                mprn,\n                company_name: companyName\n              }\n            });\n          }\n        }\n      });\n\n    }\n\n    // First step - Take the text introduced in the input\n    swal({\n      closeOnClickOutside: false,\n      buttons: {\n        cancel: {\n          text: \"Go back\",\n          value: false,\n          visible: true\n        },\n        confirm: \"Search\"\n      },\n      content: (\n        <div className=\"swal-text-custom\">\n          <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n            <FaSearchengin />\n          </IconContext.Provider>\n          <h1>Search Gas Supplier...</h1>\n          <div>\n            <input type=\"text\" id=\"search-input\" />\n          </div>\n        </div>\n      )\n    }).then(search => {\n      if (search !== true) {\n        return;\n      }\n      const search_input = document.getElementById('search-input').value.toLowerCase();\n      // Validation search input\n      if (search_input === '') {\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            }\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImSad />\n              </IconContext.Provider>\n              <h1>No results found...</h1>\n            </div>\n          )\n        });\n\n        return;\n      }\n      const data_gs = data_gas_supplier_id;\n      return search_option(search_input, data_gs);\n    });\n  }\n\n  // Go to E7 - Next\n  const goToE7 = (e) => {\n    e.preventDefault();\n\n    /**-- GAS VALIDATION --*/\n    if (gas_only) {\n      console.log('Gas supplier validation - Gas Only');\n      /** --- Validation for gas supplier - Payment method desactivated --- */\n      // Check if the gas payment type is desactivated / No valdiation for payment method\n      if (document.getElementById('payment_type_gas') === null || undefined) {\n        // console.log('gas payment method desactivated');\n\n        // Supplier validation\n        if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n          // Show error message\n          update_error_gas_supplier(true);\n\n          // Check gas meter type\n          if (document.getElementById(\"meter_type_gas\").value === \"\") {\n            update_error_gas_meter_type(true);\n          } else {\n            update_error_gas_meter_type(false);\n          }\n\n          return;\n        } else {\n          // Hidde error message\n          update_error_gas_supplier(false);\n        }\n\n        // Meter type validation\n        if (document.getElementById(\"meter_type_gas\").value === \"\") {\n          // Show error message\n          update_error_gas_meter_type(true);\n\n          // Check gas supplier\n          if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n            update_error_gas_supplier(true);\n          } else {\n            update_error_gas_supplier(false);\n          }\n\n          return;\n        } else {\n          update_error_gas_meter_type(false);\n        }\n\n      } else {\n        /** --- Validation for gas supplier - Payment method active --- */\n        // console.log('gas payment method activated');\n\n        // Supplier validation\n        if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n          // Show error message\n          update_error_gas_supplier(true);\n\n          // Check gas meter type\n          if (document.getElementById(\"meter_type_gas\").value === \"\") {\n            update_error_gas_meter_type(true);\n          } else {\n            update_error_gas_meter_type(false);\n          }\n\n          // Check gas payment type\n          if (document.getElementById('payment_type_gas').value === \"\") {\n            update_error_gas_payment(true);\n          } else {\n            update_error_gas_payment(false);\n          }\n\n          return;\n\n        } else {\n          // Hidde error message\n          update_error_gas_supplier(false);\n        }\n\n        // Meter type validation\n        if (document.getElementById(\"meter_type_gas\").value === \"\") {\n          // Show error message\n          update_error_gas_meter_type(true);\n\n          // Check gas supplier\n          if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n            update_error_gas_supplier(true);\n          } else {\n            update_error_gas_supplier(false);\n          }\n\n          // Check gas payment type\n          if (document.getElementById('payment_type_gas').value === \"\") {\n            update_error_gas_payment(true);\n          } else {\n            update_error_gas_payment(false);\n          }\n\n          return;\n        } else {\n          update_error_gas_meter_type(false);\n        }\n\n        // gas Payment type validation\n        if (document.getElementById('payment_type_gas').value === \"\") {\n          // Show error message\n          update_error_gas_payment(true);\n\n          // Check gas supplier\n          if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n            update_error_gas_supplier(true);\n          } else {\n            update_error_gas_supplier(false);\n          }\n\n          // Check gas meter type\n          if (document.getElementById(\"meter_type_gas\").value === \"\") {\n            update_error_gas_meter_type(true);\n          } else {\n            update_error_gas_meter_type(false);\n          }\n\n          return;\n        } else {\n          update_error_gas_payment(false);\n        }\n      }\n\n      // Update Customer information state - gas\n      updateCustomerInformation({\n        ...customerInformation,\n        customerAddres,\n        supplierInformation,\n        useGas,\n        fuel,\n        electricityPaymentType,\n        gasPaymentType\n      });\n\n      // Sweet alert - Elecetricity\n      const supplier_gs_details = gasInformation.dataGas.company_name;\n      const meter_type_gs_details = document.getElementById('meter_type_gas');\n      const mpan_gs_details = gasInformation.dataGas.mprn;\n\n      swal({\n        closeOnClickOutside: false,\n        buttons: {\n          cancel: {\n            text: \"Go back\",\n            value: false,\n            visible: true\n          },\n          confirm: \"Confirm\"\n        },\n        content: (\n          <div className=\"swal-text-custom\">\n            <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n              <ImProfile />\n            </IconContext.Provider>\n\n            <h1>Customer Details</h1>\n            <div>\n              <p><span>Gas supplier:</span> {supplier_gs_details}</p>\n              <p><span>Meter Type:</span> {meter_type_gs_details.options[meter_type_gs_details.selectedIndex].text}</p>\n              <p><span>MPRN:</span> {mpan_gs_details === '' ? 'Not Found' : mpan_gs_details}</p>\n            </div>\n          </div>\n        )\n      }).then(response => {\n        if (response !== true) {\n          console.log('Go back');\n          return;\n        } else {\n          console.log('Update here');\n          const company_name = gasInformation.dataGas.company_name;\n          const meter_mechanism_code = gasInformation.dataGas.meter_mechanism_code;\n          const current_supplier_id = gasInformation.dataGas.current_supplier_id;\n          // Update Electricity Information\n          updateElectricityInformation({\n            ...electricityInformation,\n            MPANDetails: {\n              mpan_core: '',\n              meter_type: '',\n              supplier_mpid: '',\n              company_name: ''\n            }\n          });\n          // Update Supplier Information\n          updateSupplierInformation({\n            ...supplierInformation,\n            gas_supplier: {\n              current_supplier_id,\n              meter_mechanism_code,\n              mprn,\n              company_name\n            },\n            electricity_supplier: {\n              mpan_core: '',\n              meter_type: '',\n              supplier_mpid: '',\n              company_name: ''\n            }\n          });\n          // Update Customer Information\n          updateCustomerInformation({\n            ...customerInformation,\n            customerAddres,\n            supplierInformation: {\n              gas_supplier: {\n                current_supplier_id,\n                meter_mechanism_code,\n                mprn,\n                company_name\n              },\n              electricity_supplier: {\n                mpan_core: '',\n                meter_type: '',\n                supplier_mpid: '',\n                company_name: ''\n              }\n            },\n            useGas,\n            fuel,\n            electricityPaymentType,\n            gasPaymentType\n          });\n\n          // // Update fuel state, searched_by_mprn added to check if we should update the electricityInfomariton state in the E7 component\n          // updateFuel({\n          //   ...fuel,\n          //   searched_by_mprn: true\n          // });\n\n          // Hidde Form supply\n          updateShowFormSupply(false);\n          // Show FormE7\n          updateShowE7(true);\n          // Update progress bar\n          updateProgressBar({\n            ...progressBar,\n            step: 5\n          });\n        }\n      });\n      return;\n    }\n\n    /**-- ELECTRICITY VALIDATION --*/\n    if (elec_only) {\n      console.log('elec_only validation');\n      // Check if the electricity payment type is desactivated\n      if (document.getElementById('payment_type_electricity') === null || undefined) {\n        // console.log('Electricity payment method desactivated');\n\n        // Supplier validation\n        if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n          // Show error message\n          update_error_electricity_supplier(true);\n\n          // Check electricity meter type\n          if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n            update_error_electricity_meter_type(true);\n          } else {\n            update_error_electricity_meter_type(false);\n          }\n\n          return;\n        } else {\n          // Hidde error message\n          update_error_electricity_supplier(false);\n        }\n\n        // Meter type validation\n        if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n          // Show error message\n          update_error_electricity_meter_type(true);\n\n          // Check electricity supplier\n          if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n            update_error_electricity_supplier(true);\n          } else {\n            update_error_electricity_supplier(false);\n          }\n\n          return;\n        } else {\n          update_error_electricity_meter_type(false);\n        }\n\n      } else {\n        /** --- Validation for electricity supplier - Payment method active --- */\n        // console.log('Electricity payment method activated');\n\n        // Supplier validation\n        if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n          // Show error message\n          update_error_electricity_supplier(true);\n\n          // Check electricity meter type\n          if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n            update_error_electricity_meter_type(true);\n          } else {\n            update_error_electricity_meter_type(false);\n          }\n\n          // Check electricity payment type\n          if (document.getElementById('payment_type_electricity').value === \"\") {\n            update_error_electricity_payment(true);\n          } else {\n            update_error_electricity_payment(false);\n          }\n\n          return;\n\n        } else {\n          // Hidde error message\n          update_error_electricity_supplier(false);\n        }\n\n        // Meter type validation\n        if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n          // Show error message\n          update_error_electricity_meter_type(true);\n\n          // Check electricity supplier\n          if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n            update_error_electricity_supplier(true);\n          } else {\n            update_error_electricity_supplier(false);\n          }\n\n          // Check electricity payment type\n          if (document.getElementById('payment_type_electricity').value === \"\") {\n            update_error_electricity_payment(true);\n          } else {\n            update_error_electricity_payment(false);\n          }\n\n          return;\n        } else {\n          update_error_electricity_meter_type(false);\n        }\n\n        // Electricity Payment type validation\n        if (document.getElementById('payment_type_electricity').value === \"\") {\n          // Show error message\n          update_error_electricity_payment(true);\n\n          // Check electricity supplier\n          if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n            update_error_electricity_supplier(true);\n          } else {\n            update_error_electricity_supplier(false);\n          }\n\n          // Check electricity meter type\n          if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n            update_error_electricity_meter_type(true);\n          } else {\n            update_error_electricity_meter_type(false);\n          }\n\n          return;\n        } else {\n          update_error_electricity_payment(false);\n        }\n      }\n\n      // Update Customer information state - Electricity\n      updateCustomerInformation({\n        ...customerInformation,\n        customerAddres,\n        supplierInformation,\n        useGas,\n        fuel,\n        electricityPaymentType,\n        gasPaymentType\n      });\n\n      // Sweet alert - Elecetricity\n      const supplier_es_details = electricityInformation.MPANDetails.company_name;\n      const meter_type_es_details = document.getElementById('meter_type_electricity');\n      const mpan_es_details = electricityInformation.MPANDetails.mpan_core;\n\n      swal({\n        closeOnClickOutside: false,\n        buttons: {\n          cancel: {\n            text: \"Go back\",\n            value: false,\n            visible: true\n          },\n          confirm: \"Confirm\"\n        },\n        content: (\n          <div data-cy=\"swal-elec-only\" className=\"swal-text-custom\">\n            <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n              <ImProfile />\n            </IconContext.Provider>\n\n            <h1>Customer Details</h1>\n            <div>\n              <p><span>Electricity supplier:</span> {supplier_es_details}</p>\n              <p><span>Meter Type:</span> {meter_type_es_details.options[meter_type_es_details.selectedIndex].text}</p>\n              <p><span>MPAN:</span> {mpan_es_details === '' ? 'Not Found' : mpan_es_details}</p>\n            </div>\n          </div>\n        )\n      }).then(response => {\n        if (response !== true) {\n          console.log('Go back');\n          return;\n        } else {\n          console.log('Update here');\n          const company_name = electricityInformation.MPANDetails.company_name;\n          const meter_type = electricityInformation.MPANDetails.meter_type;\n          const mpan_core = electricityInformation.MPANDetails.mpan_core;\n          const supplier_mpid = electricityInformation.MPANDetails.supplier_mpid;\n          // Update Supplier Information\n          updateSupplierInformation({\n            ...supplierInformation,\n            gas_supplier: {\n              current_supplier_id: '',\n              meter_mechanism_code: '',\n              mprn: '',\n              company_name: ''\n            },\n            electricity_supplier: {\n              mpan_core,\n              meter_type,\n              supplier_mpid,\n              company_name\n            }\n          });\n          // Update Customer Information\n          updateCustomerInformation({\n            ...customerInformation,\n            customerAddres,\n            supplierInformation: {\n              gas_supplier: {\n                current_supplier_id: '',\n                meter_mechanism_code: '',\n                mprn: '',\n                company_name: ''\n              },\n              electricity_supplier: {\n                mpan_core,\n                meter_type,\n                supplier_mpid,\n                company_name\n              }\n            },\n            useGas,\n            fuel,\n            electricityPaymentType,\n            gasPaymentType\n          });\n\n          // // Update fuel state, searched_by_mprn added to check if we should update the electricityInfomariton state in the E7 component\n          // updateFuel({\n          //   ...fuel,\n          //   searched_by_mprn: false\n          // });\n\n          // Hidde Form supply\n          updateShowFormSupply(false);\n          // Show FormE7\n          updateShowE7(true);\n          // Update progress bar\n          updateProgressBar({\n            ...progressBar,\n            step: 5\n          });\n        }\n      });\n      return;\n    }\n\n    /**-- Dual tariff Validation  --*/\n    if (dual_active) {\n      if (same_supplier) {\n        console.log('Same suppliers');\n        // Check if the electricity payment type is desactivated\n        if (document.getElementById('payment_type_electricity') === null || undefined) {\n          // console.log('Electricity payment method desactivated');\n\n          // Supplier validation\n          if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n            // Show error message\n            update_error_electricity_supplier(true);\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            return;\n          } else {\n            // Hidde error message\n            update_error_electricity_supplier(false);\n          }\n\n          // Meter type validation\n          if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n            // Show error message\n            update_error_electricity_meter_type(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            return;\n          } else {\n            update_error_electricity_meter_type(false);\n          }\n\n        } else {\n          /** --- Validation for electricity supplier - Payment method active --- */\n          // console.log('Electricity payment method activated');\n\n          // Supplier validation\n          if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n            // Show error message\n            update_error_electricity_supplier(true);\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            return;\n\n          } else {\n            // Hidde error message\n            update_error_electricity_supplier(false);\n          }\n\n          // Meter type validation\n          if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n            // Show error message\n            update_error_electricity_meter_type(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            return;\n          } else {\n            update_error_electricity_meter_type(false);\n          }\n\n          // Electricity Payment type validation\n          if (document.getElementById('payment_type_electricity').value === \"\") {\n            // Show error message\n            update_error_electricity_payment(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            return;\n          } else {\n            update_error_electricity_payment(false);\n          }\n        }\n\n        // Update Customer information state - Electricity\n        updateCustomerInformation({\n          ...customerInformation,\n          customerAddres,\n          supplierInformation,\n          useGas,\n          fuel,\n          electricityPaymentType,\n          gasPaymentType\n        });\n\n        // Sweet alert - Elecetricity\n        const supplier_es_details = electricityInformation.MPANDetails.company_name;\n        const meter_type_es_details = document.getElementById('meter_type_electricity');\n        const mpan_es_details = electricityInformation.MPANDetails.mpan_core;\n\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            },\n            confirm: \"Confirm\"\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImProfile />\n              </IconContext.Provider>\n\n              <h1>Customer Details</h1>\n              <div>\n                <p><span>Supplier:</span> {supplier_es_details}</p>\n                <p><span>Meter Type:</span> {meter_type_es_details.options[meter_type_es_details.selectedIndex].text}</p>\n                <p><span>MPAN:</span> {mpan_es_details === '' ? 'Not Found' : mpan_es_details}</p>\n              </div>\n            </div>\n          )\n        }).then(response => {\n          if (response !== true) {\n            console.log('Go back');\n            return;\n          } else {\n            console.log('Update here');\n            const company_name = electricityInformation.MPANDetails.company_name;\n            const meter_type = electricityInformation.MPANDetails.meter_type;\n            const mpan_core = electricityInformation.MPANDetails.mpan_core;\n            const supplier_mpid = electricityInformation.MPANDetails.supplier_mpid;\n            // Update Gas Information\n            updateGasInformation({\n              ...gasInformation,\n              dataGas: {\n                current_supplier_id: supplier_mpid,\n                meter_mechanism_code: meter_type,\n                mprn: '',\n                company_name\n              }\n            });\n            // Update Supplier Information\n            updateSupplierInformation({\n              ...supplierInformation,\n              gas_supplier: {\n                current_supplier_id: supplier_mpid,\n                meter_mechanism_code: meter_type,\n                mprn: '',\n                company_name\n              },\n              electricity_supplier: {\n                mpan_core,\n                meter_type,\n                supplier_mpid,\n                company_name\n              }\n            });\n            // Update Customer Information\n            updateCustomerInformation({\n              ...customerInformation,\n              customerAddres,\n              supplierInformation: {\n                gas_supplier: {\n                  current_supplier_id: supplier_mpid,\n                  meter_mechanism_code: meter_type,\n                  mprn: '',\n                  company_name\n                },\n                electricity_supplier: {\n                  mpan_core,\n                  meter_type,\n                  supplier_mpid,\n                  company_name\n                }\n              },\n              useGas,\n              fuel,\n              electricityPaymentType,\n              gasPaymentType\n            });\n\n            // // Update fuel state, searched_by_mprn added to check if we should update the electricityInfomariton state in the E7 component\n            // updateFuel({\n            //   ...fuel,\n            //   searched_by_mprn: false\n            // });\n\n            // Hidde Form supply\n            updateShowFormSupply(false);\n            // Show FormE7\n            updateShowE7(true);\n            // Update progress bar\n            updateProgressBar({\n              ...progressBar,\n              step: 5\n            });\n          }\n        });\n        return;\n      } else {\n        console.log('Dual Different suppliers');\n        /** --- Validation for electricity supplier - Payment method desactivated --- */\n        // Check if the Electricity and Gas Payment type are desactivated / No valdiation for payment method\n        if (((document.getElementById('payment_type_electricity') === null) || (document.getElementById('payment_type_electricity') === undefined)) && ((document.getElementById('payment_type_gas') === null) || (document.getElementById('payment_type_gas') === undefined))) {\n\n          // console.log('Electricity and Gas payment type are desactivated');\n\n          // Supplier validation\n          if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n            // Show error message\n            update_error_electricity_supplier(true);\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\"\n            ) {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            return;\n          } else {\n            // Hidde error message\n            update_error_electricity_supplier(false);\n          }\n\n          // Meter type validation\n          if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n            // Show error message\n            update_error_electricity_meter_type(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\"\n            ) {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\"\n            ) {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            return;\n          } else {\n            update_error_electricity_meter_type(false);\n          }\n\n          /** --- Validation for gas supplier --- */\n          // Supplier validation\n          if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n            // Show error message\n            update_error_gas_supplier(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_supplier(false);\n          }\n\n          // Meter type validation\n          if (document.getElementById(\"meter_type_gas\").value === \"\") {\n            // Show error message\n            update_error_gas_meter_type(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_meter_type(false);\n          }\n        }\n\n        // Check if Electricity payment type is activated and Gas payment type is desactivated\n        if (((document.getElementById('payment_type_electricity') !== null) || (document.getElementById('payment_type_electricity') !== undefined)) && ((document.getElementById('payment_type_gas') === null) || (document.getElementById('payment_type_gas') === undefined))) {\n\n          // console.log('Electricity payment type is activated / Gas payment type is desactivated');\n\n          // Supplier validation\n          if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n            // Show error message\n            update_error_electricity_supplier(true);\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            return;\n          } else {\n            // Hidde error message\n            update_error_electricity_supplier(false);\n          }\n\n          // Meter type validation\n          if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n            // Show error message\n            update_error_electricity_meter_type(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\"\n            ) {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            return;\n          } else {\n            update_error_electricity_meter_type(false);\n          }\n\n          // Electricity Payment type validation\n          if (document.getElementById('payment_type_electricity').value === \"\") {\n            // Show error message\n            update_error_electricity_payment(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            return;\n          } else {\n            update_error_electricity_payment(false);\n          }\n\n          /** --- Validation for gas supplier --- */\n          // Supplier validation\n          if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n            // Show error message\n            update_error_gas_supplier(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_supplier(false);\n          }\n\n          // Meter type validation\n          if (document.getElementById(\"meter_type_gas\").value === \"\") {\n            // Show error message\n            update_error_gas_meter_type(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_meter_type(false);\n          }\n        }\n\n        // Check if Gas payment type is activated and Electricity payment type is desactivated\n        if (((document.getElementById('payment_type_gas') !== null) || (document.getElementById('payment_type_gas') !== undefined)) && ((document.getElementById('payment_type_electricity') === null) || (document.getElementById('payment_type_electricity') === undefined))) {\n\n          // console.log('Gas payment type is activated / Electricity payment type is desactivated');\n\n          /** --- Validation for Electricity information --- */\n          // Supplier validation\n          if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n            // Show error message\n            update_error_electricity_supplier(true);\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            // Check Gas payment type\n            if (document.getElementById('payment_type_gas').value === \"\") {\n              update_error_gas_payment(true);\n            } else {\n              update_error_gas_payment(false);\n            }\n\n            return;\n          } else {\n            // Hidde error message\n            update_error_electricity_supplier(false);\n          }\n\n          // Meter type validation\n          if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n            // Show error message\n            update_error_electricity_meter_type(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\"\n            ) {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            // Check Gas payment type\n            if (document.getElementById('payment_type_gas').value === \"\") {\n              update_error_gas_payment(true);\n            } else {\n              update_error_gas_payment(false);\n            }\n\n            return;\n          } else {\n            update_error_electricity_meter_type(false);\n          }\n\n          /** --- Validation for gas information --- */\n          // Supplier validation\n          if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n            // Show error message\n            update_error_gas_supplier(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check gas payment type\n            if (document.getElementById('payment_type_gas').value === \"\") {\n              update_error_gas_payment(true);\n            } else {\n              update_error_gas_payment(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_supplier(false);\n          }\n\n          // Meter type validation\n          if (document.getElementById(\"meter_type_gas\").value === \"\") {\n            // Show error message\n            update_error_gas_meter_type(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas payment type\n            if (document.getElementById('payment_type_gas').value === \"\") {\n              update_error_gas_payment(true);\n            } else {\n              update_error_gas_payment(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_meter_type(false);\n          }\n\n          // Gas Payment type validation\n          if (document.getElementById('payment_type_gas').value === \"\") {\n            // Show error message\n            update_error_gas_payment(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_payment(false);\n          }\n        }\n\n        // Chech if Electricity and Gas payment type are activated\n        if (((document.getElementById('payment_type_electricity') !== null) || (document.getElementById('payment_type_electricity') !== undefined)) && ((document.getElementById('payment_type_gas') !== null) || (document.getElementById('payment_type_gas') !== undefined))) {\n          // console.log('Electricity and Gas payment type are activated');\n\n          /** --- Validation for Electricity information --- */\n          // Supplier validation\n          if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n            // Show error message\n            update_error_electricity_supplier(true);\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            // Check gas payment type\n            if (document.getElementById('payment_type_gas').value === \"\") {\n              update_error_gas_payment(true);\n            } else {\n              update_error_gas_payment(false);\n            }\n\n            return;\n          } else {\n            // Hidde error message\n            update_error_electricity_supplier(false);\n          }\n\n          // Meter type validation\n          if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n            // Show error message\n            update_error_electricity_meter_type(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\"\n            ) {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            // Check gas payment type\n            if (document.getElementById('payment_type_gas').value === \"\") {\n              update_error_gas_payment(true);\n            } else {\n              update_error_gas_payment(false);\n            }\n\n            return;\n          } else {\n            update_error_electricity_meter_type(false);\n          }\n\n          // Electricity Payment type validation\n          if (document.getElementById('payment_type_electricity').value === \"\") {\n            // Show error message\n            update_error_electricity_payment(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            // Check gas payment type\n            if (document.getElementById('payment_type_gas').value === \"\") {\n              update_error_gas_payment(true);\n            } else {\n              update_error_gas_payment(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_payment(false);\n          }\n\n          /** --- Validation for gas information --- */\n          // Supplier validation\n          if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n            // Show error message\n            update_error_gas_supplier(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            // Check gas payment type\n            if (document.getElementById('payment_type_gas').value === \"\") {\n              update_error_gas_payment(true);\n            } else {\n              update_error_gas_payment(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_supplier(false);\n          }\n\n          // Meter type validation\n          if (document.getElementById(\"meter_type_gas\").value === \"\") {\n            // Show error message\n            update_error_gas_meter_type(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas payment type\n            if (document.getElementById('payment_type_gas').value === \"\") {\n              update_error_gas_payment(true);\n            } else {\n              update_error_gas_payment(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_meter_type(false);\n          }\n\n          // Gas Payment type validation\n          if (document.getElementById('payment_type_gas').value === \"\") {\n            // Show error message\n            update_error_gas_payment(true);\n\n            // Check electricity supplier\n            if (document.getElementById(\"selected\").value === \"\" || document.getElementById(\"selected\").value === \"Select\") {\n              update_error_electricity_supplier(true);\n            } else {\n              update_error_electricity_supplier(false);\n            }\n\n            // Check electricity meter type\n            if (document.getElementById(\"meter_type_electricity\").value === \"\") {\n              update_error_electricity_meter_type(true);\n            } else {\n              update_error_electricity_meter_type(false);\n            }\n\n            // Check electricity payment type\n            if (document.getElementById('payment_type_electricity').value === \"\") {\n              update_error_electricity_payment(true);\n            } else {\n              update_error_electricity_payment(false);\n            }\n\n            // Check gas supplier\n            if (document.getElementById(\"gas_selected\").value === \"\" || document.getElementById(\"gas_selected\").value === \"Select\") {\n              update_error_gas_supplier(true);\n            } else {\n              update_error_gas_supplier(false);\n            }\n\n            // Check gas meter type\n            if (document.getElementById(\"meter_type_gas\").value === \"\") {\n              update_error_gas_meter_type(true);\n            } else {\n              update_error_gas_meter_type(false);\n            }\n\n            return;\n          } else {\n            update_error_gas_payment(false);\n          }\n        }\n\n        // Update state - Electricity and Gas \n        updateCustomerInformation({\n          ...customerInformation,\n          customerAddres,\n          supplierInformation,\n          useGas,\n          fuel,\n          electricityPaymentType,\n          gasPaymentType\n        });\n\n        /** -- Sweet alert - Electricity and Gas -- */\n        // Electricity\n        const supplier_es_details = electricityInformation.MPANDetails.company_name;\n        const meter_type_es_details = document.getElementById('meter_type_electricity');\n        const mpan_es_details = electricityInformation.MPANDetails.mpan_core;\n        // Gas\n        const supplier_gs_details = gasInformation.dataGas.company_name;\n        const meter_type_gs_details = document.getElementById('meter_type_gas');\n        const mprn_gs_details = gasInformation.dataGas.mprn;\n\n        swal({\n          closeOnClickOutside: false,\n          buttons: {\n            cancel: {\n              text: \"Go back\",\n              value: false,\n              visible: true\n            },\n            confirm: \"Confirm\"\n          },\n          content: (\n            <div className=\"swal-text-custom\">\n              <IconContext.Provider value={{ color: '#D338AE', size: '50px' }}>\n                <ImProfile />\n              </IconContext.Provider>\n\n              <h1>Customer Details</h1>\n              {/* Electricity */}\n              <div className=\"swal-custom-container\">\n                <h2>Electricity Supplier</h2>\n                <p><span>Electricity supplier:</span> {supplier_es_details}</p>\n                <p><span>Meter Type:</span> {meter_type_es_details.options[meter_type_es_details.selectedIndex].text}</p>\n                <p><span>MPAN:</span> {mpan_es_details === '' ? 'Not Found' : mpan_es_details}</p>\n              </div>\n              {/* Gas */}\n              <div className=\"swal-custom-container\">\n                <h2>Gas Supplier</h2>\n                <p><span>Gas supplier:</span> {supplier_gs_details}</p>\n                <p><span>Meter Type:</span> {meter_type_gs_details.options[meter_type_gs_details.selectedIndex].text}</p>\n                <p><span>MPRN:</span> {mprn_gs_details === '' ? 'Not Found' : mprn_gs_details}</p>\n              </div>\n            </div>\n          )\n        }).then(response => {\n          // console.log(response);\n          if (response !== true) {\n            return;\n          } else {\n            // Hidde Form supply\n            updateShowFormSupply(false);\n            // Show FormE7\n            updateShowE7(true);\n          }\n        });\n      }\n      return;\n    }\n  };\n\n  // Go back to MPRN/MPAN - Back\n  const goToFormMpanMprn = (e) => {\n    e.preventDefault();\n    // Update and clean the states\n    updateSupplier({\n      ...supplier,\n      electricity_supplier: {\n        supplier_id: '',\n        meter_type: '',\n        mpan_core: '',\n        company_name: ''\n      },\n      gas_supplier: {\n        current_supplier_id: '',\n        meter_mechanism_code: '',\n        mprn: '',\n        company_name: ''\n      }\n    });\n\n    updateSupplierInformation({\n      ...supplierInformation,\n      electricity_supplier: {\n        mpan_core: '',\n        meter_type: '',\n        supplier_mpid: '',\n        company_name: ''\n      },\n\n      gas_supplier: {\n        current_supplier_id: '',\n        meter_mechanism_code: '',\n        mprn: '',\n        company_name: ''\n      }\n    });\n\n    updateElectricityInformation({\n      ...electricityInformation,\n      MPANDetails: {\n        mpan_core: '',\n        meter_type: '',\n        supplier_mpid: '',\n        company_name: ''\n      }\n    });\n\n    updateGasInformation({\n      ...gasInformation,\n      dataGas: {\n        current_supplier_id: '',\n        meter_mechanism_code: '',\n        mprn: '',\n        company_name: ''\n      }\n    });\n\n    // Show Form MPAN/MPRN component\n    updateShowFormMpanMprn(true);\n    // Hidde Form Supply component\n    updateShowFormSupply(false);\n    // Update progress bar\n    updateProgressBar({\n      ...progressBar,\n      step: 3\n    });\n  };\n\n  const es_name = data_electricity_supplier_name[supplier_mpid];\n  const gs_name = data_gas_supplier_name[current_supplier_id];\n\n  // Dual fuel conditional\n  useEffect(() => {\n    if (dual_fuel) {\n      if (same_supplier) {\n        // Electricity\n        const supplier_mpid_dual = electricityInformation.MPANDetails.supplier_mpid;\n        // Gas\n        const current_supplier_id_dual = gasInformation.dataGas.current_supplier_id;\n\n        if ((supplier_mpid_dual !== '') && (current_supplier_id_dual === '')) {\n          console.log('Electricity comes with data');\n          const current_supplier_id = electricityInformation.MPANDetails.supplier_mpid;\n          const meter_mechanism_code = electricityInformation.MPANDetails.meter_type;\n          const company_name = data_electricity_supplier_name[supplier_mpid];\n          // Update gas information state with the same values as Electricity due is dual\n          updateGasInformation({\n            ...gasInformation,\n            dataGas: {\n              current_supplier_id,\n              meter_mechanism_code,\n              mprn: '',\n              company_name\n            }\n          });\n\n          updateSupplier({\n            ...supplier,\n            gas_supplier: {\n              current_supplier_id,\n              meter_mechanism_code,\n              mprn: '',\n              company_name\n            }\n          });\n\n          updateSupplierInformation({\n            ...supplierInformation,\n            gas_supplier: {\n              current_supplier_id,\n              meter_mechanism_code,\n              mprn: '',\n              company_name\n            }\n          });\n        }\n\n        if ((current_supplier_id_dual !== '') && (supplier_mpid_dual === '')) {\n          console.log('Gas comes with data');\n          const meter_type = gasInformation.dataGas.meter_mechanism_code;\n          const supplier_mpid = gasInformation.dataGas.current_supplier_id;\n          const company_name = data_gas_supplier_name[current_supplier_id];\n          // Update Electricity information state with the same values as Gas due is dual\n          updateElectricityInformation({\n            ...electricityInformation.MPANDetails.delete,\n            MPANDetails: {\n              mpan_core: '',\n              meter_type,\n              supplier_mpid,\n              company_name\n            }\n          });\n\n          updateSupplier({\n            ...supplier,\n            electricity_supplier: {\n              supplier_id,\n              meter_type,\n              mpan_core: '',\n              company_name\n            }\n          });\n\n          updateSupplierInformation({\n            ...supplierInformation,\n            electricity_supplier: {\n              mpan_core: '',\n              meter_type,\n              supplier_mpid,\n              company_name\n            }\n          });\n        }\n\n        if ((supplier_mpid_dual === '') && (current_supplier_id_dual === '')) {\n          console.log('Both are empty');\n          const current_supplier_id = electricityInformation.MPANDetails.supplier_mpid;\n          const meter_mechanism_code = electricityInformation.MPANDetails.meter_type;\n          const company_name = data_electricity_supplier_name[supplier_mpid];\n          // Update gas information state with the same values as Electricity \n          updateGasInformation({\n            ...gasInformation,\n            dataGas: {\n              current_supplier_id,\n              meter_mechanism_code,\n              mprn: '',\n              company_name\n            }\n          });\n\n          updateSupplier({\n            ...supplier,\n            gas_supplier: {\n              current_supplier_id,\n              meter_mechanism_code,\n              mprn: '',\n              company_name\n            }\n          });\n\n          updateSupplierInformation({\n            ...supplierInformation,\n            gas_supplier: {\n              current_supplier_id,\n              meter_mechanism_code,\n              mprn: '',\n              company_name\n            }\n          });\n        }\n\n        // Selectors\n        const cb_es_1 = document.getElementById('cb_es-1');\n        const cb_es_2 = document.getElementById('cb_es-2');\n        const cb_es_3 = document.getElementById('cb_es-3');\n        const cb_es_4 = document.getElementById('cb_es-4');\n        const cb_es_5 = document.getElementById('cb_es-5');\n        const cb_es_6 = document.getElementById('cb_es-6');\n\n        //British Gas Selected\n        if ((supplier_id === \"BGAS\") || (supplier_id === \"BIZZ\") || (supplier_id === \"ECOA\") || (supplier_id === \"ENRD\") || (supplier_id === \"OGAS\")) {\n          // Activate British Gas Checkbox and border\n          cb_es_1.checked = true;\n          cb_es_1.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n          cb_es_1.parentElement.children[1].style.opacity = \"1\";\n\n          // Desactivate the rest of checkboxes\n          cb_es_2.checked = false;\n          cb_es_3.checked = false;\n          cb_es_4.checked = false;\n          cb_es_5.checked = false;\n          cb_es_6.checked = false;\n\n          // Desactivate the border in checkbox NOT selected\n          cb_es_2.parentElement.style.border = null;\n          cb_es_3.parentElement.style.border = null;\n          cb_es_4.parentElement.style.border = null;\n          cb_es_5.parentElement.style.border = null;\n          cb_es_6.parentElement.style.border = null;\n          // Check Icon\n          cb_es_2.parentElement.children[1].style.opacity = null;\n          cb_es_3.parentElement.children[1].style.opacity = null;\n          cb_es_4.parentElement.children[1].style.opacity = null;\n          cb_es_5.parentElement.children[1].style.opacity = null;\n          cb_es_6.parentElement.children[1].style.opacity = null;\n        }\n\n        // EDF Selected\n        if ((supplier_id === \"LOND\") || (supplier_id === \"SEEB\") || (supplier_id === \"SWEB\")) {\n          // Activate EDF Checkbox and border\n          cb_es_2.checked = true;\n          cb_es_2.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n          cb_es_2.parentElement.children[1].style.opacity = \"1\";\n\n          // Desactivate the rest of checkboxes\n          cb_es_1.checked = false;\n          cb_es_3.checked = false;\n          cb_es_4.checked = false;\n          cb_es_5.checked = false;\n          cb_es_6.checked = false;\n\n          // Desactivate the border in checkbox NOT selected\n          cb_es_1.parentElement.style.border = null;\n          cb_es_3.parentElement.style.border = null;\n          cb_es_4.parentElement.style.border = null;\n          cb_es_5.parentElement.style.border = null;\n          cb_es_6.parentElement.style.border = null;\n          // Check icon\n          cb_es_1.parentElement.children[1].style.opacity = null;\n          cb_es_3.parentElement.children[1].style.opacity = null;\n          cb_es_4.parentElement.children[1].style.opacity = null;\n          cb_es_5.parentElement.children[1].style.opacity = null;\n          cb_es_6.parentElement.children[1].style.opacity = null;\n        }\n\n        // EON Selected\n        if ((supplier_id === \"PGEN\") || (supplier_id === \"EELC\") || (supplier_id === \"EENG\") || (supplier_id === \"EMEB\") || (supplier_id === \"NORW\")) {\n          // Activate EON Checkbox and border\n          cb_es_3.checked = true;\n          cb_es_3.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n          cb_es_3.parentElement.children[1].style.opacity = \"1\";\n\n          // Desactivate the rest of checkboxes\n          cb_es_1.checked = false;\n          cb_es_2.checked = false;\n          cb_es_4.checked = false;\n          cb_es_5.checked = false;\n          cb_es_6.checked = false;\n\n          // Desactivate the border in checkbox NOT selected\n          cb_es_1.parentElement.style.border = null;\n          cb_es_2.parentElement.style.border = null;\n          cb_es_4.parentElement.style.border = null;\n          cb_es_5.parentElement.style.border = null;\n          cb_es_6.parentElement.style.border = null;\n          // Check icon\n          cb_es_1.parentElement.children[1].style.opacity = null;\n          cb_es_2.parentElement.children[1].style.opacity = null;\n          cb_es_4.parentElement.children[1].style.opacity = null;\n          cb_es_5.parentElement.children[1].style.opacity = null;\n          cb_es_6.parentElement.children[1].style.opacity = null;\n        }\n\n        // SSE Selected\n        if ((supplier_id === \"HYDE\") || (supplier_id === \"IMPO\") || (supplier_id === \"SOUT\") || (supplier_id === \"SWAE\")) {\n          // Activate SSE Checkbox and border\n          cb_es_4.checked = true;\n          cb_es_4.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n          cb_es_4.parentElement.children[1].style.opacity = \"1\";\n\n          // Desactivate the rest of checkboxes\n          cb_es_1.checked = false;\n          cb_es_2.checked = false;\n          cb_es_3.checked = false;\n          cb_es_5.checked = false;\n          cb_es_6.checked = false;\n\n          // Desactivate the border in checkbox NOT selected\n          cb_es_1.parentElement.style.border = null;\n          cb_es_2.parentElement.style.border = null;\n          cb_es_3.parentElement.style.border = null;\n          cb_es_5.parentElement.style.border = null;\n          cb_es_6.parentElement.style.border = null;\n          // Check icon\n          cb_es_1.parentElement.children[1].style.opacity = null;\n          cb_es_2.parentElement.children[1].style.opacity = null;\n          cb_es_3.parentElement.children[1].style.opacity = null;\n          cb_es_5.parentElement.children[1].style.opacity = null;\n          cb_es_6.parentElement.children[1].style.opacity = null;\n        }\n\n        // Scottish power selected\n        if ((supplier_id === \"MANW\") || (supplier_id === \"SPOW\")) {\n          // Activate Scottish power Checkbox and border\n          cb_es_5.checked = true;\n          cb_es_5.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n          cb_es_5.parentElement.children[1].style.opacity = \"1\";\n\n          // Desactivate the rest of checkboxes\n          cb_es_1.checked = false;\n          cb_es_2.checked = false;\n          cb_es_3.checked = false;\n          cb_es_4.checked = false;\n          cb_es_6.checked = false;\n\n          // Desactivate the border in checkbox NOT selected\n          cb_es_1.parentElement.style.border = null;\n          cb_es_2.parentElement.style.border = null;\n          cb_es_3.parentElement.style.border = null;\n          cb_es_4.parentElement.style.border = null;\n          cb_es_6.parentElement.style.border = null;\n          // Check icon\n          cb_es_1.parentElement.children[1].style.opacity = null;\n          cb_es_2.parentElement.children[1].style.opacity = null;\n          cb_es_3.parentElement.children[1].style.opacity = null;\n          cb_es_4.parentElement.children[1].style.opacity = null;\n          cb_es_6.parentElement.children[1].style.opacity = null;\n        }\n\n        // Npower Selected\n        if ((supplier_id === \"INDE\") || (supplier_id === \"MIDE\") || (supplier_id === \"NATP\") || (supplier_id === \"NEEB\") || (supplier_id === \"PSUK\") || (supplier_id === \"YELG\")) {\n          // Activate Npower Checkbox and border\n          cb_es_6.checked = true;\n          cb_es_6.parentElement.style.border = \"0.2rem solid var(--tertiary_background)\";\n          cb_es_6.parentElement.children[1].style.opacity = \"1\";\n\n          // Desactivate the rest of checkboxes\n          cb_es_1.checked = false;\n          cb_es_2.checked = false;\n          cb_es_3.checked = false;\n          cb_es_4.checked = false;\n          cb_es_5.checked = false;\n\n          // Desactivate the border in checkbox NOT selected\n          cb_es_1.parentElement.style.border = null;\n          cb_es_2.parentElement.style.border = null;\n          cb_es_3.parentElement.style.border = null;\n          cb_es_4.parentElement.style.border = null;\n          cb_es_5.parentElement.style.border = null;\n          // Check icon\n          cb_es_1.parentElement.children[1].style.opacity = null;\n          cb_es_2.parentElement.children[1].style.opacity = null;\n          cb_es_3.parentElement.children[1].style.opacity = null;\n          cb_es_4.parentElement.children[1].style.opacity = null;\n          cb_es_5.parentElement.children[1].style.opacity = null;\n        }\n      }\n    }\n  }, [es_name]);\n\n  // Adding initial customer data to firebase (Coming from MPAN/MPRN)\n  useEffect(() => {\n\n    (async () => {\n      const { fuel_description } = customerInformation;\n\n      // Company name ES\n      let company_name_es = data_electricity_supplier_name;\n\n      // Company name GS\n      let company_name_gs = data_gas_supplier_name;\n\n      // Suppplier id ES\n      let supplier_id_es = electricityInformation.MPANDetails.supplier_mpid;\n\n      // Suppplier id GS\n      let supplier_id_gs = gasInformation.dataGas.current_supplier_id;\n\n      // Firebase\n      await db.collection(\"customers\").doc(uid).set({\n        created: firebase.firestore.FieldValue.serverTimestamp(),\n        step: 3,\n        customerAddres: {\n          doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n          addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n          addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n          city: customerAddres.city ? customerAddres.city : '',\n          postcode: customerAddres.postcode ? customerAddres.postcode : '',\n          mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n          mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n        },\n        MPANDetails: {\n          mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n          meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n          supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n          company_name: supplier_id_es ? company_name_es[supplier_id_es] ? company_name_es[supplier_id_es] : '' : ''\n        },\n        dataGas: {\n          current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n          meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n          mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n          company_name: supplier_id_gs ? company_name_gs[supplier_id_gs] ? company_name_gs[supplier_id_gs] : '' : ''\n        },\n        useGas: {\n          gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n        },\n        fuel: {\n          dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n        },\n        fuel_description: {\n          dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n          elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n          gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n          same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n        },\n        // supplierInformation_fb\n        supplierInformation: {\n          electricity_supplier: {\n            mpan_core: Object.keys(supplierInformation).length > 0 ? supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '' : '',\n            meter_type: Object.keys(supplierInformation).length > 0 ? supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '' : '',\n            supplier_mpid: Object.keys(supplierInformation).length > 0 ? supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : '' : '',\n            company_name: Object.keys(supplierInformation).length > 0 ? supplier_id_es ? company_name_es[supplier_id_es] ? company_name_es[supplier_id_es] : '' : '' : ''\n          },\n\n          gas_supplier: {\n            current_supplier_id: Object.keys(supplierInformation).length > 0 ? supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '' : '',\n            meter_mechanism_code: Object.keys(supplierInformation).length > 0 ? supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '' : '',\n            mprn: Object.keys(supplierInformation).length > 0 ? supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : '' : '',\n            company_name: Object.keys(supplierInformation).length > 0 ? supplier_id_gs ? company_name_gs[supplier_id_gs] ? company_name_gs[supplier_id_gs] : '' : '' : ''\n          }\n        }\n      });\n    })()\n\n  }, [FormSupply]);\n\n  return (\n    <>\n      {/* Dual tariff */}\n      {dual_active ?\n        same_supplier ?\n          (\n            <>\n              <section className=\"form-supply-section\">\n                <div className=\"form-supply-container\">\n                  <div className=\"form-supply-content\">\n                    <div className=\"form-supply\">\n                      {/* Electricity */}\n                      <div className=\"form-supply-cb-container\" onChange={(e) => handleCheckboxES(e)}>\n                        <div>\n                          <h1>Who is your gas &amp; electricity supplier?</h1>\n                          {es_name ? (<p>According to the national database, the customer's supplier for both gas &amp; electricity is <span>{es_name}</span>. If this is correct, please procede. If not, change the supplier manuallu below.</p>) : (<p>No records found, please select manually</p>)}\n                        </div>\n                        <div className=\"cb-row\">   {/* Row one  */}\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-1\" onClick={(e) => selectOnlyThisES(e)} value=\"BGAS\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-1\">\n                              <img style={{ padding: \".6rem\" }} src={BGAS_logo} />\n                            </label>\n                          </div>\n\n                          <div data-cy=\"dualsame-edf\" className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-2\" onClick={(e) => selectOnlyThisES(e)} value=\"LOND\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-2\">\n                              <img src={EDF_logo} />\n                            </label>\n                          </div>\n\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-3\" onClick={(e) => selectOnlyThisES(e)} value=\"EMEB\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-3\">\n                              <img src={EON_logo} />\n                            </label>\n                          </div>\n                        </div>\n\n                        <div className=\"cb-row\"> {/* Row two */}\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-4\" onClick={(e) => selectOnlyThisES(e)} value=\"HYDE\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-4\">\n                              <img src={SSE_logo} />\n                            </label>\n                          </div>\n\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-5\" onClick={(e) => selectOnlyThisES(e)} value=\"SPOW\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-5\">\n                              <img src={Scottish_logo} />\n                            </label>\n                          </div>\n\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-6\" onClick={(e) => selectOnlyThisES(e)} value=\"INDE\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-6\">\n                              <img style={{ paddingTop: '.2rem' }} src={Npower_logo} />\n                            </label>\n                          </div>\n                        </div>\n                      </div>\n\n                      <h2>...or choose from the full list</h2>\n\n                      {editES ? (\n                        <div className=\"form-electricity-content\">\n                          <div className=\"supply-information-input\">\n                            <input\n                              // name=\"\"\n                              value={\n                                supplier_mpid === \"\"\n                                  ? \"Select\"\n                                  : data_electricity_supplier_name[supplier_mpid]\n                              }\n                              type=\"text\"\n                              disabled={editES}\n                              id=\"selected\"\n                              onPointerDown={() => setFocusAnimationSupplier(!focusAnimationSupplier)}\n                            />\n                            <FaRegEdit className={focusAnimationSupplier ? 'edit-search-icon icon-custom animate__animated animate__headShake' : 'edit-search-icon icon-custom'} onClick={() => { updateEditES(!editES); setFocusAnimationSupplier(false) }} />\n                            {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditES(!editES)}></i> */}\n                            {/* <i className=\"edit-icon fas fa-search\" onClick={(e) => handleSearchES(e)}></i> */}\n                            <FaSearch className=\"edit-search-icon icon-custom\" onClick={(e) => handleSearchES(e)} />\n                          </div>\n                          <div className=\"idk-my-supplier-container\">\n                            <button className=\"idk-my-supplier\" onClick={(e) => handleClickES(e)}>\"I don’t know my supplier\"</button>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"form-electricity-content\">\n                          <div className=\"supply-information-input\">\n                            <select\n                              onChange={(e) => handleChangeES(e)}\n                              value={supplier_id}\n                              name=\"supplier_id\"\n                              disabled={editES}\n                              id=\"selected\"\n                            >\n                              <option value=\"\">- Select - </option>\n                              {data_electricity_supplier_id.map((data) => (\n                                <option\n                                  id={data.supplier_id}\n                                  key={data.supplier_id}\n                                  value={data.supplier_id}\n                                >\n                                  {data.company_name}\n                                </option>\n                              ))}\n                            </select>\n                            <FaRegEdit className=\"edit-search-icon icon-custom\" onClick={() => updateEditES(!editES)} />\n                            {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditES(!editES)}></i> */}\n                            {/* <i className=\"edit-icon fas fa-search\" onClick={(e) => handleSearchES(e)}></i> */}\n                            <FaSearch className=\"edit-search-icon icon-custom\" onClick={(e) => handleSearchES(e)} />\n                          </div>\n                          <div className=\"idk-my-supplier-container\">\n                            <button className=\"idk-my-supplier\" onClick={(e) => handleClickES(e)}>\"I don’t know my supplier\"</button>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Error */}\n                      {error_electricity_supplier ? (\n                        <div className=\"error-flex\">\n                          <Error message={\"Please select a supplier\"} />\n                        </div>\n                      ) : null}\n\n                      {/* Meter Type */}\n                      <div className=\"form-electricity-meter-content\">\n                        <div className=\"form-electricity-meter-heading\">\n                          <h1>Meter Type</h1>\n                          <IconContext.Provider value={{ color: '#31145B', size: '40px' }}>\n                            <FaTachometerAlt className=\"form-electricity-meter-icon\" />\n                          </IconContext.Provider>\n                        </div>\n                        <div className=\"form-electricity-meter\">\n                          <select\n                            className=\"supply-information-input\"\n                            disabled={editMTES}\n                            onChange={(e) => handleChangeMTES(e)}\n                            value={electricity_meter_supported}\n                            id=\"meter_type_electricity\"\n                            data-cy=\"dualsame-select-mt\"\n                            onPointerDown={() => editMTES ? setFocusAnimationMeter(!focusAnimationMeter) : null}\n                          // onPointerDown={() => setFocusAnimationMeter(!focusAnimationMeter)}\n                          >\n                            <option value=\"\">- Select - </option>\n                            <option value=\"K\">Prepayment</option>\n                            <option value=\"N\">Credit</option>\n                            <option value=\"NSS\">Non-SMETS smart</option>\n                            <option value=\"S\">Smart</option>\n                            <option value=\"S1\">SMETS1</option>\n                            <option value=\"S2\">SMETS2</option>\n                            <option value=\"NOT\">Not supported</option>\n                          </select>\n\n                          <FaRegEdit data-cy=\"dualsame-mt-edit\" className={focusAnimationMeter ? 'edit-search-icon animate__animated animate__headShake' : 'edit-search-icon'} onClick={() => updateEditMTES(!editMTES)} />\n                          {/* <i data-cy=\"dualsame-mt-edit\" className=\"edit-icon far fa-edit\" onClick={() => updateEditMTES(!editMTES)}></i> */}\n                        </div>\n                      </div>\n\n                      {/* Error */}\n                      {error_electricity_meter_type ?\n                        (\n                          <div className=\"error-flex \">\n                            <Error message={\"Please select a meter type\"} />\n                          </div>\n                        )\n                        :\n                        null\n                      }\n\n                      {/* Show Electricity payment input */}\n                      {payment_electricity_input ? (\n                        <div className=\"form-electricity-payment-content\">\n                          <div className=\"form-electricity-payment-heading\">\n                            <h1>Payment type</h1>\n                            <IconContext.Provider value={{ color: '#31145B', size: '40px' }}>\n                              <FaMoneyCheckAlt className=\"form-electricity-payment-icon\" />\n                            </IconContext.Provider>\n                          </div>\n                          <select\n                            className=\"supply-information-input\"\n                            // disabled={editMTES}\n                            onChange={(e) => handleChangePTES(e)}\n                            id=\"payment_type_electricity\"\n                            data-cy=\"dualsame-select-pt\"\n                          >\n                            <option value=\"\">- Select - </option>\n                            {/* Prepayment */}\n                            {electricity_meter_supported === \"K\" ? (\n                              <option value=\"PAYG\">Pay as you go</option>\n                            )\n                              :\n                              null\n                            }\n                            {/* Standar */}\n                            {electricity_meter_supported === \"N\" ?\n                              (\n                                <>\n                                  <option value=\"MDD\">Monthly direct debit</option>\n                                  <option value=\"QDD\">\n                                    Quarterly direct debit\n                                  </option>\n                                  <option value=\"MPB\">\n                                    Monthly payment on receipt of bill\n                                  </option>\n                                  <option value=\"QPB\">\n                                    Quarterly payment on receipt of bill\n                                  </option>\n                                </>\n                              )\n                              :\n                              null\n                            }\n                            {/* Smart */}\n                            {electricity_meter_supported === \"S\" || electricity_meter_supported === \"S1\" || electricity_meter_supported.startsWith(\"S2\") || electricity_meter_supported === \"NSS\" ?\n                              (\n                                <>\n                                  <option value=\"PAYG\">Pay as you go</option>\n                                  <option value=\"MDD\">Monthly direct debit</option>\n                                  <option value=\"QDD\">\n                                    Quarterly direct debit\n                                  </option>\n                                  <option value=\"MPB\">\n                                    Monthly payment on receipt of bill\n                                  </option>\n                                  <option value=\"QPB\">\n                                    Quarterly payment on receipt of bill\n                                  </option>\n                                </>\n                              )\n                              :\n                              null\n                            }\n                            {/* Not available */}\n                            {/* {electricity_meter_supported === \"NOT\" ?\n                            (\n                              <>\n                                <option value=\"NA\">Not available</option>\n                              </>\n                            )\n                            :\n                            null\n                          } */}\n                          </select>\n                        </div>\n                      )\n                        :\n                        null\n                      }\n\n                      {/* Error */}\n                      {error_electricity_payment ?\n                        (\n                          <div className=\"error-flex \">\n                            <Error message={\"Please select a payment method\"} />\n                          </div>\n                        )\n                        :\n                        null\n                      }\n                    </div>\n\n                    {/* Buttons */}\n                    <div className=\"form-supply-btn-container\">\n                      <button className=\"form-supply-btn btn-back\" onClick={(e) => goToFormMpanMprn(e)}>\n                        <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                          <IoMdArrowDropleft className=\"icon-back\" />\n                        </IconContext.Provider>\n                        Go back\n                      </button>\n\n                      <button data-cy=\"dualsame-continue\" className=\"form-supply-btn btn-next\" onClick={(e) => goToE7(e)}>\n                        Continue\n\n                        <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                          <IoMdArrowDropright className=\"icon-next\" />\n                        </IconContext.Provider>\n                      </button>\n                    </div>\n                  </div>\n\n                  {showScript ?\n                    (\n                      <div className=\"helper-address\">\n                        <div className=\"script-address\">\n                          <FormScript step={5} />\n                        </div>\n\n                        <div className=\"assistant-address-custom\">\n                          <FormAssistant tips={4} />\n                        </div>\n                      </div>\n                    )\n                    :\n                    <div style={{ width: '100%' }}>\n                      <div className=\"assistant-address\">\n                        <FormAssistant tips={4} />\n                      </div>\n                    </div>\n                  }\n                </div>\n              </section>\n            </>\n          )\n          :\n          (\n            <>\n              <section className=\"form-supply-section\">\n                <div className=\"form-supply-container\">\n                  <div className=\"form-supply-content\">\n                    <div className=\"form-supply\">\n                      {/* Electricity */}\n                      <div className=\"form-supply-cb-container\" onChange={(e) => handleCheckboxES(e)}>\n                        <div>\n                          <h1>Who is your electricity supplier?</h1>\n                          {es_name ? (<p>According to the national database, the customer's electricity supplier  is <span>{es_name}</span>. If this is correct, please procede. If not, change the supplier manuallu below.</p>) : (<p>No records found, please select manually</p>)}\n                        </div>\n                        <div className=\"cb-row\">   {/* Row one  */}\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-1\" onClick={(e) => selectOnlyThisES(e)} value=\"BGAS\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-1\">\n                              <img style={{ padding: \".6rem\" }} src={BGAS_logo} />\n                            </label>\n                          </div>\n\n                          <div data-cy=\"dualelec-edf\" className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-2\" onClick={(e) => selectOnlyThisES(e)} value=\"LOND\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-2\">\n                              <img src={EDF_logo} />\n                            </label>\n                          </div>\n\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-3\" onClick={(e) => selectOnlyThisES(e)} value=\"EMEB\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-3\">\n                              <img src={EON_logo} />\n                            </label>\n                          </div>\n                        </div>\n\n                        <div className=\"cb-row\"> {/* Row two */}\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-4\" onClick={(e) => selectOnlyThisES(e)} value=\"HYDE\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-4\">\n                              <img src={SSE_logo} />\n                            </label>\n                          </div>\n\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-5\" onClick={(e) => selectOnlyThisES(e)} value=\"SPOW\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-5\">\n                              <img src={Scottish_logo} />\n                            </label>\n                          </div>\n\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-6\" onClick={(e) => selectOnlyThisES(e)} value=\"INDE\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-6\">\n                              <img style={{ paddingTop: '.2rem' }} src={Npower_logo} />\n                            </label>\n                          </div>\n                        </div>\n                      </div>\n\n                      <h2>...or choose from the full list</h2>\n\n                      {editES ? (\n                        <div className=\"form-electricity-content\">\n                          <div className=\"supply-information-input\">\n                            <input\n                              // name=\"\"\n                              value={\n                                supplier_mpid === \"\"\n                                  ? \"Select\"\n                                  : data_electricity_supplier_name[supplier_mpid]\n                              }\n                              type=\"text\"\n                              disabled={editES}\n                              id=\"selected\"\n                              onPointerDown={() => setFocusAnimationSupplier(!focusAnimationSupplier)}\n                            />\n                            <FaRegEdit className={focusAnimationSupplier ? 'edit-search-icon icon-custom animate__animated animate__headShake' : 'edit-search-icon icon-custom'} onClick={() => { updateEditES(!editES); setFocusAnimationSupplier(false) }} />\n                            {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditES(!editES)}></i> */}\n                            {/* <i className=\"edit-icon fas fa-search\" onClick={(e) => handleSearchES(e)}></i> */}\n                            <FaSearch className=\"edit-search-icon icon-custom\" onClick={(e) => handleSearchES(e)} />\n                          </div>\n                          <div className=\"idk-my-supplier-container\">\n                            <button className=\"idk-my-supplier\" onClick={(e) => handleClickES(e)}>\"I don’t know my supplier\"</button>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"form-electricity-content\">\n                          <div className=\"supply-information-input\">\n                            <select\n                              onChange={(e) => handleChangeES(e)}\n                              value={supplier_id}\n                              name=\"supplier_id\"\n                              disabled={editES}\n                              id=\"selected\"\n                            >\n                              <option value=\"\">- Select - </option>\n                              {data_electricity_supplier_id.map((data) => (\n                                <option\n                                  id={data.supplier_id}\n                                  key={data.supplier_id}\n                                  value={data.supplier_id}\n                                >\n                                  {data.company_name}\n                                </option>\n                              ))}\n                            </select>\n                            <FaRegEdit className=\"edit-search-icon icon-custom\" onClick={() => updateEditES(!editES)} />\n                            {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditES(!editES)}></i> */}\n                            {/* <i className=\"edit-icon fas fa-search\" onClick={(e) => handleSearchES(e)}></i> */}\n                            <FaSearch className=\"edit-search-icon icon-custom\" onClick={(e) => handleSearchES(e)} />\n                          </div>\n                          <div className=\"idk-my-supplier-container\">\n                            <button className=\"idk-my-supplier\" onClick={(e) => handleClickES(e)}>\"I don’t know my supplier\"</button>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Error */}\n                      {error_electricity_supplier ? (\n                        <div className=\"error-flex\">\n                          <Error message={\"Please select a supplier\"} />\n                        </div>\n                      ) : null}\n\n                      {/* Meter Type */}\n                      <div className=\"form-electricity-meter-content\">\n                        <div className=\"form-electricity-meter-heading\">\n                          <h1>Meter Type</h1>\n                          <IconContext.Provider value={{ color: '#31145B', size: '40px' }}>\n                            <FaTachometerAlt className=\"form-electricity-meter-icon\" />\n                          </IconContext.Provider>\n                        </div>\n                        <div className=\"form-electricity-meter\">\n                          <select\n                            className=\"supply-information-input\"\n                            disabled={editMTES}\n                            onChange={(e) => handleChangeMTES(e)}\n                            value={electricity_meter_supported}\n                            id=\"meter_type_electricity\"\n                            data-cy=\"dualdi-select-mt-es\"\n                            onPointerDown={() => editMTES ? setFocusAnimationMeter(!focusAnimationMeter) : null}\n                          >\n                            <option value=\"\">- Select - </option>\n                            <option value=\"K\">Prepayment</option>\n                            <option value=\"N\">Credit</option>\n                            <option value=\"NSS\">Non-SMETS smart</option>\n                            <option value=\"S\">Smart</option>\n                            <option value=\"S1\">SMETS1</option>\n                            <option value=\"S2\">SMETS2</option>\n                            <option value=\"NOT\">Not supported</option>\n                          </select>\n\n                          <FaRegEdit data-cy=\"dualdi-mt-edit-es\" className={focusAnimationMeter ? 'edit-search-icon animate__animated animate__headShake' : 'edit-search-icon'} onClick={() => updateEditMTES(!editMTES)} />\n                          {/* <i data-cy=\"dualdi-mt-edit-es\" className=\"edit-icon far fa-edit\" onClick={() => updateEditMTES(!editMTES)}></i> */}\n                        </div>\n                      </div>\n\n                      {/* Error */}\n                      {error_electricity_meter_type ?\n                        (\n                          <div className=\"error-flex \">\n                            <Error message={\"Please select a meter type\"} />\n                          </div>\n                        )\n                        :\n                        null\n                      }\n\n                      {/* Show Electricity payment input */}\n                      {payment_electricity_input ? (\n                        <div className=\"form-electricity-payment-content\">\n                          <div className=\"form-electricity-payment-heading\">\n                            <h1>Payment type</h1>\n                            <IconContext.Provider value={{ color: '#31145B', size: '40px' }}>\n                              <FaMoneyCheckAlt className=\"form-electricity-payment-icon\" />\n                            </IconContext.Provider>\n                          </div>\n                          <select\n                            className=\"supply-information-input\"\n                            // disabled={editMTES}\n                            onChange={(e) => handleChangePTES(e)}\n                            id=\"payment_type_electricity\"\n                            data-cy=\"dualdi-select-pt-es\"\n                          >\n                            <option value=\"\">- Select - </option>\n                            {/* Prepayment */}\n                            {electricity_meter_supported === \"K\" ? (\n                              <option value=\"PAYG\">Pay as you go</option>\n                            )\n                              :\n                              null\n                            }\n                            {/* Standar */}\n                            {electricity_meter_supported === \"N\" ?\n                              (\n                                <>\n                                  <option value=\"MDD\">Monthly direct debit</option>\n                                  <option value=\"QDD\">\n                                    Quarterly direct debit\n                                  </option>\n                                  <option value=\"MPB\">\n                                    Monthly payment on receipt of bill\n                                  </option>\n                                  <option value=\"QPB\">\n                                    Quarterly payment on receipt of bill\n                                  </option>\n                                </>\n                              )\n                              :\n                              null\n                            }\n                            {/* Smart */}\n                            {electricity_meter_supported === \"S\" || electricity_meter_supported === \"S1\" || electricity_meter_supported.startsWith(\"S2\") || electricity_meter_supported === \"NSS\" ?\n                              (\n                                <>\n                                  <option value=\"PAYG\">Pay as you go</option>\n                                  <option value=\"MDD\">Monthly direct debit</option>\n                                  <option value=\"QDD\">\n                                    Quarterly direct debit\n                                  </option>\n                                  <option value=\"MPB\">\n                                    Monthly payment on receipt of bill\n                                  </option>\n                                  <option value=\"QPB\">\n                                    Quarterly payment on receipt of bill\n                                  </option>\n                                </>\n                              )\n                              :\n                              null\n                            }\n                            {/* Not available */}\n                            {/* {electricity_meter_supported === \"NOT\" ?\n                            (\n                              <>\n                                <option value=\"NA\">Not available</option>\n                              </>\n                            )\n                            :\n                            null\n                          } */}\n                          </select>\n                        </div>\n                      )\n                        :\n                        null\n                      }\n\n                      {/* Error */}\n                      {error_electricity_payment ?\n                        (\n                          <div className=\"error-flex \">\n                            <Error message={\"Please select a payment method\"} />\n                          </div>\n                        )\n                        :\n                        null\n                      }\n\n                      <hr /> {/* Supplier divider */}\n\n                      {/* Gas */}\n                      <div className=\"form-supply-cb-container\" onChange={(e) => handleCheckboxGS(e)}>\n                        <div>\n                          <h1>Who is your gas supplier?</h1>\n                          {gs_name ? (<p>According to the national database, the customer's gas supplier  is <span>{gs_name}</span>. If this is correct, please procede. If not, change the supplier manuallu below.</p>) : (<p>No records found, please select manually</p>)}\n                        </div>\n                        <div className=\"cb-row\">   {/* Row one  */}\n                          <div data-cy=\"dualgas-british\" className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-1\" onClick={(e) => selectOnlyThisGS(e)} value=\"BGT\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-1\">\n                              <img style={{ padding: \".6rem\" }} src={BGAS_logo} />\n                            </label>\n                          </div>\n\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-2\" onClick={(e) => selectOnlyThisGS(e)} value=\"LED\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-2\">\n                              <img src={EDF_logo} />\n                            </label>\n                          </div>\n\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-3\" onClick={(e) => selectOnlyThisGS(e)} value=\"SGL\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-3\">\n                              <img src={EON_logo} />\n                            </label>\n                          </div>\n                        </div>\n\n                        <div className=\"cb-row\"> {/* Row two */}\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-4\" onClick={(e) => selectOnlyThisGS(e)} value=\"ATL\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-4\">\n                              <img src={SSE_logo} />\n                            </label>\n                          </div>\n\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-5\" onClick={(e) => selectOnlyThisGS(e)} value=\"SCT\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-5\">\n                              <img src={Scottish_logo} />\n                            </label>\n                          </div>\n\n                          <div className=\"form-supply-cb-content\">\n                            <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-6\" onClick={(e) => selectOnlyThisGS(e)} value=\"NRZ\" />\n                            <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                              <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                                <FaCheckSquare className=\"cb-icon\" />\n                              </IconContext.Provider>\n                            </div>\n\n                            <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-6\">\n                              <img style={{ paddingTop: '.2rem' }} src={Npower_logo} />\n                            </label>\n                          </div>\n                        </div>\n                      </div>\n\n                      <h2>...or choose from the full list</h2>\n\n                      {editGS ? (\n                        <div className=\"form-gas-content\">\n                          <div className=\"supply-information-input\">\n                            <input\n                              // name=\"\"\n                              value={\n                                current_supplier_id === \"\"\n                                  ? \"Select\"\n                                  : data_gas_supplier_name[current_supplier_id]\n                              }\n                              type=\"text\"\n                              disabled={editGS}\n                              id=\"gas_selected\"\n                              onPointerDown={() => setFocusAnimationSupplier(!focusAnimationSupplier)}\n                            />\n                            <FaRegEdit className={focusAnimationSupplier ? 'edit-search-icon icon-custom animate__animated animate__headShake' : 'edit-search-icon icon-custom'} onClick={() => { updateEditGS(!editGS); setFocusAnimationSupplier(false) }} />\n                            {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditGS(!editGS)}></i> */}\n                            {/* <i className=\"edit-icon fas fa-search\" onClick={(e) => handleSearchGS(e)}></i> */}\n                            <FaSearch className=\"edit-search-icon icon-custom\" onClick={(e) => handleSearchGS(e)} />\n                          </div>\n                          <button className=\"idk-my-supplier\" onClick={(e) => handleClickGS(e)}>\"I don’t know my supplier\"</button>\n                        </div>\n                      ) : (\n                        <div className=\"form-gas-content\">\n                          <div className=\"supply-information-input\">\n                            <select\n                              onChange={(e) => handleChangeGS(e)}\n                              value={current_supplier_id}\n                              name=\"current_supplier_id\"\n                              disabled={editGS}\n                              id=\"gas_selected\"\n                            >\n                              <option value=\"\">- Select - </option>\n                              {data_gas_supplier_id.map((data) => (\n                                <option\n                                  id={data.supplier_id}\n                                  key={data.supplier_id}\n                                  value={data.supplier_id}\n                                >\n                                  {data.company_name}\n                                </option>\n                              ))}\n                            </select>\n                            <FaRegEdit className=\"edit-search-icon icon-custom\" onClick={() => updateEditGS(!editGS)} />\n                            {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditGS(!editGS)}></i> */}\n                            {/* <i className=\"edit-icon fas fa-search\" onClick={(e) => handleSearchGS(e)}></i> */}\n                            <FaSearch className=\"edit-search-icon icon-custom\" onClick={(e) => handleSearchGS(e)} />\n                          </div>\n                          <button className=\"idk-my-supplier\" onClick={(e) => handleClickGS(e)}>\"I don’t know my supplier\"</button>\n                        </div>\n                      )}\n\n                      {/* Error */}\n                      {error_gas_supplier ? (\n                        <div className=\"error-flex\">\n                          <Error message={\"Please select a supplier\"} />\n                        </div>\n                      ) : null}\n\n                      {/* Meter type */}\n                      <div className=\"form-gas-meter-content\">\n                        <div className=\"form-gas-meter-heading\">\n                          <h1>Meter Type</h1>\n                          <IconContext.Provider value={{ color: '#31145B', size: '40px' }}>\n                            <FaTachometerAlt className=\"form-gas-meter-icon\" />\n                          </IconContext.Provider>\n                        </div>\n                        <div className=\"form-gas-meter\">\n                          <select\n                            className=\"supply-information-input\"\n                            disabled={editMTGS}\n                            onChange={(e) => handleChangeMTGS(e)}\n                            value={gas_meter_supported}\n                            id=\"meter_type_gas\"\n                            data-cy=\"dualdi-select-mt-gs\"\n                            onPointerDown={() => editMTGS ? setFocusAnimationMeter(!focusAnimationMeter) : null}\n                          >\n                            <option value=\"\">- Select - </option>\n                            <option value=\"PP\">Prepayment</option>\n                            <option value=\"CR\">Credit</option>\n                            <option value=\"NS\">Non-SMETS smart</option>\n                            <option value=\"S1\">SMETS1</option>\n                            <option value=\"S2\">SMETS2</option>\n                            <option value=\"NOT\">Not supported</option>\n                          </select>\n                          <FaRegEdit data-cy=\"dualdi-mt-edit-gs\" className={focusAnimationMeter ? 'edit-search-icon animate__animated animate__headShake' : 'edit-search-icon'} onClick={() => updateEditMTGS(!editMTGS)} />\n                          {/* <i data-cy=\"dualdi-mt-edit-gs\" className=\"edit-icon far fa-edit\" onClick={() => updateEditMTGS(!editMTGS)}></i> */}\n                        </div>\n                      </div>\n\n                      {/* Error */}\n                      {error_gas_meter_type ? (\n                        <div className=\"error-flex\">\n                          <Error message={\"Please select a meter type\"} />\n                        </div>\n                      ) : null}\n\n                      {/* Show Gas payment input */}\n                      {payment_gas_input ? (\n                        <div className=\"form-gas-payment-content\">\n                          <div className=\"form-gas-payment-heading\">\n                            <h1>Payment Type</h1>\n                            <IconContext.Provider value={{ color: '#31145B', size: '40px' }}>\n                              <FaMoneyCheckAlt className=\"form-gas-payment-icon\" />\n                            </IconContext.Provider>\n                          </div>\n                          <select\n                            className=\"supply-information-input\"\n                            onChange={(e) => handleChangePTGS(e)}\n                            id=\"payment_type_gas\"\n                            data-cy=\"dualdi-select-pt-gs\"\n                          >\n                            <option value=\"\">- Select - </option>\n                            {/* Prepayment */}\n                            {gas_meter_supported === \"PP\" ? (\n                              <option value=\"PAYG\">Pay as you go</option>\n                            )\n                              :\n                              null\n                            }\n                            {/* Standar */}\n                            {gas_meter_supported === \"CR\" ? (\n                              <>\n                                <option value=\"MDD\">Monthly direct debit</option>\n                                <option value=\"QDD\">\n                                  Quarterly direct debit\n                                </option>\n                                <option value=\"MPB\">\n                                  Monthly payment on receipt of bill\n                                </option>\n                                <option value=\"QPB\">\n                                  Quarterly payment on receipt of bill\n                                </option>\n                              </>\n                            )\n                              :\n                              null\n                            }\n                            {/* Smart */}\n                            {gas_meter_supported === \"S\" || gas_meter_supported === \"S1\" || gas_meter_supported.startsWith(\"S2\") || gas_meter_supported === \"NS\" ? (\n                              <>\n                                <option value=\"PAYG\">Pay as you go</option>\n                                <option value=\"MDD\">Monthly direct debit</option>\n                                <option value=\"QDD\">\n                                  Quarterly direct debit\n                                </option>\n                                <option value=\"MPB\">\n                                  Monthly payment on receipt of bill\n                                </option>\n                                <option value=\"QPB\">\n                                  Quarterly payment on receipt of bill\n                                </option>\n                              </>\n                            )\n                              :\n                              null\n                            }\n                            {/* Not available */}\n                            {/* {gas_meter_supported === \"NOT\" ?\n                                  (\n                                    <>\n                                      <option value=\"NA\">Not available</option>\n                                    </>\n                                  )\n                                  :\n                                  null\n                                } */}\n                          </select>\n                        </div>\n                      )\n                        :\n                        null\n                      }\n\n                      {/* Error */}\n                      {error_gas_payment ?\n                        (\n                          <div className=\"error-flex \">\n                            <Error message={\"Please select a payment method\"} />\n                          </div>\n                        )\n                        :\n                        null\n                      }\n                    </div>\n\n\n                    {/* Buttons */}\n                    <div className=\"form-supply-btn-container\">\n                      <button className=\"form-supply-btn btn-back\" onClick={(e) => goToFormMpanMprn(e)}>\n                        <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                          <IoMdArrowDropleft className=\"icon-back\" />\n                        </IconContext.Provider>\n                        Go back\n                      </button>\n\n                      <button data-cy=\"dualdi-continue\" className=\"form-supply-btn btn-next\" onClick={(e) => goToE7(e)}>\n                        Continue\n\n                        <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                          <IoMdArrowDropright className=\"icon-next\" />\n                        </IconContext.Provider>\n                      </button>\n                    </div>\n                  </div>\n\n                  {showScript ?\n                    (\n                      <div className=\"helper-address\">\n                        <div className=\"script-address\">\n                          <FormScript step={5} />\n                        </div>\n\n                        <div className=\"assistant-address-custom\">\n                          <FormAssistant tips={4} />\n                        </div>\n                      </div>\n                    )\n                    :\n                    <div style={{ width: '100%' }}>\n                      <div className=\"assistant-address\">\n                        <FormAssistant tips={4} />\n                      </div>\n                    </div>\n                  }\n                </div>\n              </section>\n            </>\n          )\n        :\n        null\n      }\n\n      {/* Elec only */}\n      {elec_only ?\n        (\n          <>\n            <section className=\"form-supply-section\">\n              <div className=\"form-supply-container\">\n                <div className=\"form-supply-content\">\n                  <div className=\"form-supply\">\n                    {/* Electricity */}\n                    <div className=\"form-supply-cb-container\" onChange={(e) => handleCheckboxES(e)}>\n                      <div>\n                        <h1>Who is your electricity supplier?</h1>\n                        {es_name ? (<p>According to the national database, the customer's electricity supplier  is <span>{es_name}</span>. If this is correct, please procede. If not, change the supplier manuallu below.</p>) : (<p>No records found, please select manually</p>)}\n                      </div>\n                      <div className=\"cb-row\">   {/* Row one  */}\n                        <div className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-1\" onClick={(e) => selectOnlyThisES(e)} value=\"BGAS\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-1\">\n                            <img style={{ padding: \".6rem\" }} src={BGAS_logo} />\n                          </label>\n                        </div>\n\n                        <div className=\"form-supply-cb-content\" data-cy=\"eleconly-edf\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-2\" onClick={(e) => selectOnlyThisES(e)} value=\"LOND\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-2\">\n                            <img src={EDF_logo} />\n                          </label>\n                        </div>\n\n                        <div className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-3\" onClick={(e) => selectOnlyThisES(e)} value=\"EMEB\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-3\">\n                            <img src={EON_logo} />\n                          </label>\n                        </div>\n                      </div>\n\n                      <div className=\"cb-row\"> {/* Row two */}\n                        <div className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-4\" onClick={(e) => selectOnlyThisES(e)} value=\"HYDE\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-4\">\n                            <img src={SSE_logo} />\n                          </label>\n                        </div>\n\n                        <div className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-5\" onClick={(e) => selectOnlyThisES(e)} value=\"SPOW\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-5\">\n                            <img src={Scottish_logo} />\n                          </label>\n                        </div>\n\n                        <div className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_es-6\" onClick={(e) => selectOnlyThisES(e)} value=\"INDE\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_es-6\">\n                            <img style={{ paddingTop: '.2rem' }} src={Npower_logo} />\n                          </label>\n                        </div>\n                      </div>\n                    </div>\n\n                    <h2>...or choose from the full list</h2>\n\n                    {editES ? (\n                      <div className=\"form-electricity-content\">\n                        <div className=\"supply-information-input\">\n                          <input\n                            // name=\"\"\n                            value={\n                              supplier_mpid === \"\"\n                                ? \"Select\"\n                                : data_electricity_supplier_name[supplier_mpid]\n                                // : data_electricity_supplier_name[supplier_mpid] || data_custom_es.filter(data => data.supplier_id === supplier_id)[0].company_name  --> To use if the data comming from API's are duplicated, for the future. Need to be integrated properly with another changes - lolo\n                            }\n                            type=\"text\"\n                            disabled={editES}\n                            id=\"selected\"\n                            onPointerDown={() => setFocusAnimationSupplier(!focusAnimationSupplier)}\n                          />\n                          <FaRegEdit className={focusAnimationSupplier ? 'edit-search-icon icon-custom animate__animated animate__headShake' : 'edit-search-icon icon-custom'} onClick={() => { updateEditES(!editES); setFocusAnimationSupplier(false); }} />\n                          {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditES(!editES)}></i> */}\n                          {/* <i className=\"edit-icon fas fa-search\" onClick={(e) => handleSearchES(e)}></i> */}\n                          <FaSearch className=\"edit-search-icon icon-custom\" onClick={(e) => handleSearchES(e)} />\n                        </div>\n                        <div className=\"idk-my-supplier-container\">\n                          <button className=\"idk-my-supplier\" onClick={(e) => handleClickES(e)}>\"I don’t know my supplier\"</button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"form-electricity-content\">\n                        <div className=\"supply-information-input\">\n                          <select\n                            onChange={(e) => handleChangeES(e)}\n                            value={supplier_id}\n                            name=\"supplier_id\"\n                            disabled={editES}\n                            id=\"selected\"\n                          >\n                            <option value=\"\">- Select - </option>\n                            {data_custom_es.map((data) => (\n                              <option\n                                id={data.supplier_id}\n                                key={data.supplier_id}\n                                value={data.supplier_id}\n                              >\n                                {data.company_name}\n                              </option>\n                            ))}\n                          </select>\n                          <FaRegEdit className=\"edit-search-icon icon-custom\" onClick={() => updateEditES(!editES)} />\n                          {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditES(!editES)}></i> */}\n                          {/* <i className=\"edit-icon fas fa-search\" onClick={(e) => handleSearchES(e)}></i> */}\n                          <FaSearch className=\"edit-search-icon icon-custom\" onClick={(e) => handleSearchES(e)} />\n                        </div>\n                        <div className=\"idk-my-supplier-container\">\n                          <button className=\"idk-my-supplier\" onClick={(e) => handleClickES(e)}>\"I don’t know my supplier\"</button>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Error */}\n                    {error_electricity_supplier ? (\n                      <div className=\"error-flex\">\n                        <Error message={\"Please select a supplier\"} />\n                      </div>\n                    ) : null}\n\n                    {/* Meter Type */}\n                    <div className=\"form-electricity-meter-content\">\n                      <div className=\"form-electricity-meter-heading\">\n                        <h1>Meter Type</h1>\n                        <IconContext.Provider value={{ color: '#31145B', size: '40px' }}>\n                          <FaTachometerAlt className=\"form-electricity-meter-icon\" />\n                        </IconContext.Provider>\n                      </div>\n                      <div className=\"form-electricity-meter\">\n                        <select\n                          className=\"supply-information-input\"\n                          disabled={editMTES}\n                          onChange={(e) => handleChangeMTES(e)}\n                          value={electricity_meter_supported}\n                          id=\"meter_type_electricity\"\n                          data-cy=\"eleconly-select-mt\"\n                          onPointerDown={() => editMTES ? setFocusAnimationMeter(!focusAnimationMeter) : null}\n                        >\n                          <option value=\"\">- Select - </option>\n                          <option value=\"K\">Prepayment</option>\n                          <option value=\"N\">Credit</option>\n                          <option value=\"NSS\">Non-SMETS smart</option>\n                          <option value=\"S\">Smart</option>\n                          <option value=\"S1\">SMETS1</option>\n                          <option value=\"S2\">SMETS2</option>\n                          <option value=\"NOT\">Not supported</option>\n                        </select>\n\n                        <FaRegEdit className={focusAnimationMeter ? 'edit-search-icon animate__animated animate__headShake' : 'edit-search-icon'} onClick={() => updateEditMTES(!editMTES)} data-cy=\"eleconly-mt-edit\" />\n                        {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditMTES(!editMTES)} data-cy=\"eleconly-mt-edit\"></i> */}\n                      </div>\n                    </div>\n\n                    {/* Error */}\n                    {error_electricity_meter_type ?\n                      (\n                        <div className=\"error-flex \">\n                          <Error message={\"Please select a meter type\"} />\n                        </div>\n                      )\n                      :\n                      null\n                    }\n\n                    {/* Show Electricity payment input */}\n                    {payment_electricity_input ? (\n                      <div className=\"form-electricity-payment-content\">\n                        <div className=\"form-electricity-payment-heading\">\n                          <h1>Payment type</h1>\n                          <IconContext.Provider value={{ color: '#31145B', size: '40px' }}>\n                            <FaMoneyCheckAlt className=\"form-electricity-payment-icon\" />\n                          </IconContext.Provider>\n                        </div>\n                        <select\n                          className=\"supply-information-input\"\n                          // disabled={editMTES}\n                          onChange={(e) => handleChangePTES(e)}\n                          id=\"payment_type_electricity\"\n                          data-cy=\"eleconly-select-pt\"\n                        >\n                          <option value=\"\">- Select - </option>\n                          {/* Prepayment */}\n                          {electricity_meter_supported === \"K\" ? (\n                            <option value=\"PAYG\">Pay as you go</option>\n                          )\n                            :\n                            null\n                          }\n                          {/* Standar */}\n                          {electricity_meter_supported === \"N\" ?\n                            (\n                              <>\n                                <option value=\"MDD\">Monthly direct debit</option>\n                                <option value=\"QDD\">\n                                  Quarterly direct debit\n                                </option>\n                                <option value=\"MPB\">\n                                  Monthly payment on receipt of bill\n                                </option>\n                                <option value=\"QPB\">\n                                  Quarterly payment on receipt of bill\n                                </option>\n                              </>\n                            )\n                            :\n                            null\n                          }\n                          {/* Smart */}\n                          {electricity_meter_supported === \"S\" || electricity_meter_supported === \"S1\" || electricity_meter_supported.startsWith(\"S2\") || electricity_meter_supported === \"NSS\" ?\n                            (\n                              <>\n                                <option value=\"PAYG\">Pay as you go</option>\n                                <option value=\"MDD\">Monthly direct debit</option>\n                                <option value=\"QDD\">\n                                  Quarterly direct debit\n                                </option>\n                                <option value=\"MPB\">\n                                  Monthly payment on receipt of bill\n                                </option>\n                                <option value=\"QPB\">\n                                  Quarterly payment on receipt of bill\n                                </option>\n                              </>\n                            )\n                            :\n                            null\n                          }\n                          {/* Not available */}\n                          {/* {electricity_meter_supported === \"NOT\" ?\n                            (\n                              <>\n                                <option value=\"NA\">Not available</option>\n                              </>\n                            )\n                            :\n                            null\n                          } */}\n                        </select>\n                        {/* <i\n                          style={{ color: \"transparent\", cursor: \"auto\" }}\n                          className=\"edit-icon far fa-edit\"\n                        ></i> */}\n                      </div>\n                    )\n                      :\n                      null\n                    }\n\n                    {/* Error */}\n                    {error_electricity_payment ?\n                      (\n                        <div className=\"error-flex \">\n                          <Error message={\"Please select a payment method\"} />\n                        </div>\n                      )\n                      :\n                      null\n                    }\n                  </div>\n\n                  {/* Buttons */}\n                  <div className=\"form-supply-btn-container\">\n                    <button className=\"form-supply-btn btn-back\" onClick={(e) => goToFormMpanMprn(e)}>\n                      <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                        <IoMdArrowDropleft className=\"icon-back\" />\n                      </IconContext.Provider>\n                      Go back\n                    </button>\n\n                    <button data-cy=\"eleconly-continue\" className=\"form-supply-btn btn-next\" onClick={(e) => goToE7(e)}>\n                      Continue\n\n                      <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                        <IoMdArrowDropright className=\"icon-next\" />\n                      </IconContext.Provider>\n                    </button>\n                  </div>\n                </div>\n\n                {showScript ?\n                  (\n                    <div className=\"helper-address\">\n                      <div className=\"script-address\">\n                        <FormScript step={5} />\n                      </div>\n\n                      <div className=\"assistant-address-custom\">\n                        <FormAssistant tips={4} />\n                      </div>\n                    </div>\n                  )\n                  :\n                  <div style={{ width: '100%' }}>\n                    <div className=\"assistant-address\">\n                      <FormAssistant tips={4} />\n                    </div>\n                  </div>\n                }\n              </div>\n            </section>\n          </>\n        )\n        :\n        null\n      }\n\n      {/* Gas only */}\n      {gas_only ?\n        (\n          <>\n            <section className=\"form-supply-section\">\n              <div className=\"form-supply-container\">\n                <div className=\"form-supply-content\">\n                  <div className=\"form-supply\">\n                    {/* Gas */}\n                    <div className=\"form-supply-cb-container\" onChange={(e) => handleCheckboxGS(e)}>\n                      <div>\n                        <h1>Who is your gas supplier?</h1>\n                        {gs_name ? (<p>According to the national database, the customer's gas supplier  is <span>{gs_name}</span>. If this is correct, please procede. If not, change the supplier manuallu below.</p>) : (<p>No records found, please select manually</p>)}\n                      </div>\n                      <div className=\"cb-row\">   {/* Row one  */}\n                        <div className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-1\" onClick={(e) => selectOnlyThisGS(e)} value=\"BGT\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-1\">\n                            <img style={{ padding: \".6rem\" }} src={BGAS_logo} />\n                          </label>\n                        </div>\n\n                        <div data-cy=\"gasonly-edf\" className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-2\" onClick={(e) => selectOnlyThisGS(e)} value=\"LED\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-2\">\n                            <img src={EDF_logo} />\n                          </label>\n                        </div>\n\n                        <div className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-3\" onClick={(e) => selectOnlyThisGS(e)} value=\"SGL\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-3\">\n                            <img src={EON_logo} />\n                          </label>\n                        </div>\n                      </div>\n\n                      <div className=\"cb-row\"> {/* Row two */}\n                        <div className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-4\" onClick={(e) => selectOnlyThisGS(e)} value=\"ATL\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-4\">\n                            <img src={SSE_logo} />\n                          </label>\n                        </div>\n\n                        <div className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-5\" onClick={(e) => selectOnlyThisGS(e)} value=\"SCT\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-5\">\n                            <img src={Scottish_logo} />\n                          </label>\n                        </div>\n\n                        <div className=\"form-supply-cb-content\">\n                          <input className=\"form-supply-input\" type=\"checkbox\" id=\"cb_gs-6\" onClick={(e) => selectOnlyThisGS(e)} value=\"NRZ\" />\n                          <div className=\"form-supply-cb-container-icon\" id=\"cb-icon\">\n                            <IconContext.Provider value={{ color: '#D338AE', size: '20px' }}>\n                              <FaCheckSquare className=\"cb-icon\" />\n                            </IconContext.Provider>\n                          </div>\n\n                          <label className=\"form-supply-cb-label\" htmlFor=\"cb_gs-6\">\n                            <img style={{ paddingTop: '.2rem' }} src={Npower_logo} />\n                          </label>\n                        </div>\n                      </div>\n                    </div>\n\n                    <h2>...or choose from the full list</h2>\n\n                    {editGS ? (\n                      <div className=\"form-gas-content\">\n                        <div className=\"supply-information-input\">\n                          <input\n                            // name=\"\"\n                            value={\n                              current_supplier_id === \"\"\n                                ? \"Select\"\n                                : data_gas_supplier_name[current_supplier_id]\n                            }\n                            type=\"text\"\n                            disabled={editGS}\n                            id=\"gas_selected\"\n                            onPointerDown={() => setFocusAnimationSupplier(!focusAnimationSupplier)}\n                          />\n                          <FaRegEdit className={focusAnimationSupplier ? 'edit-search-icon icon-custom animate__animated animate__headShake' : 'edit-search-icon icon-custom'} onClick={() => { updateEditGS(!editGS); setFocusAnimationSupplier(false) }} />\n                          {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditGS(!editGS)}></i> */}\n                          {/* <i className=\"edit-icon fas fa-search\" onClick={(e) => handleSearchGS(e)}></i> */}\n                          <FaSearch className=\"edit-search-icon icon-custom\" onClick={(e) => handleSearchGS(e)} />\n                        </div>\n                        <button className=\"idk-my-supplier\" onClick={(e) => handleClickGS(e)}>\"I don’t know my supplier\"</button>\n                      </div>\n                    ) : (\n                      <div className=\"form-gas-content\">\n                        <div className=\"supply-information-input\">\n                          <select\n                            onChange={(e) => handleChangeGS(e)}\n                            value={current_supplier_id}\n                            name=\"current_supplier_id\"\n                            disabled={editGS}\n                            id=\"gas_selected\"\n                          >\n                            <option value=\"\">- Select - </option>\n                            {data_gas_supplier_id.map((data) => (\n                              <option\n                                id={data.supplier_id}\n                                key={data.supplier_id}\n                                value={data.supplier_id}\n                              >\n                                {data.company_name}\n                              </option>\n                            ))}\n                          </select>\n                          <FaRegEdit className=\"edit-search-icon icon-custom\" onClick={() => updateEditGS(!editGS)} />\n                          {/* <i className=\"edit-icon far fa-edit\" onClick={() => updateEditGS(!editGS)}></i> */}\n                          {/* <i className=\"edit-icon fas fa-search\" onClick={(e) => handleSearchGS(e)}></i> */}\n                          <FaSearch className=\"edit-search-icon icon-custom\" onClick={(e) => handleSearchGS(e)} />\n                        </div>\n                        <button className=\"idk-my-supplier\" onClick={(e) => handleClickGS(e)}>\"I don’t know my supplier\"</button>\n                      </div>\n                    )}\n\n                    {/* Error */}\n                    {error_gas_supplier ? (\n                      <div className=\"error-flex\">\n                        <Error message={\"Please select a supplier\"} />\n                      </div>\n                    ) : null}\n\n                    {/* Meter type */}\n                    <div className=\"form-gas-meter-content\">\n                      <div className=\"form-gas-meter-heading\">\n                        <h1>Meter Type</h1>\n                        <IconContext.Provider value={{ color: '#31145B', size: '40px' }}>\n                          <FaTachometerAlt className=\"form-gas-meter-icon\" />\n                        </IconContext.Provider>\n                      </div>\n                      <div className=\"form-gas-meter\">\n                        <select\n                          className=\"supply-information-input\"\n                          disabled={editMTGS}\n                          onChange={(e) => handleChangeMTGS(e)}\n                          value={gas_meter_supported}\n                          id=\"meter_type_gas\"\n                          data-cy=\"gasonly-select-mt\"\n                          onPointerDown={() => editMTGS ? setFocusAnimationMeter(!focusAnimationMeter) : null}\n                        >\n                          <option value=\"\">- Select - </option>\n                          <option value=\"PP\">Prepayment</option>\n                          <option value=\"CR\">Credit</option>\n                          <option value=\"NS\">Non-SMETS smart</option>\n                          <option value=\"S1\">SMETS1</option>\n                          <option value=\"S2\">SMETS2</option>\n                          <option value=\"NOT\">Not supported</option>\n                        </select>\n                        <FaRegEdit data-cy=\"gasonly-mt-edit\" className={focusAnimationMeter ? 'edit-search-icon animate__animated animate__headShake' : 'edit-search-icon'} onClick={() => updateEditMTGS(!editMTGS)} />\n                        {/* <i data-cy=\"gasonly-mt-edit\" className=\"edit-icon far fa-edit\" onClick={() => updateEditMTGS(!editMTGS)}></i> */}\n                      </div>\n                    </div>\n\n                    {/* Error */}\n                    {error_gas_meter_type ? (\n                      <div className=\"error-flex\">\n                        <Error message={\"Please select a meter type\"} />\n                      </div>\n                    ) : null}\n\n                    {/* Show Gas payment input */}\n                    {payment_gas_input ? (\n                      <div className=\"form-gas-payment-content\">\n                        <div className=\"form-gas-payment-heading\">\n                          <h1>Payment Type</h1>\n                          <IconContext.Provider value={{ color: '#31145B', size: '40px' }}>\n                            <FaMoneyCheckAlt className=\"form-gas-payment-icon\" />\n                          </IconContext.Provider>\n                        </div>\n                        <select\n                          className=\"supply-information-input\"\n                          onChange={(e) => handleChangePTGS(e)}\n                          id=\"payment_type_gas\"\n                          data-cy=\"gasonly-select-pt\"\n                        >\n                          <option value=\"\">- Select - </option>\n                          {/* Prepayment */}\n                          {gas_meter_supported === \"PP\" ? (\n                            <option value=\"PAYG\">Pay as you go</option>\n                          )\n                            :\n                            null\n                          }\n                          {/* Standar */}\n                          {gas_meter_supported === \"CR\" ? (\n                            <>\n                              <option value=\"MDD\">Monthly direct debit</option>\n                              <option value=\"QDD\">\n                                Quarterly direct debit\n                              </option>\n                              <option value=\"MPB\">\n                                Monthly payment on receipt of bill\n                              </option>\n                              <option value=\"QPB\">\n                                Quarterly payment on receipt of bill\n                              </option>\n                            </>\n                          )\n                            :\n                            null\n                          }\n                          {/* Smart */}\n                          {gas_meter_supported === \"S\" || gas_meter_supported === \"S1\" || gas_meter_supported.startsWith(\"S2\") || gas_meter_supported === \"NS\" ? (\n                            <>\n                              <option value=\"PAYG\">Pay as you go</option>\n                              <option value=\"MDD\">Monthly direct debit</option>\n                              <option value=\"QDD\">\n                                Quarterly direct debit\n                              </option>\n                              <option value=\"MPB\">\n                                Monthly payment on receipt of bill\n                              </option>\n                              <option value=\"QPB\">\n                                Quarterly payment on receipt of bill\n                              </option>\n                            </>\n                          )\n                            :\n                            null\n                          }\n                          {/* Not available */}\n                          {/* {gas_meter_supported === \"NOT\" ?\n                                  (\n                                    <>\n                                      <option value=\"NA\">Not available</option>\n                                    </>\n                                  )\n                                  :\n                                  null\n                                } */}\n                        </select>\n                        {/* <i\n                          style={{ color: \"transparent\", cursor: \"auto\" }}\n                          className=\"edit-icon far fa-edit\"\n                        ></i> */}\n                      </div>\n                    )\n                      :\n                      null\n                    }\n\n                    {/* Error */}\n                    {error_gas_payment ?\n                      (\n                        <div className=\"error-flex \">\n                          <Error message={\"Please select a payment method\"} />\n                        </div>\n                      )\n                      :\n                      null\n                    }\n                  </div>\n\n\n                  {/* Buttons */}\n                  <div className=\"form-supply-btn-container\">\n                    <button className=\"form-supply-btn btn-back\" onClick={(e) => goToFormMpanMprn(e)}>\n                      <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                        <IoMdArrowDropleft className=\"icon-back\" />\n                      </IconContext.Provider>\n                      Go back\n                    </button>\n\n                    <button data-cy=\"gasonly-continue\" className=\"form-supply-btn btn-next\" onClick={(e) => goToE7(e)}>\n                      Continue\n\n                      <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                        <IoMdArrowDropright className=\"icon-next\" />\n                      </IconContext.Provider>\n                    </button>\n                  </div>\n                </div>\n\n                {showScript ?\n                  (\n                    <div className=\"helper-address\">\n                      <div className=\"script-address\">\n                        <FormScript step={5} />\n                      </div>\n\n                      <div className=\"assistant-address-custom\">\n                        <FormAssistant tips={4} />\n                      </div>\n                    </div>\n                  )\n                  :\n                  <div style={{ width: '100%' }}>\n                    <div className=\"assistant-address\">\n                      <FormAssistant tips={4} />\n                    </div>\n                  </div>\n                }\n              </div>\n            </section>\n          </>\n        )\n        :\n        null\n      }\n    </>\n  );\n}\n\nexport default FormSupply;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormSuccessful/FormSuccessful.jsx",["253","254"],"import React, { useEffect } from \"react\";\n// CSS\nimport \"./FormSuccessful.css\";\n// Icons \n// import { BsStarFill, BsStar } from 'react-icons/bs';\n// Images\nimport Successful from '../../../assets/img/successful.svg';\n\nconst FormSuccessful = ({ }) => {\n    /** STATES */\n\n    // Scroll to middle\n    useEffect(() => {\n        window.scrollTo({ top: window.innerHeight / 5, behavior: 'smooth' });\n    }, []);\n\n    const newDeal = (e) => {\n        e.preventDefault();\n\n        // Reload page\n        window.location.reload();\n    }\n\n    return (\n        <>\n            <section className=\"successful-section\">\n                <div className=\"successful-container\">\n                    <div className=\"successful-img-container\">\n                        <img src={Successful} alt=\"Successful image\" />\n                    </div>\n\n                    <div className=\"successful-message\" >\n                        <h1>All data has now been submitted successfully.</h1>\n\n                        <h2>Zoho contact has now been updated with new deal</h2>\n                    </div>\n\n                    <div className=\"successful-done-btn-container\">\n                        <button className=\"successful-done-btn\" type=\"button\" onClick={(e) => newDeal(e)}>Start a new deal</button>\n                    </div>\n                </div>\n            </section>\n        </>\n    );\n};\n\nexport default FormSuccessful;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormCompare/FormCompare.jsx",["255","256","257","258","259","260","261","262","263"],"import React, { useState, useEffect } from \"react\";\n// Styles\nimport \"./FormCompare.css\";\n// Firebase\nimport { db } from \"../../../firebase/firebase\";\nimport firebase from \"firebase/app\";\n// Data\nimport data_electricity_tariffs from '../../../utilities/data_tariffs/data_tariffs_es/data_electricity_tariffs';\nimport data_gas_tariffs from '../../../utilities/data_tariffs/data_tariff_gs/data_gas_tariffs';\nimport data_dual_tariffs from '../../../utilities/data_tariffs/data_tariff_dual/data_dual_tariffs';\n// Swal\nimport swal from '@sweetalert/with-react';\n// Phone Number Validation\nimport { parsePhoneNumber } from 'libphonenumber-js';\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\n\n// Components\nimport FormScript from '../FormScript/FormScript';\nimport FormAssistant from \"../FormAssistant/FormAssistant\";\nimport Error from '../../Error/Error';\nimport ReviewStars from '../../ReviewStars/ReviewStars';\n\nfunction FormCompare({ customerInformation, user, electricityInformation, gasInformation, avgElec, avgGas, showScript, progressBar, updateCustomerInformation, updateShowOverlay, updateShowFormCompare, updateShowFormUsageKWH, updateShowFormUsageGBP_es, updateShowFormUsageAVG, updateShowFormUsageGAS, updateShowFormUsageGBP_gs, updateShowFormDetails, updateShowFormDebt, updateProgressBar }) {\n  /** STATES */\n  // Content Loaded state\n  const [contentLoaded, updateContentLoaded] = useState(false);\n  const [content, updateContent] = useState({});\n  const [array_to, update_array_to] = useState(3);\n  const [bestMatch, setBestMatch] = useState({});\n  const [usage_expended, update_usage_expended] = useState({});\n  const [usage_expended_elec, update_usage_expended_elec] = useState({});\n  const [usage_expended_gas, update_usage_expended_gas] = useState({});\n\n  // Error State\n  const [error, updateError] = useState(false);\n\n  /** FUNCTIONS */\n\n  /**---- */\n  // Function to create a new array without the same supplier\n  // Sorted data\n  // const sorted_data = sorted_data_desc.filter(function (obj) {\n  //   return obj.supplier_code !== 'EDF';\n  // });\n  /**---- */\n\n  // Scroll to top\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Error smooth scroll\n  useEffect(() => {\n    if (error) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"center\" });\n      }\n\n      scroll_to()\n    }\n  }, [error]);\n\n  // Data\n  const elec_data = data_electricity_tariffs.tariffs;\n  const gas_data = data_gas_tariffs.tariffs;\n  const dual_data = data_dual_tariffs.tariffs;\n\n  /** Variables */\n  // same_supplier\n  const same_supplier = customerInformation.fuel_description.same_supplier;\n  // dual_active\n  const dual_active = customerInformation.fuel_description.dual_active;\n  // gas_only\n  const gas_only = customerInformation.fuel_description.gas_only;\n  // elec_only\n  const elec_only = customerInformation.fuel_description.elec_only;\n  // postcode_formatted\n  const postcode_formatted = customerInformation.customerAddres.postcode.replace(/\\s/g, '').trim().toLowerCase();\n  // doornumber_formatted\n  const doornumber_formatted = customerInformation.customerAddres.doornumber.replace(/\\s/g, '').trim().toLowerCase();\n  // uid\n  const uid = `${postcode_formatted}-${doornumber_formatted}`;\n\n  // Show more button\n  let up_to = 0;\n  const load_more = (e) => {\n    e.preventDefault();\n    if (up_to === up_to) {\n      up_to = array_to + 3;\n      return update_array_to(up_to);\n    }\n  }\n\n  // Execute Overlay\n  useEffect(() => {\n    // Show Overlay\n    updateShowOverlay(true);\n  }, [FormCompare]);\n\n  // Function to sort the JSON by property\n  const sortByProperty = (property) => {\n    return function (a, b) {\n      if (a[property] > b[property])\n        return 1;\n      else if (a[property] < b[property])\n        return -1;\n\n      return 0;\n    }\n  }\n\n  // Information for elec_only\n  useEffect(() => {\n    // Elec_only\n    if (elec_only) {\n      // console.log('elec_only');\n      if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n        // Usage introduced\n        const usage_kwh_expended = customerInformation.usage_kwh_description.usage_kwh_expended;\n        // Period introduced\n        const usage_kwh_period = customerInformation.usage_kwh_description.usage_kwh_period;\n\n        let usage_by_period = 0;\n        if (usage_kwh_period === 'annu') {\n          usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n        } else {\n          usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n        }\n\n        // console.log(customerInformation.tariff_description);\n        // console.log(usage_by_period);\n\n        // Unit rate of tariff selected\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate;\n        // Usage by period\n        // const usage = ((usage_by_period * tariff_unit_rate) / 100);\n        const usage = (usage_by_period * ((tariff_unit_rate) / 100));\n\n        // Sorted data desc\n        const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n\n        /**------ */\n        // Sorted data\n        // const sorted_data = sorted_data_desc.filter(function (obj) {\n        //   return obj.supplier_code !== 'EDF';\n        // });\n        /**------ */\n\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n      }\n\n      if (customerInformation.hasOwnProperty('usage_gbp_description_es')) {\n        // Usage introduced\n        const usage_gbp_expended = customerInformation.usage_gbp_description_es.usage_gbp_expended;\n        // Period introduced\n        const usage_gbp_period = customerInformation.usage_gbp_description_es.usage_gbp_period;\n        let usage_by_period = 0;\n        if (usage_gbp_period === 'annu') {\n          usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n        } else {\n          usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n        }\n\n        // Sorted data\n        const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage_by_period\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n      }\n\n      if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n        // Usage introduced\n        const usage_size_expended = customerInformation.usage_property_size_es.usage_size_expended;\n        \n        // Unit rate of tariff selected\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate;\n        // Usage by period\n        const usage = ((usage_size_expended * tariff_unit_rate) / 100);\n\n        console.log(usage_size_expended);\n        console.log(tariff_unit_rate);\n        console.log(usage / 12)\n\n        // Sorted data\n        const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n      }\n    }\n  }, [elec_only]);\n\n  // Information for gas_only\n  useEffect(() => {\n    // Gas_only\n    if (gas_only) {\n      // console.log('gas_only');\n      if (customerInformation.hasOwnProperty('usage_gas_description')) {\n        // Usage introduced\n        const usage_kwh_expended = customerInformation.usage_gas_description.usage_kwh_expended;\n        // Period introduced\n        const usage_kwh_period = customerInformation.usage_gas_description.usage_kwh_period;\n        // Usage by period\n        let usage_by_period = 0;\n        if (usage_kwh_period === 'annu') {\n          usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n        } else {\n          usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n        }\n        // Unit rate of tariff selected\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate;\n        // Usage by period\n        const usage = ((usage_by_period * tariff_unit_rate) / 100);\n\n        // Sorted data\n        const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n\n      }\n\n      if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n        // Usage introduced\n        const usage_gbp_expended = customerInformation.usage_gbp_description_gs.usage_gbp_expended;\n        // Period introduced\n        const usage_gbp_period = customerInformation.usage_gbp_description_gs.usage_gbp_period;\n        let usage_by_period = 0;\n        if (usage_gbp_period === 'annu') {\n          usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n        } else {\n          usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n        }\n        // Sorted data\n        const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage_by_period\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n      }\n\n      if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n        // Usage introduced\n        const usage_size_expended = parseFloat(customerInformation.usage_property_size_gs.usage_size_expended);\n\n        // Usage introduced for gas\n        let usage_size_expended_gas;\n\n        // 1 bedroom\n        if (usage_size_expended === 1800) {\n          // Unit rate of tariff selected gas\n          usage_size_expended_gas = 8000;\n        }\n\n        // 2 to 3 bedrooms\n        if (usage_size_expended === 2900) {\n          // Unit rate of tariff selected gas\n          usage_size_expended_gas = 12000;\n        }\n\n        // 4+ bedrooms\n        if (usage_size_expended === 4300) {\n          // Unit rate of tariff selected gas\n          usage_size_expended_gas = 17000;\n        }\n\n        // Unit rate of tariff selected\n        const tariff_unit_rate = customerInformation.tariff_description.unit_rate;\n        // Usage by period\n        const usage = ((usage_size_expended_gas * tariff_unit_rate) / 100);\n\n        // Sorted data\n        const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n        // Add content\n        updateContent({\n          ...content,\n          sorted_data\n        });\n\n        // Update state\n        update_usage_expended({\n          ...usage_expended,\n          usage: usage\n        });\n\n        // Show content;\n        updateContentLoaded(true);\n        // Hidde Overlay\n        updateShowOverlay(false);\n      }\n    }\n  }, [gas_only]);\n\n  // Information for dual_active\n  useEffect(() => {\n    // Dual active\n    if (dual_active) {\n\n      // Sorted data\n      const sorted_data = dual_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n\n      // Add content\n      updateContent({\n        ...content,\n        sorted_data\n      });\n\n      if (same_supplier) {\n        // Sorted data\n        // console.log('Same supplier === true');\n\n        /**- KWH SECTION -*/\n        // KWH - ELEC\n        if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_kwh_description.usage_kwh_expended;\n          // Period introduced\n          const usage_kwh_period = customerInformation.usage_kwh_description.usage_kwh_period;\n          let usage_by_period = 0;\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n          }\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_elec;\n          // console.log(tariff_unit_rate);\n          // Usage by period\n          const usage_elec = ((usage_by_period * tariff_unit_rate) / 100);\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage_elec\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // KWH - GAS\n        if (customerInformation.hasOwnProperty('usage_gas_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_gas_description.usage_kwh_expended;\n          // Period introduced\n          const usage_kwh_period = customerInformation.usage_gas_description.usage_kwh_period;\n          let usage_by_period = 0;\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n          }\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_gas;\n          // console.log(tariff_unit_rate);\n          // Usage by period\n          const usage_gas = ((usage_by_period * tariff_unit_rate) / 100);\n\n          // console.log(usage_gas);\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage_gas\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        /**- GBP SECTION */\n        // GBP - ELEC\n        if (customerInformation.hasOwnProperty('usage_gbp_description_es')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_es.usage_gbp_expended;\n          // Period introduced\n          const usage_gbp_period = customerInformation.usage_gbp_description_es.usage_gbp_period;\n          let usage_by_period = 0;\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n          }\n\n          // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage_by_period\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // GBP - GAS\n        if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_gs.usage_gbp_expended;\n          // Period introduced\n          const usage_gbp_period = customerInformation.usage_gbp_description_gs.usage_gbp_period;\n          let usage_by_period = 0;\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n          }\n          // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage_by_period\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        /**- PROPERTY SIZE SECTION -*/\n        // PROPERTY SIZE - ELEC\n        if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n\n          // Usage introduced\n          const usage_size_expended = customerInformation.usage_property_size_es.usage_size_expended;\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_elec;\n          // Usage by period\n          const usage = ((usage_size_expended * tariff_unit_rate) / 100);\n          // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // PROPERTY SIZE - GAS\n        if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n          // Usage introduceds\n          const usage_size_expended = parseFloat(customerInformation.usage_property_size_gs.usage_size_expended);\n          // Usage introduced for gas\n          let usage_size_expended_gas;\n\n          // 1 bedroom\n          if (usage_size_expended === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          }\n\n          // 2 to 3 bedrooms\n          if (usage_size_expended === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          }\n\n          // 4+ bedrooms\n          if (usage_size_expended === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          }\n\n          // console.log(usage_size_expended_gas);\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description.unit_rate_gas;\n          // Usage by period\n          const usage = ((usage_size_expended_gas * tariff_unit_rate) / 100);\n\n          // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // PROPERTY_SIZE_DUAL\n        if (customerInformation.hasOwnProperty('usage_property_size_dual')) {\n          // Usage introduced for elec\n          const usage_size_expended_elec = parseFloat(customerInformation.usage_property_size_dual.usage_size_expended);\n          // Usage introduced for gas\n          let usage_size_expended_gas;\n\n          // 1 bedroom\n          if (usage_size_expended_elec === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          }\n\n          // 2 to 3 bedrooms\n          if (usage_size_expended_elec === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          }\n\n          // 4+ bedrooms\n          if (usage_size_expended_elec === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          }\n\n          // Unit rate of tariff selected elec\n          const tariff_unit_rate_elec = customerInformation.tariff_description.unit_rate_elec;\n          // Unit rate of tariff selected gas\n          const tariff_unit_rate_gas = customerInformation.tariff_description.unit_rate_gas;\n\n          // Usage by period\n          const usage_elec = ((usage_size_expended_elec * tariff_unit_rate_elec) / 100);\n          const usage_gas = ((usage_size_expended_gas * tariff_unit_rate_gas) / 100);\n\n          const usage = usage_elec + usage_gas;\n\n          // // Sorted data\n          // const sorted_data = dual_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended({\n            ...usage_expended,\n            usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n      } else {\n        // console.log('Same supplier === false');\n        /**- KWH SECTION -*/\n        // KWH - ELEC\n        if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_kwh_description.usage_kwh_expended;\n          // Period introduced\n          const usage_kwh_period = customerInformation.usage_kwh_description.usage_kwh_period;\n          let usage_by_period = 0;\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n          }\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate_elec = customerInformation.tariff_description_elec.elec_tariff.unit_rate;\n          // Usage by period\n          const usage_elec = ((usage_by_period * tariff_unit_rate_elec) / 100);\n\n          // console.log(usage_elec);\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage_elec\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // KWH - GAS\n        if (customerInformation.hasOwnProperty('usage_gas_description')) {\n          // Usage introduced\n          const usage_kwh_expended = customerInformation.usage_gas_description.usage_kwh_expended;\n          // Period introduced\n          const usage_kwh_period = customerInformation.usage_gas_description.usage_kwh_period;\n          let usage_by_period = 0;\n          if (usage_kwh_period === 'annu') {\n            usage_by_period = (parseFloat(usage_kwh_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_kwh_expended) * 12));\n          }\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate_gas = customerInformation.tariff_description_gas.gas_tariff.unit_rate;\n          // Usage by period\n          const usage_gas = ((usage_by_period * tariff_unit_rate_gas) / 100);\n\n          // console.log(usage_gas);\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage_gas\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        /**- GBP SECTION */\n        // GBP - ELEC\n        if (customerInformation.hasOwnProperty('usage_gbp_description_es')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_es.usage_gbp_expended;\n          // Period introduced\n          const usage_gbp_period = customerInformation.usage_gbp_description_es.usage_gbp_period;\n          let usage_by_period = 0;\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n          }\n\n          // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage_by_period\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // GBP - GAS\n        if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n          // Usage introduced\n          const usage_gbp_expended = customerInformation.usage_gbp_description_gs.usage_gbp_expended;\n          // Period introduced\n          const usage_gbp_period = customerInformation.usage_gbp_description_gs.usage_gbp_period;\n          let usage_by_period = 0;\n          if (usage_gbp_period === 'annu') {\n            usage_by_period = (parseFloat(usage_gbp_expended) * 1);\n          } else {\n            usage_by_period = Math.round((parseFloat(usage_gbp_expended) * 12));\n          }\n          // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage_by_period\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        /**- PROPERTY SIZE SECTION -*/\n        // PROPERTY SIZE - ELEC\n        if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n          // Usage introduced\n          const usage_size_expended = customerInformation.usage_property_size_es.usage_size_expended;\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description_elec.elec_tariff.unit_rate;\n          // Usage by period\n          const usage = ((usage_size_expended * tariff_unit_rate) / 100);\n\n          // // Sorted data\n          // const sorted_data = elec_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_elec({\n            ...usage_expended_elec,\n            usage: usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // PROPERTY SIZE - GAS\n        if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n          // Usage introduceds\n          const usage_size_expended = parseFloat(customerInformation.usage_property_size_gs.usage_size_expended);\n          // Usage introduced for gas\n          let usage_size_expended_gas;\n\n          // 1 bedroom\n          if (usage_size_expended === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          }\n\n          // 2 to 3 bedrooms\n          if (usage_size_expended === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          }\n\n          // 4+ bedrooms\n          if (usage_size_expended === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          }\n\n          // console.log(usage_size_expended_gas);\n\n          // Unit rate of tariff selected\n          const tariff_unit_rate = customerInformation.tariff_description_gas.gas_tariff.unit_rate;\n          // Usage by period\n          const usage = ((usage_size_expended_gas * tariff_unit_rate) / 100);\n\n          // // Sorted data\n          // const sorted_data = gas_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended_gas({\n            ...usage_expended_gas,\n            usage: usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n\n        // PROPERTY_SIZE_DUAL\n        if (customerInformation.hasOwnProperty('usage_property_size_dual')) {\n          // Usage introduced for elec\n          const usage_size_expended_elec = parseFloat(customerInformation.usage_property_size_dual.usage_size_expended);\n          // Usage introduced for gas\n          let usage_size_expended_gas;\n\n          // 1 bedroom\n          if (usage_size_expended_elec === 1800) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 8000;\n          }\n\n          // 2 to 3 bedrooms\n          if (usage_size_expended_elec === 2900) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 12000;\n          }\n\n          // 4+ bedrooms\n          if (usage_size_expended_elec === 4300) {\n            // Unit rate of tariff selected gas\n            usage_size_expended_gas = 17000;\n          }\n\n          // Unit rate of tariff selected elec\n          const tariff_unit_rate_elec = customerInformation.tariff_description_elec.elec_tariff.unit_rate;\n          // Unit rate of tariff selected gas\n          const tariff_unit_rate_gas = customerInformation.tariff_description_gas.gas_tariff.unit_rate;\n\n          // Usage by period\n          const usage_elec = ((usage_size_expended_elec * tariff_unit_rate_elec) / 100);\n          const usage_gas = ((usage_size_expended_gas * tariff_unit_rate_gas) / 100);\n\n          const usage = usage_elec + usage_gas;\n\n          // // Sorted data\n          // const sorted_data = dual_data.sort(sortByProperty(\"monthly_cost\")); // Sort according to monthly cost\n          // // Add content\n          // updateContent({\n          //   ...content,\n          //   sorted_data\n          // });\n\n          // Update state\n          update_usage_expended({\n            ...usage_expended,\n            usage\n          });\n\n          // Show content;\n          updateContentLoaded(true);\n          // Hidde Overlay\n          updateShowOverlay(false);\n        }\n      }\n    }\n  }, [dual_active]);\n\n  // Sorted data\n  let sorted_data = content.sorted_data;\n\n  // usage\n  let usage = usage_expended.usage;\n\n  // const usage_gas\n  const usage_gas = usage_expended_gas.usage;\n\n  // const usage_elec\n  const usage_elec = usage_expended_elec.usage;\n\n  if ((dual_active)) {\n    if (customerInformation.hasOwnProperty('usage_property_size_dual')) {\n      usage = usage_expended.usage;\n    } else {\n      usage = (usage_elec + usage_gas);\n    }\n  }\n\n  // console.log(usage);\n  // console.log(usage_elec);\n  // console.log(usage_gas);\n\n  // Tariff info button - function to show modal\n  const tariff_info = (e, data) => {\n    e.preventDefault();\n\n    swal({\n      className: 'swal-modal_custom',\n      content: (\n        <>\n          <div className=\"form-compare-details-info-container\">\n            <div className=\"form-compare-details-info\">\n              <div className=\"form-compare-details-info-img\">\n                <img src={data.supplier_img} alt=\"\" />\n              </div>\n\n              <h3>Tariff details</h3>\n\n              <div className=\"form-compare-details-container\">\n                <div className=\"form-compare-single-details\">\n                  <p>Supplier: <span>{data.supplier_name}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Plan name: <span>{data.tariff_name}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <ReviewStars stars={data.review_rating} customClass={true} />\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Early exit fee: <span>£{data.exit_fees}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Estimated annual cost: <span>£{data.annual_cost}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Monthly direct debit: <span>£{data.monthly_cost}</span></p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )\n    });\n  };\n\n  // choosePlan button\n  const choosePlan = async (e, data) => {\n    e.preventDefault();\n\n    // Update Error\n    updateError(false);\n\n    // ID of card selected\n    const card_id = e.target.id;\n    // Selected card\n    const card_content = document.getElementById(card_id);\n\n    // Add class active\n    card_content.classList.add('active-card');\n\n    // Add and remove class\n    let active_class = document.querySelectorAll(\".active-card\");\n    [].forEach.call(active_class, function (el) {\n      el.classList.remove(\"active-card\");\n    });\n\n    if (card_id === sorted_data[0].tariff_id) {\n      card_content.className = \"form-compare-card-content active-card bestMatch-card\";\n    } else {\n      card_content.className = \"form-compare-card-content active-card\";\n    }\n\n    // SWAL\n    await swal({\n      className: 'swal-modal_address',\n      buttons: {\n        cancel: \"Go back\",\n        confirm: \"Choose plan\"\n      },\n      content: (\n        <>\n          <div className=\"form-compare-details-info-container\">\n            <div className=\"form-compare-details-info\">\n              <div className=\"form-compare-details-info-img\">\n                <img src={data.supplier_img} alt=\"Energy provider\" />\n              </div>\n              <div className=\"form-compare-card-estimated-container\">\n                <div className=\"form-compare-card-estimated\">\n                  <p>Estimated cost</p>\n                  <p className=\"form-compare-card-estimated-amount\"><span>£</span>{(usage - data.annual_cost).toFixed(2)}</p>\n                  <p>(£{((usage - data.annual_cost) / 12).toFixed(2)} pm)</p>\n                </div>\n              </div>\n\n              {/* <div className=\"form-compare-card-btn-signup-container\">\n                <button className=\"form-compare-card-btn-custom btn-signup\" onClick={(data) => console.log(data)}>Choose plan</button>\n              </div> */}\n\n              <h3>Tariff details</h3>\n\n              <div className=\"form-compare-details-container\">\n                <div className=\"form-compare-single-details\">\n                  <p>Supplier: <span>{data.supplier_name}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Plan name: <span>{data.tariff_name}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <ReviewStars stars={data.review_rating} customClass={true} />\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Early exit fee: <span>£{data.exit_fees}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Estimated annual cost: <span>£{data.annual_cost}</span></p>\n                </div>\n\n                <div className=\"form-compare-single-details\">\n                  <p>Monthly direct debit: <span>£{data.monthly_cost}</span></p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )\n    }).then(async (result) => {\n\n      if (result !== true) {\n        // Hide Overlay\n        updateShowOverlay(false);\n        return;\n      };\n\n      //Show Overlay\n      updateShowOverlay(true);\n\n      // Supplier selected\n      const supplier_selected = content.sorted_data.find(element => element.tariff_id == card_id);\n\n      // Switching details\n      const switching_details = {\n        supplier_selected\n      }\n\n      // Updating best match content\n      const { tariff_name, supplier_name } = supplier_selected;\n\n      setBestMatch({\n        ...bestMatch,\n        tariff_name,\n        supplier_name\n      });\n\n      // Email agent\n      const agentEmail = { \"email\": user.email };\n\n      // Endpoint\n      const url = 'https://zohocontactcreatefunction.azurewebsites.net/api/HttpTrigger1?method=verifyContact';\n      // Fetch customer data\n      await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(agentEmail),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      }).then((response) => {\n        if (response.status !== 200) {\n          return Promise.reject(response.json());\n        }\n\n        return response.json();\n      }).then((response) => {\n        // console.log(response);\n        // Update Customer informatin\n        updateCustomerInformation({\n          ...customerInformation,\n          agent: { email: user.email },\n          customerDetails: {\n            first_name: response.first_name ? response.first_name : '',\n            last_name: response.last_name ? response.last_name : '',\n            email: response.email ? response.email : '',\n            phone: response.phone ? parsePhoneNumber(response.phone, 'GB').number : ''\n          },\n          switching_details\n        });\n\n        // Hide Overlay\n        updateShowOverlay(false);\n        // Update Error\n        updateError(false);\n        // Hide Form Compare\n        updateShowFormCompare(false);\n        // Update Progress Bar\n        updateProgressBar({ ...progressBar, step: 8 });\n        // Show Details\n        updateShowFormDetails(true);\n\n        return response;\n\n      }).catch((error) => {\n        // Error\n        console.error(`Catch an error fetching to postcoder ${error}`);\n        // Update Customer informatin\n        updateCustomerInformation({\n          ...customerInformation,\n          agent: { email: user.email },\n          customerDetails: {\n            first_name: '',\n            last_name: '',\n            email: '',\n            phone: ''\n          },\n          switching_details\n        });\n\n        // Hide Overlay\n        updateShowOverlay(false);\n        // Update Error\n        updateError(false);\n        // Hide Form Compare\n        updateShowFormCompare(false);\n        // Update Progress Bar\n        updateProgressBar({ ...progressBar, step: 8 });\n        // Show Details\n        updateShowFormDetails(true);\n      });\n    });\n  };\n\n  // cardSelected\n  const cardSelected = (e, id) => {\n    e.preventDefault();\n\n    // Update Error\n    updateError(false);\n\n    /**-- Adding active state to the card selected --*/\n    // ID of card selected\n    const card_id = id;\n    // Selected card\n    const card_content = document.getElementById(card_id);\n\n    // Add class active\n    card_content.classList.add('active-card');\n\n    // Add and remove class\n    let active_class = document.querySelectorAll(\".active-card\");\n    [].forEach.call(active_class, function (el) {\n      el.classList.remove(\"active-card\");\n    });\n\n    if (card_id === sorted_data[0].tariff_id) {\n      card_content.className = \"form-compare-card-content active-card bestMatch-card\";\n    } else {\n      card_content.className = \"form-compare-card-content active-card\";\n    }\n\n    // Supplier selected\n    const supplier_selected = content.sorted_data.find(element => element.tariff_id == card_id);\n\n    // Switching details\n    const switching_details = {\n      supplier_selected\n    }\n\n    // Update customer information\n    updateCustomerInformation({\n      ...customerInformation,\n      switching_details\n    });\n\n    // Updating best match content\n    const { tariff_name, supplier_name } = supplier_selected;\n\n    setBestMatch({\n      ...bestMatch,\n      tariff_name,\n      supplier_name\n    });\n  };\n\n  // Adding initial customer data to firebase (Coming from Supply cc)\n  useEffect(() => {\n    /**-- Firebase --*/\n    (async () => {\n      const { customerAddres, useGas, fuel, fuel_description, supplierInformation, electricityPaymentType, gasPaymentType, economy7, tariff_description, tariff_description_elec, tariff_description_gas, usage_property_size_dual, usage_property_size_es, usage_property_size_gs, usage_gas_description, usage_gbp_description_gs, usage_kwh_description, usage_gbp_description_es, debt } = customerInformation;\n\n      // elec_only || gas_only\n      if (elec_only || gas_only) {\n        db.collection(\"customers\").doc(uid).set({\n          created: firebase.firestore.FieldValue.serverTimestamp(),\n          step: 7,\n          customerAddres: {\n            doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n            addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n            addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n            city: customerAddres.city ? customerAddres.city : '',\n            postcode: customerAddres.postcode ? customerAddres.postcode : '',\n            mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n          },\n          MPANDetails: {\n            mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n            supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n            company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n          },\n          dataGas: {\n            current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n            meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n            company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n          },\n          useGas: {\n            gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n          },\n          fuel: {\n            dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n          },\n          fuel_description: {\n            dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n            elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n            gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n            same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n          },\n          supplierInformation: {\n            electricity_supplier: {\n              company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n              meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n              mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n              supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n            },\n            gas_supplier: {\n              company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n              current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n              meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n              mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n            }\n          },\n          electricityPaymentType: {\n            electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n            electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n          },\n          gasPaymentType: {\n            gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n            gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n          },\n          economy7: {\n            economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n            economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n          },\n          tariff_description,\n          // AVG\n          usage_property_size_dual: {\n            usage_size_entered: !!usage_property_size_dual ? usage_property_size_dual.usage_size_entered : false,\n            usage_size_expended: !!usage_property_size_dual ? usage_property_size_dual.usage_size_expended : false\n          },\n          usage_property_size_es: {\n            usage_size_entered: !!usage_property_size_es ? usage_property_size_es.usage_size_entered : false,\n            usage_size_expended: !!usage_property_size_es ? usage_property_size_es.usage_size_expended : false,\n          },\n          usage_property_size_gs: {\n            usage_size_entered: !!usage_property_size_gs ? usage_property_size_gs.usage_size_entered : false,\n            usage_size_expended: !!usage_property_size_gs ? usage_property_size_gs.usage_size_expended : false\n          },\n          // GAS\n          usage_gas_description: {\n            usage_kwh_entered: !!usage_gas_description ? usage_gas_description.usage_kwh_entered : false,\n            usage_kwh_expended: !!usage_gas_description ? usage_gas_description.usage_kwh_expended : false,\n            usage_kwh_period: !!usage_gas_description ? usage_gas_description.usage_kwh_period : false\n          },\n          usage_gbp_description_gs: {\n            usage_gbp_entered: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_entered : false,\n            usage_gbp_expended: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_expended : false,\n            usage_gbp_period: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_period : false\n          },\n          // Elec\n          usage_kwh_description: {\n            usage_kwh_entered: !!usage_kwh_description ? usage_kwh_description.usage_kwh_entered : false,\n            usage_kwh_expended: !!usage_kwh_description ? usage_kwh_description.usage_kwh_expended : false,\n            usage_kwh_period: !!usage_kwh_description ? usage_kwh_description.usage_kwh_period : false\n          },\n          usage_gbp_description_es: {\n            usage_gbp_entered: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_entered : false,\n            usage_gbp_expended: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_expended : false,\n            usage_gbp_period: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_period : false\n          },\n          // AVG ELEC\n          avgElec: avgElec,\n          // AVG Gas\n          avgGas: avgGas,\n          debt\n        });\n      }\n\n      // dual_active\n      if (dual_active) {\n        // same_supplier\n        if (same_supplier) {\n          db.collection(\"customers\").doc(uid).set({\n            created: firebase.firestore.FieldValue.serverTimestamp(),\n            step: 7,\n            customerAddres: {\n              doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n              addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n              addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n              city: customerAddres.city ? customerAddres.city : '',\n              postcode: customerAddres.postcode ? customerAddres.postcode : '',\n              mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n            },\n            MPANDetails: {\n              mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n              supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n              company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n            },\n            dataGas: {\n              current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n              meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n              company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n            },\n            useGas: {\n              gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n            },\n            fuel: {\n              dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n            },\n            fuel_description: {\n              dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n              elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n              gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n              same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n            },\n            supplierInformation: {\n              electricity_supplier: {\n                company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n                meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n                mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n                supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n              },\n              gas_supplier: {\n                company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n                current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n                meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n                mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n              }\n            },\n            electricityPaymentType: {\n              electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n              electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n            },\n            gasPaymentType: {\n              gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n              gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n            },\n            economy7: {\n              economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n              economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n            },\n            tariff_description,\n            // AVG\n            usage_property_size_dual: {\n              usage_size_entered: !!usage_property_size_dual ? usage_property_size_dual.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_dual ? usage_property_size_dual.usage_size_expended : false\n            },\n            usage_property_size_es: {\n              usage_size_entered: !!usage_property_size_es ? usage_property_size_es.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_es ? usage_property_size_es.usage_size_expended : false,\n            },\n            usage_property_size_gs: {\n              usage_size_entered: !!usage_property_size_gs ? usage_property_size_gs.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_gs ? usage_property_size_gs.usage_size_expended : false\n            },\n            // GAS\n            usage_gas_description: {\n              usage_kwh_entered: !!usage_gas_description ? usage_gas_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_gas_description ? usage_gas_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_gas_description ? usage_gas_description.usage_kwh_period : false\n            },\n            usage_gbp_description_gs: {\n              usage_gbp_entered: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_period : false\n            },\n            // Elec\n            usage_kwh_description: {\n              usage_kwh_entered: !!usage_kwh_description ? usage_kwh_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_kwh_description ? usage_kwh_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_kwh_description ? usage_kwh_description.usage_kwh_period : false\n            },\n            usage_gbp_description_es: {\n              usage_gbp_entered: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_period : false\n            },\n            // AVG ELEC\n            avgElec: avgElec,\n            // AVG Gas\n            avgGas: avgGas\n          });\n        } else {\n          db.collection(\"customers\").doc(uid).set({\n            created: firebase.firestore.FieldValue.serverTimestamp(),\n            step: 7,\n            customerAddres: {\n              doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n              addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n              addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n              city: customerAddres.city ? customerAddres.city : '',\n              postcode: customerAddres.postcode ? customerAddres.postcode : '',\n              mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n            },\n            MPANDetails: {\n              mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n              meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n              supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n              company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n            },\n            dataGas: {\n              current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n              meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n              mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n              company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n            },\n            useGas: {\n              gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n            },\n            fuel: {\n              dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n            },\n            fuel_description: {\n              dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n              elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n              gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n              same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n            },\n            supplierInformation: {\n              electricity_supplier: {\n                company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n                meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n                mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n                supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n              },\n              gas_supplier: {\n                company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n                current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n                meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n                mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n              }\n            },\n            electricityPaymentType: {\n              electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n              electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n            },\n            gasPaymentType: {\n              gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n              gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n            },\n            economy7: {\n              economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n              economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n            },\n            tariff_description_elec,\n            tariff_description_gas,\n            // AVG\n            usage_property_size_dual: {\n              usage_size_entered: !!usage_property_size_dual ? usage_property_size_dual.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_dual ? usage_property_size_dual.usage_size_expended : false\n            },\n            usage_property_size_es: {\n              usage_size_entered: !!usage_property_size_es ? usage_property_size_es.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_es ? usage_property_size_es.usage_size_expended : false,\n            },\n            usage_property_size_gs: {\n              usage_size_entered: !!usage_property_size_gs ? usage_property_size_gs.usage_size_entered : false,\n              usage_size_expended: !!usage_property_size_gs ? usage_property_size_gs.usage_size_expended : false\n            },\n            // GAS\n            usage_gas_description: {\n              usage_kwh_entered: !!usage_gas_description ? usage_gas_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_gas_description ? usage_gas_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_gas_description ? usage_gas_description.usage_kwh_period : false\n            },\n            usage_gbp_description_gs: {\n              usage_gbp_entered: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_gs ? usage_gbp_description_gs.usage_gbp_period : false\n            },\n            // Elec\n            usage_kwh_description: {\n              usage_kwh_entered: !!usage_kwh_description ? usage_kwh_description.usage_kwh_entered : false,\n              usage_kwh_expended: !!usage_kwh_description ? usage_kwh_description.usage_kwh_expended : false,\n              usage_kwh_period: !!usage_kwh_description ? usage_kwh_description.usage_kwh_period : false\n            },\n            usage_gbp_description_es: {\n              usage_gbp_entered: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_entered : false,\n              usage_gbp_expended: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_expended : false,\n              usage_gbp_period: !!usage_gbp_description_es ? usage_gbp_description_es.usage_gbp_period : false\n            },\n            // AVG ELEC\n            avgElec: avgElec,\n            // AVG Gas\n            avgGas: avgGas\n          });\n        }\n      }\n    })();\n\n  }, [FormCompare]);\n\n  // goToCustomerDetails\n  const goToCustomerDetails = async (e) => {\n    e.preventDefault();\n\n    if (!!customerInformation.hasOwnProperty('switching_details') === false) {\n      // Update Error\n      updateError(true);\n      return;\n    }\n\n    //Show Overlay\n    updateShowOverlay(true);\n\n    // Email agent\n    const agentEmail = { \"email\": user.email };\n\n    // Endpoint\n    const url = 'https://zohocontactcreatefunction.azurewebsites.net/api/HttpTrigger1?method=verifyContact';\n    // Fetch customer data\n    await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(agentEmail),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    }).then((response) => {\n      return response.json();\n    }).then((response) => {\n      // console.log(response);\n      // Update Customer informatin\n      updateCustomerInformation({\n        ...customerInformation,\n        agent: { email: user.email },\n        customerDetails: {\n          first_name: response.first_name ? response.first_name : '',\n          last_name: response.last_name ? response.last_name : '',\n          email: response.email ? response.email : '',\n          phone: response.phone ? parsePhoneNumber(response.phone, 'GB').number : ''\n        }\n      });\n\n      return response;\n    }).catch((error) => {\n      // Error\n      console.error(`Catch an error fetching to postcoder ${error}`);\n      // Update Customer informatin\n      updateCustomerInformation({\n        ...customerInformation,\n        agent: { email: user.email },\n        customerDetails: {\n          first_name: '',\n          last_name: '',\n          email: '',\n          phone: ''\n        }\n      });\n    });\n\n    // Hide Overlay\n    updateShowOverlay(false);\n    // Update Error\n    updateError(false);\n    // Hide Form Compare\n    updateShowFormCompare(false);\n    // Update Progress Bar\n    updateProgressBar({ ...progressBar, step: 9 });\n    // Show Details\n    updateShowFormDetails(true);\n  }\n\n  // Go Back\n  const goBack = (e) => {\n    e.preventDefault();\n\n    // Update Error\n    updateError(false);\n    // Hide Form Compare\n    updateShowFormCompare(false);\n    // Delete Customer Usage\n    const copy_customer_usage = { ...customerInformation };\n    delete copy_customer_usage['debt'];\n    delete copy_customer_usage['switching_details'];\n    delete copy_customer_usage['customerDetails'];\n    // Update customer information\n    updateCustomerInformation({ ...copy_customer_usage });\n    // Show Form Debt\n    updateShowFormDebt(true)\n    // Update Progress Bar\n    updateProgressBar({ ...progressBar, step: 7 });\n  }\n\n  // Filterby\n  const filterBy = (e) => {\n    let target = e.target.value;\n\n    // Hide error\n    updateError(false);\n\n    if (target === 'monthly_cost') {\n      updateContent({\n        ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"monthly_cost\"))\n      });\n    };\n\n    if (target === 'exit_fees') {\n      updateContent({\n        ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"exit_fees\"))\n      });\n    };\n\n    if (target === 'review_rating') {\n      updateContent({\n        ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"review_rating\")).reverse()\n      });\n    };\n\n    if (target === 'supplier_code') {\n      updateContent({\n        ...content,\n        sorted_data: sorted_data.sort(sortByProperty(\"supplier_code\"))\n      });\n    };\n\n    // Delete Customer Usage\n    const copy_customer_usage = { ...customerInformation };\n    delete copy_customer_usage['switching_details'];\n    // Update customer information\n    updateCustomerInformation({ ...copy_customer_usage });\n\n    let activeCard_el = document.getElementsByClassName('active-card');\n    if (activeCard_el.length > 0) {\n      let activeCard_id = activeCard_el[0].id;\n      let activeCard = document.getElementById(activeCard_id);\n      activeCard.classList.remove('active-card');\n    }\n\n  }\n\n  // Use Effect to select the best tariff (Monthly cost) in the first render\n  useEffect(() => {\n    if (content.hasOwnProperty('sorted_data')) {\n      // Select best match\n      let bestMatch = content.sorted_data[0];\n      // Best match id\n      let bestMatch_id = bestMatch.tariff_id;\n      // Add active card to best match\n      document.getElementById(bestMatch_id).classList.add('bestMatch-card');\n      // Box deal Best Match\n      let bestMatchBox = document.getElementById(`best_match${bestMatch_id}`);\n      let select = document.getElementById('filterPlan');\n      var selectedText = select.options[select.selectedIndex].text;\n      // Adding text\n      bestMatchBox.innerText = `Best match - By ${selectedText.toLowerCase()}`;\n      bestMatchBox.style.padding = '.5rem 1rem'\n\n      const { tariff_name, supplier_name } = bestMatch;\n\n      setBestMatch({\n        ...bestMatch,\n        tariff_name,\n        supplier_name\n      });\n    }\n  }, [content]);\n\n  return (\n    <>\n      <form>\n        {contentLoaded ?\n          (\n            <section className=\"form-compare-section\">\n              <div className=\"form-compare-container\">\n                <div className=\"form-compare-content\">\n                  <div className=\"form-compare\">\n                    <h1>Results</h1>\n                    <p>Thank you for answering my questions, I can see that if you switch to the <strong>{bestMatch.tariff_name}</strong> with <strong>{bestMatch.supplier_name}</strong> you will save <strong>*INSERT SAVINGS*</strong> per year! So it will be only <strong>£{bestMatch.monthly_cost}</strong> per month. This tariff also comes with <strong>*INSERT TARIFF BENEFIT*</strong>.</p>\n                  </div>\n\n                  <div className=\"filterBy-container\">\n                    <label htmlFor=\"filterPlan\">Filter By</label>\n\n                    <select name=\"plan\" id=\"filterPlan\" defaultValue=\"monthly_cost\" onChange={(e) => filterBy(e)}>\n                      <option value=\"\">―</option>\n                      <option value=\"saving\">Savings</option>\n                      <option value=\"renewal\">Renewal</option>\n                      <option value=\"monthly_cost\">Monthly cost</option>\n                      <option value=\"exit_fees\">Exit fees</option>\n                      <option value=\"review_rating\">Reviews</option>\n                      <option value=\"supplier_code\">Supplier</option>\n                    </select>\n                  </div>\n\n                  {sorted_data.slice(0, array_to).map((data) => (\n                    <div key={data.tariff_id}>\n                      <div className=\"sticky\"><p id={`best_match${data.tariff_id}`}></p></div>\n                      <div className=\"form-compare-card-container\">\n                        <div className=\"form-compare-card-content\" id={data.tariff_id} onClick={(e) => cardSelected(e, data.tariff_id)}>\n                          <div className=\"form-compare-card-column\">\n                            <div className=\"form-compare-card-row\">\n                              <div className=\"form-compare-card-supplier\">\n                                <div className=\"form-compare-card-image\">\n                                  <img src={data.supplier_img} />\n                                </div>\n\n                                <div className=\"form-compare-card-info\">\n                                  <h2>{data.tariff_name}</h2>\n                                  <ReviewStars stars={data.review_rating} />\n                                </div>\n                              </div>\n                            </div>\n\n                            <hr className=\"hr-custom\" />\n\n                            <div className=\"form-compare-card-row\">\n                              <div className=\"form-compare-card-fees\">\n                                <p>Exit fees</p>\n                                <p><span>£{data.exit_fees}</span></p>\n                              </div>\n\n                              <div className=\"form-compare-card-fixed\">\n                                <p>Fixed period</p>\n                                <p><span>{data.fixed_period} months</span></p>\n                              </div>\n\n                              <div className=\"form-compare-card-cost\">\n                                <p>Monthly cost</p>\n                                <p><span>£{data.monthly_cost}</span></p>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"form-compare-card-column\">\n                            <div className=\"form-compare-card-row\">\n                              <div className=\"form-compare-card-btn-container\">\n                                <button className=\"form-compare-card-btn btn-signup\" type=\"submit\" id={data.tariff_id} onClick={(e) => choosePlan(e, data)}>Choose plan</button>\n                                <button type=\"button\" className=\"form-compare-card-btn btn-tariff\" onClick={(e) => { tariff_info(e, data) }}>Tariff info</button>\n                                <div className=\"form-compare-card-btn-info\">\n                                  {console.log('Hello')}\n                                  {/* <p><span>Savings</span> - £{(usage - data.annual_cost).toFixed(2)} now</p> */}\n                                  <p><span>Savings</span> £{!Math.sign((usage - data.annual_cost).toFixed(2)) ? (usage - data.annual_cost).toFixed(2) : Math.abs((usage - data.annual_cost).toFixed(2))} now</p>\n                                  <p>or {'£231'} at renewal</p> {/** Renewal here - data.renewal */}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n\n                  <div className=\"form-compare-loadmore-btn-container\">\n                    <button className=\"form-compare-loadmore-btn\" onClick={(e) => load_more(e)}>Show more results</button>\n                  </div>\n\n                  {/* Error */}\n                  {error === true ? <Error message={'Please selected a tariff to sign up'} /> : null}\n\n                  {/* Buttons */}\n                  <div className=\"form-compare-btn-container\">\n                    <button className=\"form-compare-btn btn-back\" onClick={(e) => goBack(e)}>\n                      <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                        <IoMdArrowDropleft className=\"icon-back\" />\n                      </IconContext.Provider>\n                      Go back\n                    </button>\n\n                    <button className=\"form-compare-btn btn-next\" onClick={(e) => goToCustomerDetails(e)}>\n                      Continue\n\n                      <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                        <IoMdArrowDropright className=\"icon-next\" />\n                      </IconContext.Provider>\n                    </button>\n                  </div>\n                </div>\n\n                {showScript ?\n                  (\n                    <div className=\"helper-compare\">\n                      <div className=\"script-compare\">\n                        <FormScript step={9} />\n                      </div>\n\n                      <div className=\"assistant-compare-custom\">\n                        <FormAssistant tips={9} />\n                      </div>\n                    </div>\n                  )\n                  :\n                  <div style={{ width: '100%' }}>\n                    <div className=\"assistant-compare\">\n                      <FormAssistant tips={9} />\n                    </div>\n                  </div>\n                }\n              </div>\n            </section>\n          )\n          :\n          null\n        }\n      </form>\n    </>\n  );\n}\n\nexport default FormCompare;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormsUsage/FormUsageKWH/FormUsageKWH.jsx",["264","265"],"import React, { useState, useEffect } from \"react\";\nimport \"./FormUsageKWH.css\";\n\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\n// Components\nimport FormScript from '../../FormScript/FormScript';\nimport FormAssistant from \"../../FormAssistant/FormAssistant\";\nimport Error from '../../../Error/Error'\n\nfunction FormUsageKWH({ customerInformation, progressBar, showScript, updateAvgElec, updateCustomerInformation, updateShowFormUsageKWH, updateShowFormUsageGAS, updateShowFormUsageGBP_es, updateShowFormDebt, updateShowFormTariffs, updateShowE7, updateProgressBar, updateShowOverlay }) {\n  /* STATES */\n  const [idk_active, update_idk_active] = useState(false);\n\n  // Error State\n  const [error, updateError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({\n    message: ''\n  });\n\n  /* FUNCTIONS */\n  // Scroll to top & hide overlay\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n\n    // Show overlay\n    updateShowOverlay(false);\n  }, []);\n\n  // Variables\n  const dual_active = customerInformation.fuel_description.dual_active;\n\n  // Handle Click - idk\n  const handleClick = (e) => {\n    e.preventDefault();\n    // Update Error\n    updateError(false);\n    // Update state\n    update_idk_active(!idk_active);\n    const usage_kwh_description = {\n      usage_kwh_entered: false,\n      usage_kwh_expended: false,\n      usage_kwh_period: false\n    }\n    // Update state\n    updateCustomerInformation({\n      ...customerInformation,\n      usage_kwh_description\n    });\n  }\n\n  // Handle Change - Input\n  const handleChange = (e) => {\n    // Update Error\n    updateError(false);\n    const usage_select = document.getElementById('usage_select').value;\n    const usage_kwh_description = {\n      usage_kwh_entered: true,\n      usage_kwh_expended: e.target.value.replace(/[^0-9\\.]+/g, '').trim(),\n      usage_kwh_period: usage_select\n    }\n    // Update state\n    updateCustomerInformation({\n      ...customerInformation,\n      usage_kwh_description\n    });\n  }\n\n  // Initial Values - Inputs\n  let value_kwh = '';\n  if (value_kwh) {\n    value_kwh = customerInformation.usage_kwh_description.usage_kwh_expended;\n  }\n\n  // Send usage\n  const sendUsage = (e) => {\n    e.preventDefault();\n    // Validation\n    const usage_value = document.getElementById('usage_kwh_id').value;\n    const usage_kwh_period = document.getElementById('usage_select').value;\n\n    // Validation\n    if (((parseFloat(usage_value) > 50000) && (usage_kwh_period === 'annu')) || ((parseFloat(usage_value) > 4166.666) && (usage_kwh_period === 'mo'))) {\n      let amount = '';\n      let period = '';\n\n      // Amount & period\n      if (usage_kwh_period === 'annu') {\n        amount = 50000;\n        period = 'year';\n      } else {\n        amount = 4166.666;\n        period = 'month';\n      }\n      // Set error message\n      setErrorMessage({\n        ...errorMessage,\n        message: `Please check how much you use on electricity. If you use more than ${amount.toFixed(2)} kWh per ${period} we can't compare this against domestic consumption tariffs.`\n      });\n      // Show error\n      updateError(true);\n      return;\n    }\n\n    if (usage_value === '') {\n      // Set error message\n      setErrorMessage({\n        ...errorMessage,\n        message: \"Please introduce a valid usage\"\n      });\n      // Update Error\n      updateError(true);\n      return;\n    } else {\n      const usage_kwh_entered = customerInformation.usage_kwh_description.usage_kwh_entered;\n      const usage_kwh_expended = customerInformation.usage_kwh_description.usage_kwh_expended;\n      // Update State\n      updateAvgElec(false);\n      // View conditional\n      if (usage_kwh_entered === false) {\n        // Hidde Form Usage\n        updateShowFormUsageKWH(false);\n        // Show FormUsageGBP_es\n        updateShowFormUsageGBP_es(true);\n        console.log('Show UsageGBP_es');\n      } else {\n        // Update state\n        updateCustomerInformation({\n          ...customerInformation,\n          usage_kwh_description: {\n            usage_kwh_entered,\n            usage_kwh_expended,\n            usage_kwh_period\n          }\n        });\n\n        // Conditional view controller - Form compare / Gas section\n        if (dual_active) {\n          // Show Form Usage Gas\n          console.log('Show Form Usage Gas');\n          // Hidde Form Usage KWH\n          updateShowFormUsageKWH(false);\n          // Show Form Usage Gas\n          updateShowFormUsageGAS(true);\n        } else {\n          // Hidde Form usage\n          updateShowFormUsageKWH(false);\n          // Show Debt\n          updateShowFormDebt(true);\n          // Update Progressbar\n          updateProgressBar({ ...progressBar, step: 7 });\n          console.log('Send usage');\n        }\n      }\n    }\n\n    // Update error\n    updateError(false);\n\n  }\n\n  // Go back\n  const goBack = (e) => {\n    e.preventDefault();\n    // Delete Customer tariff\n    const copy_customer_tariff = { ...customerInformation };\n    delete copy_customer_tariff['tariff_description'];\n    delete copy_customer_tariff['tariff_description_elec'];\n    delete copy_customer_tariff['tariff_description_gas'];\n    delete copy_customer_tariff['usage_kwh_description'];\n    //Update Customer Information\n    updateCustomerInformation({ ...copy_customer_tariff });\n    // Hidde Form Usage\n    updateShowFormUsageKWH(false);\n    // Show Form E7\n    updateShowE7(true);\n    // Update progress bar\n    updateProgressBar({ ...progressBar, step: 5 });\n  };\n\n  return (\n    <>\n      <section className=\"form-usagekwh-section\">\n        <div className=\"form-usagekwh-container\">\n          <div className=\"form-usagekwh-content\">\n            <div className=\"form-usagekwh\">\n              <h1>How much electricity do you use?</h1>\n              <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat aut sint, possimus suscipit hic obcaecati ad necessitatibus eum asperiores maiores in, inventore quidem quibusdam modi. Veniam recusandae maiores voluptatem voluptates?</p>\n            </div>\n\n            {idk_active ?\n              (\n                <>\n                  <div style={{ display: 'flex' }}>\n                    <div className={idk_active ? \"form-usagekwh-input-container customContainer\" : null} >\n                      <input id=\"usage_kwh_id\" type=\"text\" name=\"usage_kwh\" onChange={(e) => handleChange(e)} className=\"form-usagekwh-input\" disabled={true} value=\"I don't know\" />\n                      <span className={idk_active ? \"customSpan\" : null}>kWh</span>\n                    </div>\n                    <select className=\"form-usagekwh-select\" id=\"usage_select\">\n                      <option value=\"annu\">Annually</option>\n                      <option value=\"mo\">Monthly</option>\n                    </select>\n                  </div>\n                </>\n              )\n              :\n              (\n                <>\n                  <div style={{ display: 'flex' }}>\n                    <div className=\"form-usagekwh-input-container\" >\n                      <input data-cy=\"kwh-input\" id=\"usage_kwh_id\" type=\"number\" name=\"usage_kwh\" onChange={(e) => handleChange(e)} className=\"form-usagekwh-input\" defaultValue={value_kwh || ''} />\n                      <span>kWh</span>\n                    </div>\n                    <select className=\"form-usagekwh-select\" id=\"usage_select\">\n                      <option value=\"annu\">Annually</option>\n                      <option value=\"mo\">Monthly</option>\n                    </select>\n                  </div>\n                </>\n              )\n            }\n\n            <button data-cy=\"kwh-idk\" className=\"form-usagekwh-idk\" onClick={(e) => handleClick(e)}>{idk_active ? \"Enable input\" : \"I don't know\"}</button>\n\n            {/* Error */}\n            {error === true ?\n              (\n                <Error message={errorMessage.message} />\n              )\n              :\n              null}\n\n            {/* Buttons */}\n            <div className=\"form-usagekwh-btn-container\">\n              <button className=\"form-usagekwh-btn btn-back\" onClick={(e) => goBack(e)}>\n                <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                  <IoMdArrowDropleft className=\"icon-back\" />\n                </IconContext.Provider>\n                Go back\n              </button>\n\n              <button data-cy=\"kwh-continue\" className=\"form-usagekwh-btn btn-next\" onClick={(e) => sendUsage(e)}>\n                Continue\n\n                <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                  <IoMdArrowDropright className=\"icon-next\" />\n                </IconContext.Provider>\n              </button>\n            </div>\n          </div>\n\n          {showScript ?\n            (\n              <div className=\"helper-usagekwh\">\n                <div className=\"script-usagekwh\">\n                  <FormScript step={7} use={'kwh'} />\n                </div>\n\n                <div className=\"assistant-usagekwh-custom\">\n                  <FormAssistant tips={6} />\n                </div>\n              </div>\n            )\n            :\n            <div style={{ width: '100%' }}>\n              <div className=\"assistant-usagekwh\">\n                <FormAssistant tips={6} />\n              </div>\n            </div>\n          }\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default FormUsageKWH;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormsUsage/FormUsageGBP_es/FormUsageGBP_es.jsx",["266"],"import React, { useState, useEffect } from \"react\";\nimport \"./FormUsageGBP_es.css\";\n\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\n// Components\nimport FormScript from '../../FormScript/FormScript';\nimport FormAssistant from \"../../FormAssistant/FormAssistant\";\nimport Error from '../../../Error/Error'\n\nfunction FormUsageGBP_es({ customerInformation, progressBar, showScript, updateCustomerInformation, updateShowFormUsageKWH, updateShowFormUsageGBP_es, updateShowFormUsageAVG, updateShowFormDebt, updateShowFormUsageGAS, updateAvgElec, updateProgressBar }) {\n  /* STATES */\n  const [idk_active, update_idk_active] = useState(false);\n\n  // Error State\n  const [error, updateError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({\n    message: ''\n  });\n\n  /* FUNCTIONS */\n  // Scroll to top\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Variables\n  const dual_active = customerInformation.fuel_description.dual_active;\n\n  // Handle Click - idk\n  const handleClick = (e) => {\n    e.preventDefault();\n    // Update Error\n    updateError(false);\n    // Update state\n    update_idk_active(!idk_active);\n    const usage_gbp_description_es = {\n      usage_gbp_entered: false,\n      usage_gbp_expended: false,\n      usage_gbp_period: false\n    }\n    // Update state\n    updateCustomerInformation({\n      ...customerInformation,\n      usage_gbp_description_es\n    });\n  }\n\n  // Handle Change - Input\n  const handleChange = (e) => {\n    // Update Error\n    updateError(false);\n    const usage_select = document.getElementById('usage_select').value;\n    const usage_gbp_description_es = {\n      usage_gbp_entered: true,\n      usage_gbp_expended: e.target.value.replace(/[^0-9\\.]+/g, '').trim(),\n      usage_gbp_period: usage_select\n    }\n    // Update state\n    updateCustomerInformation({\n      ...customerInformation,\n      usage_gbp_description_es\n    });\n  }\n\n  // Initial Values - Inputs\n  let value_gbp = '';\n  if (value_gbp) {\n    value_gbp = customerInformation.usage_gbp_description_es.usage_gbp_expended;\n  }\n\n  // Send usage\n  const sendUsage = (e) => {\n    e.preventDefault();\n    const usage_value = document.getElementById('usage_gbp_id').value;\n    const usage_gbp_period = document.getElementById('usage_select').value;\n\n    // Validation\n    if (((parseFloat(usage_value) > 10865.99) && (usage_gbp_period === 'annu')) || ((parseFloat(usage_value) > 905.50) && (usage_gbp_period === 'mo'))) {\n      let amount = '';\n      let period = '';\n\n      // Amount & period\n      if (usage_gbp_period === 'annu') {\n        amount = 10865.99;\n        period = 'year';\n      } else {\n        amount = 905.50;\n        period = 'month';\n      }\n      // Set Error message\n      setErrorMessage({\n        ...errorMessage,\n        message: `Please check how much you spend on electricity per ${period}. If you spend more than £${amount.toFixed(2)} per ${period} we can't compare this against domestic consumption tariffs.`\n      });\n      // Show error\n      updateError(true);\n      return;\n    }\n\n    // Validation\n    if (usage_value === '') {\n      // Update Error\n      updateError(true);\n      // Set Error message\n      setErrorMessage({\n        ...errorMessage,\n        message: \"Please introduce a valid usage\"\n      });\n      return;\n    } else {\n      const usage_gbp_expended = customerInformation.usage_gbp_description_es.usage_gbp_expended;\n      // View conditional\n      const usage_kwh_entered = customerInformation.usage_kwh_description.usage_kwh_entered;\n      const usage_gbp_entered = customerInformation.usage_gbp_description_es.usage_gbp_entered;\n      if ((usage_kwh_entered === false) && (usage_gbp_entered === false)) {\n        if (dual_active) { //Dual_active\n          // Show Form Usage Gas\n          updateShowFormUsageGAS(true);\n        } else {\n          // Show usage AVG\n          updateShowFormUsageAVG(true);\n        }\n        // Hidde usage GBP\n        updateShowFormUsageGBP_es(false);\n        // Update state\n        updateAvgElec(true);\n\n      } else {\n        // Update state\n        updateAvgElec(false);\n\n        const usage_gbp_description_es = {\n          usage_gbp_entered,\n          usage_gbp_expended,\n          usage_gbp_period\n        }\n        // Update Customer Information\n        updateCustomerInformation({\n          ...customerInformation,\n          usage_gbp_description_es\n        });\n\n        if (dual_active) {\n          // Hidde Form Usage GBP_es\n          updateShowFormUsageGBP_es(false);\n          // Show Form Usage Gas\n          updateShowFormUsageGAS(true);\n        } else {\n          // Hidde Form Usage GBP_es\n          updateShowFormUsageGBP_es(false);\n          // Show Form Debt\n          updateShowFormDebt(true);\n          // Update Progressbar\n          updateProgressBar({ ...progressBar, step: 7 });\n          console.log('Show Debt');\n        }\n      }\n    }\n  }\n\n  // Go back\n  const goBack = (e) => {\n    e.preventDefault();\n    // Update Error\n    updateError(false);\n    // Delete Customer Usage\n    const copy_customer_usage = { ...customerInformation };\n    delete copy_customer_usage['usage_gbp_description_es'];\n    delete copy_customer_usage['usage_kwh_description'];\n    //Update Customer Information\n    updateCustomerInformation({ ...copy_customer_usage });\n    // Hidde Form GBP\n    updateShowFormUsageGBP_es(false);\n    // Show Form KWH\n    updateShowFormUsageKWH(true);\n  };\n\n  return (\n    <>\n      <section className=\"form-usagegbp-es-section\">\n        <div className=\"form-usagegbp-es-container\">\n          <div className=\"form-usagegbp-es-content\">\n            <div className=\"form-usagegbp-es\">\n              <h1>How much spend in electricity?</h1>\n              <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat aut sint, possimus suscipit hic obcaecati ad necessitatibus eum asperiores maiores in, inventore quidem quibusdam modi. Veniam recusandae maiores voluptatem voluptates?</p>\n            </div>\n\n            {idk_active ?\n              (\n                <>\n                  <div style={{ display: 'flex' }}>\n                    <div className={idk_active ? \"form-usagegbp-es-input-container customContainer\" : null} >\n                      <span className={idk_active ? \"customSpan\" : null}>£</span>\n                      <input id=\"usage_gbp_id\" type=\"text\" name=\"usage_gbp\" onChange={(e) => handleChange(e)} className=\"form-usagegbp-es-input\" disabled value=\"I don't know\" />\n                    </div>\n                    <select className=\"form-usagegbp-es-select\" id=\"usage_select\">\n                      <option value=\"annu\">Annually</option>\n                      <option value=\"mo\">Monthly</option>\n                    </select>\n                  </div>\n                </>\n              )\n              :\n              (\n                <>\n                  <div style={{ display: 'flex' }}>\n                    <div className=\"form-usagegbp-es-input-container\" >\n                      <span>£</span>\n                      <input data-cy=\"gbpes-input\" id=\"usage_gbp_id\" type=\"number\" name=\"usage_gbp\" onChange={(e) => handleChange(e)} className=\"form-usagegbp-es-input\" defaultValue={value_gbp || ''} />\n                    </div>\n                    <select className=\"form-usagegbp-es-select\" id=\"usage_select\">\n                      <option value=\"annu\">Annually</option>\n                      <option value=\"mo\">Monthly</option>\n                    </select>\n                  </div>\n                </>\n              )\n            }\n\n            <button data-cy=\"gbpes-idk\" className=\"form-usagegbp-es-idk\" onClick={(e) => handleClick(e)}>{idk_active ? \"Enable input\" : \"I don't know\"}</button>\n\n            {/* Error */}\n            {error === true ?\n              (\n                <Error message={errorMessage.message} />\n              )\n              :\n              null}\n\n            {/* Buttons */}\n            <div className=\"form-usagegbp-es-btn-container\">\n              <button className=\"form-usagegbp-es-btn btn-back\" onClick={(e) => goBack(e)}>\n                <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                  <IoMdArrowDropleft className=\"icon-back\" />\n                </IconContext.Provider>\n                Go back\n              </button>\n\n              <button data-cy=\"gbpes-continue\" className=\"form-usagegbp-es-btn btn-next\" onClick={(e) => sendUsage(e)}>\n                Continue\n\n                <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                  <IoMdArrowDropright className=\"icon-next\" />\n                </IconContext.Provider>\n              </button>\n            </div>\n          </div>\n\n          {showScript ?\n            (\n              <div className=\"helper-usagegbp-es\">\n                <div className=\"script-usagegbp-es\">\n                  <FormScript step={7} use={'gbp_es'} />\n                </div>\n\n                <div className=\"assistant-usagegbp-es-custom\">\n                  <FormAssistant tips={6} />\n                </div>\n              </div>\n            )\n            :\n            <div style={{ width: '100%' }}>\n              <div className=\"assistant-usagegbp-es\">\n                <FormAssistant tips={6} />\n              </div>\n            </div>\n          }\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default FormUsageGBP_es;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormBankDetails/FormBankDetails.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormsUsage/FormUsageGAS/FormUsageGAS.jsx",["267","268"],"import React, { useState, useEffect } from \"react\";\nimport \"./FormUsageGAS.css\";\n\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\n// Components\nimport FormScript from '../../FormScript/FormScript';\nimport FormAssistant from \"../../FormAssistant/FormAssistant\";\nimport Error from '../../../Error/Error'\n\nfunction FormUsageGAS({ customerInformation, avgElec, progressBar, showScript, updateCustomerInformation, updateShowFormUsageGAS, updateShowFormUsageKWH, updateShowFormUsageGBP_gs, updateShowFormUsageGBP_es, updateShowFormDebt, updateShowFormUsageAVG, updateShowFormTariffs, updateAvgGas, updateAvgElec, updateProgressBar, updateShowOverlay, updateShowE7 }) {\n  /* STATES */\n  const [idk_active, update_idk_active] = useState(false);\n\n  // Error State\n  const [error, updateError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({\n    message: ''\n  });\n\n  /* FUNCTIONS */\n\n  // Scroll to top and hide overlay\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n\n    // Update state\n    updateShowOverlay(false);\n  }, []);\n\n  // Variables\n  const gas_only = customerInformation.fuel_description.gas_only;\n\n  // Handle Click - idk\n  const handleClick = (e) => {\n    e.preventDefault();\n    // Update Error\n    updateError(false);\n    // Update state\n    update_idk_active(!idk_active);\n    const usage_gas_description = {\n      usage_kwh_entered: false,\n      usage_kwh_expended: false,\n      usage_kwh_period: false\n    }\n    // Update state\n    updateCustomerInformation({\n      ...customerInformation,\n      usage_gas_description\n    });\n  }\n\n  // Handle Change - Input\n  const handleChange = (e) => {\n    // Update Error\n    updateError(false);\n    const usage_select = document.getElementById('usage_select').value;\n    const usage_gas_description = {\n      usage_kwh_entered: true,\n      usage_kwh_expended: e.target.value.replace(/[^0-9\\.]+/g, '').trim(),\n      usage_kwh_period: usage_select\n    }\n    // Update state\n    updateCustomerInformation({\n      ...customerInformation,\n      usage_gas_description\n    });\n  }\n\n  // Initial Values - Inputs\n  let value_kwh = '';\n  if (value_kwh) {\n    value_kwh = customerInformation.usage_gas_description.usage_kwh_expended;\n  }\n\n  // Send usage\n  const sendUsage = (e) => {\n    e.preventDefault();\n    // Validation\n    const usage_value = document.getElementById('usage_kwh_id').value;\n    const usage_kwh_period = document.getElementById('usage_select').value;\n    \n    // Validation\n    if (((parseFloat(usage_value) > 85000) && (usage_kwh_period === 'annu')) || ((parseFloat(usage_value) > 7083.8333) && (usage_kwh_period === 'mo'))) {\n      let amount = '';\n      let period = '';\n\n      // Amount & period\n      if (usage_kwh_period === 'annu') {\n        amount = 85000;\n        period = 'year';\n      } else {\n        amount = 7083.8333;\n        period = 'month';\n      }\n      // Set error message\n      setErrorMessage({\n        ...errorMessage,\n        message: `Please check how much you use on gas. If you use more than ${amount.toFixed(2)} kWh per ${period} we can't compare this against domestic consumption tariffs.`\n      });\n      // Show error\n      updateError(true);\n      return;\n    }\n\n    if (usage_value === '') {\n      // Set error message\n      setErrorMessage({\n        ...errorMessage,\n        message: \"Please introduce a valid usage\"\n      });\n      // Update Error\n      updateError(true);\n      return;\n    } else {\n      // Variables - usage_gas_description\n      const usage_kwh_entered = customerInformation.usage_gas_description.usage_kwh_entered;\n      const usage_kwh_expended = customerInformation.usage_gas_description.usage_kwh_expended;\n      // View conditional\n      if (usage_kwh_entered === false) {\n        // Hidde Form Usage\n        updateShowFormUsageGAS(false);\n        // Show FormUsageGBP_es\n        updateShowFormUsageGBP_gs(true);\n        // Update state\n        updateAvgGas(true);\n        console.log('Show UsageGBP');\n      } else {\n        // Update state\n        updateAvgGas(false);\n        // Update state\n        updateCustomerInformation({\n          ...customerInformation,\n          usage_gas_description: {\n            usage_kwh_entered,\n            usage_kwh_expended,\n            usage_kwh_period\n          }\n        });\n\n        // Hidde Form Usage Gas\n        updateShowFormUsageGAS(false);\n        // Variables - usage_kwh_description\n        // const usage_gbp_entered_es = customerInformation.usage_gbp_description_es.usage_gbp_entered;\n        // const usage_kwh_entered_es = customerInformation.usage_kwh_description.usage_kwh_entered;\n        // Validation\n        if (avgElec) { //(usage_gbp_entered_es === false) && (usage_kwh_entered_es === false)\n          // Show Form AVG\n          updateShowFormUsageAVG(true);\n          // Update state \n          updateAvgElec(true);\n        } else {\n          // Show Form Debt\n          updateShowFormDebt(true);\n          // Update Progressbar\n          updateProgressBar({ ...progressBar, step: 7 });\n          // Update state \n          updateAvgElec(false);\n        }\n      }\n    }\n\n    // Update error\n    updateError(false);\n\n  }\n\n  // Go back\n  const goBack = (e) => {\n    e.preventDefault();\n    // Delete Customer tariff\n    const copy_customer_tariff = { ...customerInformation };\n    delete copy_customer_tariff['usage_gas_description'];\n    delete copy_customer_tariff['usage_gbp_description_es'];\n    //Update Customer Information\n    updateCustomerInformation({ ...copy_customer_tariff });\n    // Hidde Form Usage\n    updateShowFormUsageGAS(false);\n\n    if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n      if (customerInformation.usage_kwh_description.usage_kwh_entered) {\n        // Show Form  KWH\n        updateShowFormUsageKWH(true);\n        //Update Customer Information\n        delete copy_customer_tariff['usage_kwh_description'];\n        updateCustomerInformation({ ...copy_customer_tariff });\n      } else {\n        console.log('O Aqui');\n        // Show Form GBP\n        updateShowFormUsageGBP_es(true);\n      }\n    }\n\n    if (gas_only) {\n      // Show Form Tariffs - It should be true, but for the moment it's false due we are not using it\n      // updateShowFormTariffs(false);\n      // Show E7\n      updateShowE7(true);\n    }\n\n    // Update progress bar\n    updateProgressBar({ ...progressBar, step: 5 });\n  };\n\n  return (\n    <>\n      <section className=\"form-usagegas-section\">\n        <div className=\"form-usagegas-container\">\n          <div className=\"form-usagegas-content\">\n            <div className=\"form-usagegas\">\n              <h1>How much gas do you use?</h1>\n              <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat aut sint, possimus suscipit hic obcaecati ad necessitatibus eum asperiores maiores in, inventore quidem quibusdam modi. Veniam recusandae maiores voluptatem voluptates?</p>\n            </div>\n\n            {idk_active ?\n              (\n                <>\n                  <div style={{ display: 'flex' }}>\n                    <div className={idk_active ? \"form-usagegas-input-container customContainer\" : null} >\n                      <input id=\"usage_kwh_id\" type=\"text\" name=\"usage_kwh\" onChange={(e) => handleChange(e)} className=\"form-usagegas-input\" disabled value=\"I don't know\" />\n                      <span className={idk_active ? \"customSpan\" : null}>kWh</span>\n                    </div>\n                    <select className=\"form-usagegas-select\" id=\"usage_select\">\n                      <option value=\"annu\">Annually</option>\n                      <option value=\"mo\">Monthly</option>\n                    </select>\n                  </div>\n                </>\n              )\n              :\n              (\n                <>\n                  <div style={{ display: 'flex' }}>\n                    <div className=\"form-usagegas-input-container\" >\n                      <input data-cy=\"gas-input\" id=\"usage_kwh_id\" type=\"number\" name=\"usage_kwh\" onChange={(e) => handleChange(e)} className=\"form-usagegas-input\" defaultValue={value_kwh || ''} />\n                      <span>kWh</span>\n                    </div>\n                    <select className=\"form-usagegas-select\" id=\"usage_select\">\n                      <option value=\"annu\">Annually</option>\n                      <option value=\"mo\">Monthly</option>\n                    </select>\n                  </div>\n                </>\n              )\n            }\n\n            <button data-cy=\"gas-idk\" className=\"form-usagegas-idk\" onClick={(e) => handleClick(e)}>{idk_active ? \"Enable input\" : \"I don't know\"}</button>\n\n            {/* Error */}\n            {error === true ?\n              (\n                <Error message={errorMessage.message} />\n              )\n              :\n              null}\n\n            {/* Buttons */}\n            <div className=\"form-usagegas-btn-container\">\n              <button className=\"form-usagegas-btn btn-back\" onClick={(e) => goBack(e)}>\n                <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                  <IoMdArrowDropleft className=\"icon-back\" />\n                </IconContext.Provider>\n                Go back\n              </button>\n\n              <button data-cy=\"gas-continue\" className=\"form-usagegas-btn btn-next\" onClick={(e) => sendUsage(e)}>\n                Continue\n\n                <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                  <IoMdArrowDropright className=\"icon-next\" />\n                </IconContext.Provider>\n              </button>\n            </div>\n          </div>\n\n          {showScript ?\n            (\n              <div className=\"helper-usagegas\">\n                <div className=\"script-usagegas\">\n                  <FormScript step={7} use={'gas'} />\n                </div>\n\n                <div className=\"assistant-usagegas-custom\">\n                  <FormAssistant tips={6} />\n                </div>\n              </div>\n            )\n            :\n            <div style={{ width: '100%' }}>\n              <div className=\"assistant-usagegas\">\n                <FormAssistant tips={6} />\n              </div>\n            </div>\n          }\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default FormUsageGAS;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormsUsage/FormUsageGBP_gs/FormUsageGBP_gs.jsx",["269"],"import React, { useState, useEffect } from \"react\";\nimport \"./FormUsageGBP_gs.css\";\n\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\n// Components\nimport FormScript from '../../FormScript/FormScript';\nimport FormAssistant from \"../../FormAssistant/FormAssistant\";\nimport Error from '../../../Error/Error'\n\nfunction FormUsageGBP_gs({ customerInformation, avgElec, progressBar, showScript, updateCustomerInformation, updateShowFormUsageGAS, updateShowFormUsageGBP_gs, updateShowFormUsageAVG, updateShowFormDebt, updateAvgGas, updateProgressBar }) {\n  /* STATES */\n  const [idk_active, update_idk_active] = useState(false);\n\n  // Error State\n  const [error, updateError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({\n    message: ''\n  });\n\n  /* FUNCTIONS */\n  // Scroll to top\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Variables\n  const dual_active = customerInformation.fuel_description.dual_active;\n\n  // Handle Click - idk\n  const handleClick = (e) => {\n    e.preventDefault();\n    // Update Error\n    updateError(false);\n    // Update state\n    update_idk_active(!idk_active);\n    const usage_gbp_description_gs = {\n      usage_gbp_entered: false,\n      usage_gbp_expended: false,\n      usage_gbp_period: false\n    }\n    // Update state\n    updateCustomerInformation({\n      ...customerInformation,\n      usage_gbp_description_gs\n    });\n  }\n\n  // Handle Change - Input\n  const handleChange = (e) => {\n    // Update Error\n    updateError(false);\n    const usage_select = document.getElementById('usage_select').value;\n    const usage_gbp_description_gs = {\n      usage_gbp_entered: true,\n      usage_gbp_expended: e.target.value.replace(/[^0-9\\.]+/g, '').trim(),\n      usage_gbp_period: usage_select\n    }\n    // Update state\n    updateCustomerInformation({\n      ...customerInformation,\n      usage_gbp_description_gs\n    });\n  }\n\n  // Initial Values - Inputs\n  let value_gbp = '';\n  if (value_gbp) {\n    value_gbp = customerInformation.usage_gbp_description_gs.usage_gbp_expended;\n  }\n\n  // Send usage\n  const sendUsage = (e) => {\n    e.preventDefault();\n    const usage_value = document.getElementById('usage_gbp_id').value;\n    const usage_gbp_period = document.getElementById('usage_select').value;\n\n    // Validation\n    if (((parseFloat(usage_value) > 3540.36) && (usage_gbp_period === 'annu')) || ((parseFloat(usage_value) > 295.03) && (usage_gbp_period === 'mo'))) {\n      let amount = '';\n      let period = '';\n\n      // Amount & period\n      if (usage_gbp_period === 'annu') {\n        amount = 3540.36;\n        period = 'year';\n      } else {\n        amount = 295.03;\n        period = 'month';\n      }\n      // Set Error message\n      setErrorMessage({\n        ...errorMessage,\n        message: `Please check how much you spend on gas per ${period}. If you spend more than £${amount.toFixed(2)} per ${period} we can't compare this against domestic consumption tariffs.`\n      });\n      // Show error\n      updateError(true);\n      return;\n    }\n\n    // Validation\n    if (usage_value === '') {\n      // Update Error\n      updateError(true);\n      return;\n    } else {\n      const usage_gbp_expended = customerInformation.usage_gbp_description_gs.usage_gbp_expended;\n      // View conditional\n      const usage_kwh_entered = customerInformation.usage_gbp_description_gs.usage_gbp_entered;\n      const usage_gbp_entered = customerInformation.usage_gbp_description_gs.usage_gbp_entered;\n      if ((usage_kwh_entered === false) && (usage_gbp_entered === false)) {\n        // Hidde usage GBP\n        updateShowFormUsageGBP_gs(false);\n        // Show usage AVG\n        updateShowFormUsageAVG(true);\n        // Update state\n        updateAvgGas(true);\n        console.log('Show AVG');\n      } else {\n        // Update state\n        updateAvgGas(false);\n        const usage_gbp_description_gs = {\n          usage_gbp_entered,\n          usage_gbp_expended,\n          usage_gbp_period\n        }\n        // Update Customer Information\n        updateCustomerInformation({\n          ...customerInformation,\n          usage_gbp_description_gs\n        });\n\n        if (dual_active) {\n          // const usage_gbp_entered = customerInformation.usage_gbp_description_es.usage_gbp_entered;\n          if (avgElec) { //usage_gbp_entered === false\n            // Hidde GBP_gs\n            updateShowFormUsageGBP_gs(false);\n            // Show Form AVG \n            updateShowFormUsageAVG(true);\n          } else {\n            // Update state\n            updateAvgGas(false);\n            // Hidde GBP_gs\n            updateShowFormUsageGBP_gs(false);\n            // Show Form Debt\n            updateShowFormDebt(true);\n            // Update Progressbar\n            updateProgressBar({ ...progressBar, step: 7 });\n            console.log('Show Form Debt');\n          }\n        } else {\n          // Update state\n          updateAvgGas(false);\n          // Hidde GBP_gs\n          updateShowFormUsageGBP_gs(false);\n          // Show Form Debt\n          updateShowFormDebt(true);\n          // Update Progressbar\n          updateProgressBar({ ...progressBar, step: 7 });\n          console.log('Show Form Debt');\n        }\n      }\n    }\n  }\n\n  // Go back\n  const goBack = (e) => {\n    e.preventDefault();\n    // Update Error\n    updateError(false);\n    // Delete Customer Usage\n    const copy_customer_usage = { ...customerInformation };\n    delete copy_customer_usage['usage_gbp_description_gs'];\n    delete copy_customer_usage['usage_gas_description'];\n    //Update Customer Information\n    updateCustomerInformation({ ...copy_customer_usage });\n    // Hidde Form GBP\n    updateShowFormUsageGBP_gs(false);\n    // Show Form KWH\n    updateShowFormUsageGAS(true);\n  };\n\n  return (\n    <>\n      <section className=\"form-usagegbp-gs-section\">\n        <div className=\"form-usagegbp-gs-container\">\n          <div className=\"form-usagegbp-gs-content\">\n            <div className=\"form-usagegbp-gs\">\n              <h1>How much spend in gas?</h1>\n              <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat aut sint, possimus suscipit hic obcaecati ad necessitatibus eum asperiores maiores in, inventore quidem quibusdam modi. Veniam recusandae maiores voluptatem voluptates?</p>\n            </div>\n\n            {idk_active ?\n              (\n                <>\n                  <div style={{ display: 'flex' }}>\n                    <div className={idk_active ? \"form-usagegbp-gs-input-container customContainer\" : null}>\n                      <span className={idk_active ? \"customSpan\" : null}>£</span>\n                      <input id=\"usage_gbp_id\" type=\"text\" name=\"usage_gbp\" onChange={(e) => handleChange(e)} className=\"form-usagegbp-gs-input\" disabled value=\"I don't know\" />\n                    </div>\n                    <select className=\"form-usagegbp-gs-select\" id=\"usage_select\">\n                      <option value=\"annu\">Annually</option>\n                      <option value=\"mo\">Monthly</option>\n                    </select>\n                  </div>\n                </>\n              )\n              :\n              (\n                <>\n                  <div style={{ display: 'flex' }}>\n                    <div className=\"form-usagegbp-gs-input-container\" >\n                      <span>£</span>\n                      <input data-cy=\"gbpgs-input\" id=\"usage_gbp_id\" type=\"number\" name=\"usage_gbp\" onChange={(e) => handleChange(e)} className=\"form-usagegbp-gs-input\" defaultValue={value_gbp || ''} />\n                    </div>\n                    <select className=\"form-usagegbp-gs-select\" id=\"usage_select\">\n                      <option value=\"annu\">Annually</option>\n                      <option value=\"mo\">Monthly</option>\n                    </select>\n                  </div>\n                </>\n              )\n            }\n\n            <button data-cy=\"gbpgs-idk\" className=\"form-usagegbp-gs-idk\" onClick={(e) => handleClick(e)}>{idk_active ? \"Enable input\" : \"I don't know\"}</button>\n\n            {/* Error */}\n            {error === true ?\n              (\n                <Error message={errorMessage.message} />\n              )\n              :\n              null}\n\n            {/* Buttons */}\n            <div className=\"form-usagegbp-gs-btn-container\">\n              <button className=\"form-usagegbp-gs-btn btn-back\" onClick={(e) => goBack(e)}>\n                <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                  <IoMdArrowDropleft className=\"icon-back\" />\n                </IconContext.Provider>\n                Go back\n              </button>\n\n              <button data-cy=\"gbpgs-continue\" className=\"form-usagegbp-gs-btn btn-next\" onClick={(e) => sendUsage(e)}>\n                Continue\n\n                <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                  <IoMdArrowDropright className=\"icon-next\" />\n                </IconContext.Provider>\n              </button>\n            </div>\n          </div>\n\n          {showScript ?\n            (\n              <div className=\"helper-usagegbp-gs\">\n                <div className=\"script-usagegbp-gs\">\n                  <FormScript step={7} use={'gbp_gs'} />\n                </div>\n\n                <div className=\"assistant-usagegbp-gs-custom\">\n                  <FormAssistant tips={6} />\n                </div>\n              </div>\n            )\n            :\n            <div style={{ width: '100%' }}>\n              <div className=\"assistant-usagegbp-gs\">\n                <FormAssistant tips={6} />\n              </div>\n            </div>\n          }\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default FormUsageGBP_gs;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormRating/FormRating.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormDetails/FormDetails.jsx",["270","271","272","273","274"],"import React, { useState, useEffect } from \"react\";\n// CSS\nimport \"./FormDetails.css\";\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropright, IoMdArrowDropleft } from 'react-icons/io';\n// Utils\nimport { validateEmail } from '../../../utils/utils';\n// Phone Number Validation\nimport { isValidPhoneNumber, parsePhoneNumber } from 'libphonenumber-js';\n// Components\nimport Error from '../../Error/Error';\n\nconst FormDetails = ({ customerInformation, progressBar, updateCustomerInformation, updateShowFormCompare, updateShowFormDetails, updateShowFormBankDetails, updateProgressBar, updateShowOverlay }) => {\n\n    /** STATES */\n    // disableInput\n    const [disableInput, updateDisableInput] = useState(true);\n\n    // Scroll to top\n    useEffect(() => {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    }, []);\n\n    // Error State\n    const [error, updateError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState({\n        message: ''\n    });\n\n    // Variables\n    const { doornumber, addressline1, addressline2, city, postcode } = customerInformation.customerAddres;\n    const { tariff_name, exit_fees, monthly_cost } = customerInformation.switching_details.supplier_selected;\n    const { debt_apply, debt_amount } = customerInformation.debt;\n\n    // console.log('Desde');\n    // console.log(customerInformation);\n\n    /** FUNCTIONS */\n\n    // Error smooth scroll\n    useEffect(() => {\n        if (error) {\n            const scroll_to = () => {\n                var element = document.querySelector(\"#error\");\n                // smooth scroll to element and align it at the bottom\n                element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n            }\n\n            scroll_to();\n        }\n    }, [error]);\n\n    // Function that runs every time the user writes to the input\n    const handleChange = (e) => {\n        // Hidde error\n        updateError(false);\n        // Update Customer details\n        updateCustomerInformation({\n            ...customerInformation,\n            customerDetails: {\n                ...customerInformation.customerDetails,\n                [e.target.name]: e.target.value\n            }\n        });\n    };\n\n    // Verify button\n    const verifyCustomer = async (e) => {\n        e.preventDefault();\n\n        // Show Overlay\n        updateShowOverlay(true);\n\n        let phone = { 'phone': customerInformation.customerDetails.phone.replace(/[^0-9\\.]+/g, '').trim().toString() };\n\n        await fetch('https://zohosdkfunction.azurewebsites.net/api/httptrigger1?method=verify', {\n            method: 'POST',\n            body: JSON.stringify(phone),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((response) => {\n            if (response.status !== 200) {\n                return Promise.reject(response.json());\n            }\n\n            return response.json();\n\n        }).then((response) => {\n            // console.log(response);\n            if (response.status !== 200) {\n                // Disable input\n                updateDisableInput(false);\n                return Promise.reject(response);\n            }\n            // Update Customer details\n            updateCustomerInformation({\n                ...customerInformation,\n                customerDetails: {\n                    ...customerInformation.customerDetails,\n                    first_name: response.first_name ? response.first_name : '',\n                    last_name: response.last_name ? response.last_name : '',\n                    email: response.email ? response.email : '',\n                    phone: response.phone ? response.phone : ''\n                },\n                bankDetails: {\n                    account_holder: '',\n                    account_number: '',\n                    sort_code: ''\n                }\n            });\n\n            // Disable input\n            updateDisableInput(true);\n\n        }).catch((error) => {\n            console.error('Error: ', error);\n            // Update Customer details\n            updateCustomerInformation({\n                ...customerInformation,\n                customerDetails: {\n                    ...customerInformation.customerDetails,\n                    first_name: '',\n                    last_name: '',\n                    email: '',\n                    phone: phone.phone\n                },\n                bankDetails: {\n                    account_holder: '',\n                    account_number: '',\n                    sort_code: ''\n                }\n            });\n        });\n\n        // Hide Overlay\n        updateShowOverlay(false);\n    }\n\n    // Edit button\n    const editCustomer = (e) => {\n        e.preventDefault();\n\n        // Update disable input\n        updateDisableInput(false);\n    }\n\n    // goToBankDetails\n    const goToBankDetails = async (e) => {\n        e.preventDefault();\n\n        // Customer Details\n        const { first_name, last_name, email, phone } = customerInformation.customerDetails;\n        // Validated details\n        const first_name_validated = first_name.replace(/[^a-zA-Z ]/g, \"\").trim();\n        const last_name_validated = last_name.replace(/[^a-zA-Z ]/g, \"\").trim();\n        const email_validated = email.replace(/[^A-Za-z0-9|@.-]/g, \"\").trim();\n        const phone_validated = phone.replace(/[^0-9\\.]+/g, '').trim().toString();\n\n        // Validate email\n        if (!validateEmail(email_validated)) {\n            // Set error message\n            setErrorMessage({\n                ...errorMessage,\n                message: 'Please introduce a valid email address'\n            });\n            // Show error\n            updateError(true);\n            return;\n        };\n\n        console.log(phone_validated)\n\n        // Validate phone number length\n        if (phone_validated.length <= 10 || phone_validated.length > 12) {\n            // Set error message\n            setErrorMessage({\n                ...errorMessage,\n                message: 'Please introduce a valid phone number'\n            });\n            // Show Error\n            updateError(true);\n            return;\n        };\n\n        // Phone number parsed\n        const parsedPhoneNumber = parsePhoneNumber(phone_validated, 'GB');\n        // Phone number\n        const phoneNumber = parsedPhoneNumber.number;\n\n        // Phone number validation\n        if (!isValidPhoneNumber(phoneNumber, 'GB')) {\n            // Set error message\n            setErrorMessage({\n                ...errorMessage,\n                message: 'Please introduce a valid phone number'\n            });\n            // Show Error\n            updateError(true);\n            return;\n        };\n\n        // Validation\n        if (!first_name_validated || !last_name_validated || !email_validated || !phone_validated) {\n            // Set error message\n            setErrorMessage({\n                ...errorMessage,\n                message: 'All fields are required'\n            });\n            // Show Error\n            updateError(true);\n            return;\n        };\n\n        if (!disableInput) {\n            // Show Overlay\n            updateShowOverlay(true);\n\n            // Customer Object\n            const customerObj = {\n                \"fullname\": `${first_name_validated} ${last_name_validated}`,\n                \"email\": email_validated,\n                \"phone\": phoneNumber,\n                \"authorised_by\": customerInformation.agent.email\n            }\n\n            console.log(customerObj)\n\n            // Endpoint\n            const url = 'https://zohocontactcreatefunction.azurewebsites.net/api/HttpTrigger1?method=createContact';\n            // Fetch Create contact\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(customerObj),\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n            }).then(function (response) {\n                console.log(response);\n                return response.json();\n\n            }).then(function (response) {\n                console.log(response);\n                return response;\n            }).catch(function (error) {\n                console.error(`Catch an error fetching to postcoder ${error}`);\n            });\n\n            // Hide Overlay\n            updateShowOverlay(false);\n        }\n\n        // Update Customer details\n        updateCustomerInformation({\n            ...customerInformation,\n            customerDetails: {\n                ...customerInformation.customerDetails,\n                first_name: first_name_validated,\n                last_name: last_name_validated,\n                email: email_validated,\n                phone: phoneNumber.replace(/[^0-9\\.]+/g, '')\n            },\n            bankDetails: {\n                account_holder: '',\n                account_number: '',\n                sort_code: ''\n            }\n        });\n\n        // Update Error\n        updateError(false);\n        // Hide Form Customer details\n        updateShowFormDetails(false);\n        // Update Progress Bar\n        updateProgressBar({ ...progressBar, step: 10 });\n        // Show Bank Details\n        updateShowFormBankDetails(true);\n    }\n\n    // goToCompareSection\n    const goToCompareSection = (e) => {\n        e.preventDefault();\n\n        // Delete Switching details\n        const copy_customer_switching = { ...customerInformation };\n        delete copy_customer_switching['switching_details'];\n        delete copy_customer_switching['customerDetails'];\n        // Update customer information\n        updateCustomerInformation({ ...copy_customer_switching });\n        // Update Error\n        updateError(false);\n        // Hide Customer details\n        updateShowFormDetails(false);\n        // Update Progress Bar\n        updateProgressBar({ ...progressBar, step: 8 });\n        // Show compare section \n        updateShowFormCompare(true);\n    }\n\n    // UseEffect - conditional disable state\n    useEffect(() => {\n        if ((!customerInformation.customerDetails.first_name) || (!customerInformation.customerDetails.last_name) || (!customerInformation.customerDetails.email) || (!customerInformation.customerDetails.phone)) {\n            // Update disable input\n            updateDisableInput(false)\n        }\n    }, []);\n\n    return (\n        <>\n            <section className=\"form-details-section\">\n                <div className=\"form-details-container\">\n\n                    {/* Content */}\n                    <div className=\"form-details-content\">\n                        <div className=\"form-details\">\n                            <h1>Customer Details</h1>\n                            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum dicta libero tenetur commodi id? Eius aperiam illo voluptatem fuga nobis nulla vitae obcaecati. Rerum doloribus veniam accusamus ad quibusdam sequi!</p>\n                        </div>\n\n                        {/* Inputs */}\n                        <form className=\"form-details-input-container\" onSubmit={(e) => goToBankDetails(e)}>\n                            <div className=\"form-details-input-content-custom\">\n                                <div className=\"form-details-input-element-custom\">\n                                    <label htmlFor=\"firstName\">First Name<span>*</span></label>\n                                    <input type=\"text\" id=\"firstName\" name='first_name' onChange={handleChange} value={customerInformation.customerDetails.first_name.replace(/[^a-zA-Z ]/g, \"\") || ''} disabled={disableInput} />\n                                </div>\n\n                                <div className=\"form-details-input-element-custom\">\n                                    <label htmlFor=\"lastName\">Last Name<span>*</span></label>\n                                    <input type=\"text\" id=\"lastName\" name='last_name' onChange={handleChange} value={customerInformation.customerDetails.last_name.replace(/[^a-zA-Z ]/g, \"\") || ''} disabled={disableInput} />\n                                </div>\n                            </div>\n\n                            <div className=\"form-details-input-element\">\n                                <label htmlFor=\"emailAddress\">Email address<span>*</span></label>\n                                <input type=\"text\" id=\"emailAddress\" name='email' onChange={handleChange} value={customerInformation.customerDetails.email.replace(/[^A-Za-z0-9|@.-]/g, \"\") || ''} disabled={disableInput} required={true} />\n                            </div>\n\n                            <div className=\"form-details-input-content-custom\" style={error ? { marginBottom: '1.9rem' } : null} >\n                                <div className=\"form-details-input-element-custom\">\n                                    <label htmlFor=\"phoneNumber\">Phone Number<span>*</span></label>\n                                    <input type=\"text\" id=\"phoneNumber\" name='phone' onChange={handleChange} value={customerInformation.customerDetails.phone.replace(/[^0-9\\.]+/g, '') || ''} disabled={disableInput} required={true} />\n                                </div>\n\n                                {/* Verify and Edit buttons */}\n                                <div className=\"form-details-btn-container-custom\">\n                                    <div>\n                                        <button className=\"form-details-btn-custom\" type=\"button\" disabled={disableInput} onClick={(e) => verifyCustomer(e)}>Verify</button>\n\n                                        <button className=\"form-details-btn-custom\" type=\"button\" onClick={(e) => editCustomer(e)}>Edit</button>\n                                    </div>\n                                </div>\n                            </div>\n\n                            {error ?\n                                (\n                                    // <Error message={ errorEmail ? 'Please introduce a valid email address' : 'All fields are required, please check'} />\n                                    <Error message={errorMessage.message} />\n                                )\n                                :\n                                null\n                            }\n\n                            {/* Buttons */}\n                            <div className=\"form-details-btn-container\">\n                                <button className=\"form-details-btn btn-back\" onClick={(e) => goToCompareSection(e)}>\n                                    <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                                        <IoMdArrowDropleft className=\"icon-back\" />\n                                    </IconContext.Provider>\n                                    Go back\n                                </button>\n\n                                <button data-cy=\"addrtyped-continue\" className=\"form-details-btn btn-next\">\n                                    Continue\n\n                                    <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                                        <IoMdArrowDropright className=\"icon-next\" />\n                                    </IconContext.Provider>\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n\n                    {/* Summary */}\n                    <div className=\"form-summary-container\">\n                        <h1>Summary</h1>\n\n                        <div className=\"form-summary-section\">\n                            <h2>Customer Information</h2>\n\n                            <div className=\"form-summary-content\">\n                                <div className=\"form-summary-element\">\n                                    <p><span>Door number:</span></p>\n                                    <p className=\"text-end\">{doornumber}</p>\n                                </div>\n\n                                <div className=\"form-summary-element\">\n                                    <p><span>Address line 1:</span></p>\n                                    <p className=\"text-end\">{addressline1}</p>\n                                </div>\n\n                                <div className=\"form-summary-element\">\n                                    <p><span>Address line 2:</span></p>\n                                    <p className=\"text-end\">{addressline2}</p>\n                                </div>\n\n                                <div className=\"form-summary-element\">\n                                    <p><span>City:</span></p>\n                                    <p className=\"text-end\">{city}</p>\n                                </div>\n\n                                <div className=\"form-summary-element\">\n                                    <p><span>Postcode:</span></p>\n                                    <p className=\"text-end\">{postcode}</p>\n                                </div>\n                            </div>\n                        </div>\n\n                        <hr />\n\n                        <div className=\"form-summary-section\">\n                            <h2>About your chosen plan</h2>\n\n                            <div className=\"form-summary-content\">\n                                <div className=\"form-summary-element\">\n                                    <p><span>Plan name:</span></p>\n                                    <p className=\"text-end\">{tariff_name}</p>\n                                </div>\n\n                                <div className=\"form-summary-element\">\n                                    <p><span>Annual saving:</span></p>\n                                    <p className=\"text-end\"><span>£</span>{148}</p>\n                                </div>\n\n                                <div className=\"form-summary-element\">\n                                    <p><span>Early exit fee:</span></p>\n                                    <p className=\"text-end\"><span>£</span>{exit_fees}</p>\n                                </div>\n\n                                <div className=\"form-summary-element\">\n                                    <p><span>Contract length:</span></p>\n                                    <p className=\"text-end\">{24} months</p>\n                                </div>\n\n                                <div className=\"form-summary-element\">\n                                    <p><span>Monthly direct debit:</span></p>\n                                    <p className=\"text-end\"><span>£</span>{monthly_cost}</p>\n                                </div>\n\n                                <div className=\"form-summary-element\">\n                                    <p><span>Existing debt:</span></p>\n                                    <p className=\"text-end\">{debt_apply ? <><span>£</span>{debt_amount}</> : 'N/A'}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </>\n    );\n};\n\nexport default FormDetails;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormDebt/FormDebt.jsx",["275","276"],"import React, { useState, useEffect } from \"react\";\nimport \"./FormDebt.css\";\n// Firebase\nimport { db } from \"../../../firebase/firebase\";\nimport firebase from \"firebase/app\";\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\nimport { FaCheckSquare, FaMoneyCheckAlt, FaCreativeCommonsNcEu, FaRegQuestionCircle } from 'react-icons/fa';\n// Components\nimport FormScript from '../FormScript/FormScript';\nimport FormAssistant from \"../FormAssistant/FormAssistant\";\nimport Error from '../../Error/Error';\n\nfunction FormDebt({ customerInformation, showScript, progressBar, updateCustomerInformation, updateShowFormUsageKWH, updateShowFormUsageGBP_es, updateShowFormUsageAVG, updateProgressBar, updateShowFormUsageGAS, updateShowFormUsageGBP_gs, updateShowFormDebt, updateShowFormCompare }) {\n    /* STATES */\n\n    // Radio button active class\n    const [radioActive, updateRadioActive] = useState({\n        debt_yes: false,\n        debt_no: false,\n        debt_not_sure: false\n    });\n\n    // Debt amount\n    const [debt_amount, update_debt_amount] = useState(false);\n\n    // Error State\n    const [error, updateError] = useState(false);\n    const [error_debt_amount, update_error_debt_amount] = useState(false);\n\n    /* FUNCTIONS */\n\n    /** Variables */\n    // dual_active\n    const dual_active = customerInformation.fuel_description.dual_active;\n    // gas_only\n    const gas_only = customerInformation.fuel_description.gas_only;\n    // elec_only\n    const elec_only = customerInformation.fuel_description.elec_only;\n\n    // Scroll to top & asign data to 'IDK' supplier\n    useEffect(() => {\n        // Scroll to top\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    }, []);\n\n    // Error smooth scroll\n    useEffect(() => {\n        if (error) {\n            const scroll_to = () => {\n                var element = document.querySelector(\"#error\");\n                // smooth scroll to element and align it at the bottom\n                element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n            }\n\n            scroll_to()\n        }\n\n        if (error_debt_amount) {\n            const scroll_to = () => {\n                var element = document.querySelector(\"#error\");\n                // smooth scroll to element and align it at the bottom\n                element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n            }\n\n            scroll_to();\n        }\n    }, [error, error_debt_amount]);\n\n    const active_rb_yes = radioActive.debt_yes;\n    const active_rb_no = radioActive.debt_no;\n    const active_rb_not_sure = radioActive.debt_not_sure;\n\n    const handleClickRB_yes = () => {\n        // Update error\n        updateError(false);\n        // Update state\n        updateRadioActive({\n            ...radioActive,\n            debt_yes: true,\n            debt_no: false,\n            debt_not_sure: false\n        });\n\n        // Update Customer Information\n        updateCustomerInformation({\n            ...customerInformation,\n            debt: {\n                debt_apply: 'Yes'\n            }\n        });\n        // Update state\n        update_debt_amount(true);\n    }\n\n    const handleClickRB_no = () => {\n        // Update error\n        updateError(false);\n        // Update state\n        updateRadioActive({\n            ...radioActive,\n            debt_yes: false,\n            debt_no: true,\n            debt_not_sure: false\n        });\n        // Update Customer Information\n        updateCustomerInformation({\n            ...customerInformation,\n            debt: {\n                debt_apply: 'No',\n                debt_amount: 0\n            }\n        });\n        // Update state\n        update_debt_amount(false);\n        // Update Error\n        update_error_debt_amount(false);\n    }\n\n    const handleClickRB_not_sure = () => {\n        // Update error\n        updateError(false);\n        // Update state\n        updateRadioActive({\n            ...radioActive,\n            debt_yes: false,\n            debt_no: false,\n            debt_not_sure: true\n        });\n        // Update Customer Information\n        updateCustomerInformation({\n            ...customerInformation,\n            debt: {\n                debt_apply: 'Not sure',\n                debt_amount: 0\n            }\n        });\n        // Update state\n        update_debt_amount(false);\n        // Update Error\n        update_error_debt_amount(false);\n    }\n\n    //  handleChange\n    const handleChange = (e) => {\n        e.preventDefault();\n\n        // Hide error\n        updateError(false);\n        // Hide error\n        update_error_debt_amount(false);\n\n        let value = parseFloat(e.target.value.replace(/[^0-9.]/g, '').trim()).toFixed(2);\n\n        // Update Customer Information\n        updateCustomerInformation({\n            ...customerInformation,\n            debt: {\n                ...customerInformation.debt,\n                debt_amount: parseFloat(value)\n            }\n        });\n    }\n\n    // sendDebt\n    const sendDebt = (e) => {\n        e.preventDefault();\n\n        // Hide error\n        updateError(false);\n\n        // Validation\n        if (!customerInformation.hasOwnProperty('debt')) {\n            // Show error\n            updateError(true);\n            return;\n        }\n\n        // Validation amount\n        if (!customerInformation.debt.hasOwnProperty('debt_amount')) {\n            // Hide error\n            updateError(false);\n            // Show error\n            update_error_debt_amount(true);\n            return;\n        }\n\n        // Hidde error\n        updateError(false);\n        // Hide Form Debt\n        updateShowFormDebt(false);\n        // Show Form Compare\n        updateShowFormCompare(true);\n        // Update Progressbar\n        updateProgressBar({ ...progressBar, step: 8 });\n\n        console.log('send debt');\n    };\n\n    // Go back\n    const goBack = (e) => {\n        e.preventDefault();\n\n        // Update Error\n        updateError(false);\n        // Hide Form Debt\n        updateShowFormDebt(false);\n        // Update Progress Bar\n        updateProgressBar({ ...progressBar, step: 6 });\n\n        // Elec Only\n        if (elec_only) {\n            // KWH\n            if (customerInformation.hasOwnProperty('usage_kwh_description')) {\n                const usage_kwh_entered = customerInformation.usage_kwh_description.usage_kwh_entered;\n                if (usage_kwh_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_kwh_description'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Show KWH Form\n                    updateShowFormUsageKWH(true);\n                    // console.log('Go back to KWH section');\n                }\n            }\n\n            // GBP\n            if (customerInformation.hasOwnProperty('usage_gbp_description_es')) {\n                const usage_gbp_entered = customerInformation.usage_gbp_description_es.usage_gbp_entered;\n                if (usage_gbp_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_gbp_description_es'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Show GBP Form\n                    updateShowFormUsageGBP_es(true);\n                    // console.log('Gob back to GBP section');\n                }\n            }\n\n            // Property size\n            if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n                const usage_size_entered = customerInformation.usage_property_size_es.usage_size_entered;\n                if (usage_size_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_property_size_es'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Show AVG Form\n                    updateShowFormUsageAVG(true);\n                    // console.log('Go back to property size');\n                }\n            }\n            return;\n        }\n\n        if (gas_only) {\n            // KWH - GAS\n            if (customerInformation.hasOwnProperty('usage_gas_description')) {\n                const usage_kwh_entered = customerInformation.usage_gas_description.usage_kwh_entered;\n                if (usage_kwh_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_gas_description'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Show GAS Form\n                    updateShowFormUsageGAS(true);\n                    // console.log('Go back to KWH section');\n                }\n            }\n\n            // GBP\n            if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n                const usage_gbp_entered = customerInformation.usage_gbp_description_gs.usage_gbp_entered;\n                if (usage_gbp_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_gbp_description_gs'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Show GBP Form\n                    updateShowFormUsageGBP_gs(true);\n                    // console.log('Gob back to GBP section');\n                }\n            }\n\n            // Property size\n            if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n                const usage_size_entered = customerInformation.usage_property_size_gs.usage_size_entered;\n                if (usage_size_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_property_size_gs'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Show AVG Form\n                    updateShowFormUsageAVG(true);\n                    // console.log('Go back to property size');\n                }\n            }\n            return;\n        }\n\n        if (dual_active) {\n            // console.log('Dual active');\n\n            // KWH - GAS\n            if (customerInformation.hasOwnProperty('usage_gas_description')) {\n                const usage_kwh_entered = customerInformation.usage_gas_description.usage_kwh_entered;\n                if (usage_kwh_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_gas_description'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Show GAS Form\n                    updateShowFormUsageGAS(true);\n                    // console.log('Go back to KWH section');\n                }\n            }\n\n            // GBP - GAS\n            if (customerInformation.hasOwnProperty('usage_gbp_description_gs')) {\n                const usage_gbp_entered = customerInformation.usage_gbp_description_gs.usage_gbp_entered;\n                if (usage_gbp_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_gbp_description_gs'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Show GBP Form\n                    updateShowFormUsageGBP_gs(true);\n                    // console.log('Go back to GBP section');\n                }\n            }\n\n            // Property size - usage_property_size_es\n            if (customerInformation.hasOwnProperty('usage_property_size_es')) {\n                const usage_size_entered = customerInformation.usage_property_size_es.usage_size_entered;\n                if (usage_size_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_property_size_es'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Hidde Gas usage\n                    updateShowFormUsageGBP_gs(false);\n                    updateShowFormUsageGAS(false);\n                    // Show AVG Form\n                    updateShowFormUsageAVG(true);\n                    // console.log('Go back to property size - usage_property_size_es');\n\n                }\n            }\n\n            // Property size - usage_property_size_gs\n            if (customerInformation.hasOwnProperty('usage_property_size_gs')) {\n                const usage_size_entered = customerInformation.usage_property_size_gs.usage_size_entered;\n                if (usage_size_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_property_size_gs'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Show AVG Form\n                    updateShowFormUsageAVG(true);\n                    // console.log('Go back to property size - usage_property_size_gs');\n                }\n            }\n\n            // Property_size_dual - usage_property_size_dual\n            if (customerInformation.hasOwnProperty('usage_property_size_dual')) {\n                const usage_size_entered = customerInformation.usage_property_size_dual.usage_size_entered;\n                if (usage_size_entered) {\n                    // Delete Customer Usage\n                    const copy_customer_usage = { ...customerInformation };\n                    delete copy_customer_usage['usage_property_size_dual'];\n                    delete copy_customer_usage['switching_details'];\n                    delete copy_customer_usage['debt'];\n                    // Update customer information\n                    updateCustomerInformation({ ...copy_customer_usage });\n                    // Show AVG Form\n                    updateShowFormUsageAVG(true);\n                    // console.log('Go back to property size - usage_property_size_dual');\n                }\n            }\n\n            return;\n        }\n    };\n\n    return (\n        <>\n            <section className=\"form-debt-section\">\n                <div className=\"form-debt-container\">\n                    <div className=\"form-debt-content\">\n                        <div className=\"form-debt\">\n                            <h1>Do you have any existing debt?</h1>\n                            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Dicta ex maiores dignissimos, tempore voluptatum ipsa facere corporis vero quae dolorum sapiente. Ducimus cupiditate quia non officia, aliquid delectus id perferendis.</p>\n                        </div>\n\n                        <form className=\"form-debt-btn-selection-container\">\n                            {/* Yes */}\n                            <div data-cy=\"debt-yes\" className=\"form-debt-blocks-dual\">\n                                <div className={active_rb_yes ? \"form-debt-btn-selection-content isDual active\" : \"form-debt-btn-selection-content isDual\"} id=\"yes_selected\" onClick={() => handleClickRB_yes()}>\n                                    <input className=\"d-none\" type=\"radio\" name=\"dual-type\" id=\"dual_yes\" />\n                                    <div className=\"form-debt-cb-container\">\n                                        <IconContext.Provider value={{ color: '#31145B', size: '30px' }}>\n                                            <FaCheckSquare className=\"form-debt-cb\" />\n                                        </IconContext.Provider>\n                                    </div>\n\n                                    <div className=\"form-debt-btn-selection-dual\">\n                                        <IconContext.Provider value={{ color: '#31145B', size: '50px' }}>\n                                            <FaMoneyCheckAlt className=\"fuel-icon\" />\n                                        </IconContext.Provider>\n                                    </div>\n                                    <p>Yes</p>\n                                </div>\n                            </div>\n\n                            {/* No */}\n                            <div className=\"form-debt-blocks-dual\">\n                                <div data-cy=\"debt-no\" className={active_rb_no ? \"form-debt-btn-selection-content isDual active\" : \"form-debt-btn-selection-content isDual\"} id=\"no_selected\" onClick={() => handleClickRB_no()}>\n                                    <input className=\"d-none\" type=\"radio\" name=\"dual-type\" id=\"dual_no\" />\n                                    <div className=\"form-debt-cb-container\">\n                                        <IconContext.Provider value={{ color: '#31145B', size: '30px' }}>\n                                            <FaCheckSquare className=\"form-debt-cb\" />\n                                        </IconContext.Provider>\n                                    </div>\n\n                                    <div className=\"form-debt-btn-selection-dual\">\n                                        <IconContext.Provider value={{ color: '#31145B', size: '50px' }}>\n                                            <FaCreativeCommonsNcEu className=\"fuel-icon\" />\n                                        </IconContext.Provider>\n                                    </div>\n                                    <p>No</p>\n                                </div>\n                            </div>\n\n                            {/* Not sure */}\n                            <div className=\"form-debt-blocks-dual\">\n                                <div data-cy=\"debt-no\" className={active_rb_not_sure ? \"form-debt-btn-selection-content isDual active\" : \"form-debt-btn-selection-content isDual\"} id=\"no_selected\" onClick={() => handleClickRB_not_sure()}>\n                                    <input className=\"d-none\" type=\"radio\" name=\"dual-type\" id=\"dual_no\" />\n                                    <div className=\"form-debt-cb-container\">\n                                        <IconContext.Provider value={{ color: '#31145B', size: '30px' }}>\n                                            <FaCheckSquare className=\"form-debt-cb\" />\n                                        </IconContext.Provider>\n                                    </div>\n\n                                    <div className=\"form-debt-btn-selection-dual\">\n                                        <IconContext.Provider value={{ color: '#31145B', size: '50px' }}>\n                                            <FaRegQuestionCircle className=\"fuel-icon\" />\n                                        </IconContext.Provider>\n                                    </div>\n                                    <p>Not Sure</p>\n                                </div>\n                            </div>\n                        </form>\n\n                        {/* Error */}\n                        {error === true ?\n                            (\n                                <div className=\"error-center\">\n                                    <Error message={'Please select above'} />\n                                </div>\n                            )\n                            :\n                            null}\n\n                        {debt_amount ?\n                            (\n                                <>\n                                    <div className=\"form-debt-amount-container\">\n                                        <label htmlFor=\"debt-amount\">How much is your debt?</label>\n                                        <div style={{ display: 'flex' }}>\n                                            <div className=\"form-debt-input-content\" >\n                                                <input data-cy=\"debt-input\" className=\"form-debt-amount-input\" type=\"number\" id=\"debt-amount\" onChange={(e) => handleChange(e)} />\n                                                <span>£</span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </>\n                            )\n\n                            :\n                            null\n                        }\n\n                        {error_debt_amount ?\n                            (\n                                <div className=\"error-debt\">\n                                    <Error message={'Please check your Economy 7 split'} />\n                                </div>\n                            )\n                            :\n                            null\n                        }\n\n                        {/* Buttons */}\n                        <div className=\"form-debt-btn-container\">\n                            <button className=\"form-debt-btn btn-back\" onClick={(e) => goBack(e)}>\n                                <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                                    <IoMdArrowDropleft className=\"icon-back\" />\n                                </IconContext.Provider>\n                                Go back\n                            </button>\n\n                            <button data-cy=\"debt-continue\" className=\"form-debt-btn btn-next\" onClick={(e) => sendDebt(e)}>\n                                Continue\n\n                                <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                                    <IoMdArrowDropright className=\"icon-next\" />\n                                </IconContext.Provider>\n                            </button>\n                        </div>\n                    </div>\n\n                    {showScript ?\n                        (\n                            <div className=\"helper-debt\">\n                                <div className=\"script-debt\">\n                                    <FormScript step={8} />\n                                </div>\n\n                                <div className=\"assistant-debt-custom\">\n                                    <FormAssistant tips={7} />\n                                </div>\n                            </div>\n                        )\n                        :\n                        <div style={{ width: '100%' }}>\n                            <div className=\"assistant-debt\">\n                                <FormAssistant tips={7} />\n                            </div>\n                        </div>\n                    }\n                </div>\n            </section>\n        </>\n    );\n}\n\nexport default FormDebt;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormE7/FormE7.jsx",["277","278"],"import React, { useState, useEffect } from \"react\";\nimport \"./FormE7.css\";\n// Firebase\nimport { db } from \"../../../firebase/firebase\";\nimport firebase from \"firebase/app\";\n// Icons\nimport { IconContext } from \"react-icons\";\nimport { IoMdArrowDropleft, IoMdArrowDropright } from 'react-icons/io';\nimport { FaCheckSquare, FaRegThumbsUp, FaRegThumbsDown } from 'react-icons/fa';\n// Components\nimport FormScript from '../FormScript/FormScript';\nimport FormAssistant from \"../FormAssistant/FormAssistant\";\nimport Error from '../../Error/Error';\n\nfunction FormE7({ economy7, customerInformation, electricityPaymentType, gasPaymentType, electricityInformation, gasInformation, supplierInformation, progressBar, showScript, updateEconomy7, updateCustomerInformation, updateShowFormSupply, updateShowE7, updateShowFormTariffs, updateElectricityPaymentType, updateGasPaymentType, updateProgressBar, updateShowOverlay, updateSupplierInformation, updateGasInformation, updateElectricityInformation, updateShowFormUsageKWH, updateShowFormUsageGAS }) {\n  /* STATES */\n\n  // Radio button active class\n  const [radioActive, updateRadioActive] = useState({\n    e7_yes: false,\n    e7_no: false\n  });\n\n  // Split for E7\n  const [e7_split, update_e7_split] = useState(false);\n\n  // Error State\n  const [error, updateError] = useState(false);\n  const [error_e7_split, update_error_e7_split] = useState(false);\n\n  /* FUNCTIONS */\n\n  // Variables\n  // elec_only\n  const elec_only = customerInformation.fuel_description.elec_only;\n  // gas_only\n  const gas_only = customerInformation.fuel_description.gas_only;\n  // same_supplier\n  const same_supplier = customerInformation.fuel_description.same_supplier;\n  // dual_active\n  const dual_active = customerInformation.fuel_description.dual_active;\n  // postcode_formatted\n  const postcode_formatted = customerInformation.customerAddres.postcode.replace(/\\s/g, '').trim().toLowerCase();\n  // doornumber_formatted\n  const doornumber_formatted = customerInformation.customerAddres.doornumber.replace(/\\s/g, '').trim().toLowerCase();\n  // uid\n  const uid = `${postcode_formatted}-${doornumber_formatted}`;\n\n  // Scroll to top & asign data to 'IDK' supplier\n  useEffect(() => {\n    // Scroll to top\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // Error smooth scroll\n  useEffect(() => {\n    if (error) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n      }\n\n      scroll_to()\n    }\n\n    if (error_e7_split) {\n      const scroll_to = () => {\n        var element = document.querySelector(\"#error\");\n        // smooth scroll to element and align it at the bottom\n        element.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"end\" });\n      }\n\n      scroll_to();\n    }\n  }, [error, error_e7_split]);\n\n  const active_rb_yes = radioActive.e7_yes;\n  const active_rb_no = radioActive.e7_no;\n\n  const handleClickRB_yes = () => {\n    // Update error\n    updateError(false);\n    // Update state\n    updateRadioActive({\n      ...radioActive,\n      e7_yes: true,\n      e7_no: false\n    });\n    // Update Economy 7\n    updateEconomy7({\n      ...economy7,\n      economy7: {\n        economy7_apply: true\n      }\n    });\n    // Update Customer Information\n    updateCustomerInformation({\n      ...customerInformation,\n      economy7: {\n        economy7_apply: true\n      }\n    });\n    // Update state\n    update_e7_split(true);\n  }\n\n  const handleClickRB_no = () => {\n    // Update error\n    updateError(false);\n    // Update state\n    updateRadioActive({\n      ...radioActive,\n      e7_yes: false,\n      e7_no: true\n    });\n    // Update Economy 7\n    updateEconomy7({\n      ...economy7,\n      economy7: {\n        economy7_apply: false,\n        economy7_split: false\n      }\n    });\n    // Update Customer Information\n    updateCustomerInformation({\n      ...customerInformation,\n      economy7: {\n        economy7_apply: false,\n        economy7_split: false\n      }\n    });\n    // Update state\n    update_e7_split(false);\n    // Update Error\n    update_error_e7_split(false);\n  }\n\n  const handleChange = (e) => {\n    const e7_split_value = parseFloat(document.getElementById('e7-split').value.trim().replace(/[^\\w\\s]/gi, ''));\n\n    if (isNaN(e7_split_value) || e7_split_value < 1 || e7_split_value > 100) {\n      // Update error\n      update_error_e7_split(true);\n      return;\n    } else {\n      // Update error\n      update_error_e7_split(false);\n    }\n\n    // Update Customer Inforation \n    updateCustomerInformation({\n      ...customerInformation,\n      economy7: {\n        economy7_apply: true,\n        economy7_split: e7_split_value\n      }\n    });\n\n    // Update Economy 7\n    updateEconomy7({\n      economy7: {\n        economy7_apply: true,\n        economy7_split: e7_split_value\n      }\n    });\n  }\n\n  // Default unit rate for electricity\n  const general_unit_rate_elec = { unit_rate: 19 };\n\n  // Default unit rate for gas\n  const general_unit_rate_gas = { unit_rate: 3 };\n\n  // useEffect to assign the svt for the supplier selected\n  useEffect(() => {\n\n    (async () => {\n\n      /**-- Unit rate for electricity --*/\n\n      // DocRef Unit Rate Elec\n      let unitRateElecRef = await db.collection(\"unitRates\").doc('unit_rate_svt_elec');\n\n      let unitRateElec = await unitRateElecRef.get().then((doc) => {\n        if (doc.exists) {\n\n          return doc.data();\n\n        } else {\n\n          // console.log(general_unit_rate_elec);\n\n          return general_unit_rate_elec;\n        }\n      }).catch((error) => {\n\n        console.log(\"Error getting document:\", error);\n        // console.log(general_unit_rate_elec);\n\n        return general_unit_rate_elec;\n      });\n\n      /**-- Unit rate for gas --*/\n\n      // DocRef Unit Rate gas\n      let unitRateGasRef = await db.collection(\"unitRates\").doc('unit_rate_svt_gas');\n\n      let unitRateGas = await unitRateGasRef.get().then((doc) => {\n        if (doc.exists) {\n\n          return doc.data();\n\n        } else {\n\n          // console.log(general_unit_rate_elec);\n\n          return general_unit_rate_gas;\n        }\n      }).catch((error) => {\n\n        console.log(\"Error getting document:\", error);\n        // console.log(general_unit_rate_elec);\n\n        return general_unit_rate_gas;\n      });\n\n      // Market cap unit rates\n      let unit_rate_svt_elec = unitRateElec.unit_rate;\n      let unit_rate_svt_gas = unitRateGas.unit_rate;\n\n      if (elec_only) {\n        console.log('elec_only');\n\n        // Update customer information\n        updateCustomerInformation({\n          ...customerInformation,\n          tariff_description: {\n            unit_rate: unit_rate_svt_elec\n          }\n        });\n      }\n\n      if (gas_only) {\n        console.log('gas_only');\n        // Update customer information\n        updateCustomerInformation({\n          ...customerInformation,\n          tariff_description: {\n            unit_rate: unit_rate_svt_gas\n          }\n        });\n      }\n\n      if (dual_active) {\n        if (same_supplier) {\n          // Update customer information\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description: {\n              unit_rate_elec: unit_rate_svt_elec,\n              unit_rate_gas: unit_rate_svt_gas,\n            }\n          });\n        } else {\n          console.log('Same supplier false');\n          // Update customer information\n          updateCustomerInformation({\n            ...customerInformation,\n            tariff_description_elec: {\n              elec_tariff: {\n                unit_rate: unit_rate_svt_elec\n              }\n            },\n            tariff_description_gas: {\n              gas_tariff: {\n                unit_rate: unit_rate_svt_gas\n              }\n            }\n          });\n        }\n      }\n\n    })();\n\n  }, []);\n\n  // sendE7\n  const sendE7 = async (e) => {\n    e.preventDefault();\n\n    /**-- Validation --*/\n    if (error_e7_split) {\n      return;\n    };\n\n    if ((active_rb_yes === false) && (active_rb_no === false)) {\n      // Update error\n      updateError(true);\n      return;\n    };\n\n    if (e7_split) {\n      const e7_split_value = document.getElementById('e7-split').value;\n      if (e7_split_value === '') {\n        update_error_e7_split(true);\n        return;\n      }\n    };\n\n    // Show overlay\n    updateShowOverlay(true);\n    // Hidde Economy 7\n    updateShowE7(false);\n    // Update Progressbar\n    updateProgressBar({ ...progressBar, step: 6 });\n\n    // Conditional to usage section\n    if (gas_only) {\n      // Show Gas\n      updateShowFormUsageGAS(true)\n    } else {\n      // Show KWH\n      updateShowFormUsageKWH(true);\n    }\n\n    /**-- Firebase --*/\n    const { customerAddres, useGas, fuel, fuel_description, tariff_description, tariff_description_elec, tariff_description_gas, economy7 } = customerInformation;\n\n    // elec_only\n    if (elec_only) {\n      // Firebase\n      await db.collection(\"customers\").doc(uid).set({\n        created: firebase.firestore.FieldValue.serverTimestamp(),\n        step: 5,\n        customerAddres: {\n          doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n          addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n          addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n          city: customerAddres.city ? customerAddres.city : '',\n          postcode: customerAddres.postcode ? customerAddres.postcode : '',\n          mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n          mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n        },\n        MPANDetails: {\n          mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n          meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n          supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n          company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n        },\n        dataGas: {\n          current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n          meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n          mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n          company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n        },\n        useGas: {\n          gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n        },\n        fuel: {\n          dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n        },\n        fuel_description: {\n          dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n          elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n          gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n          same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n        },\n        supplierInformation: {\n          electricity_supplier: {\n            company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n            meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n            mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n            supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n          },\n          gas_supplier: {\n            company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n            current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n            meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n            mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n          }\n        },\n        electricityPaymentType: {\n          electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n          electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n        },\n        gasPaymentType: {\n          gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n          gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n        },\n        tariff_description: {\n          unit_rate: tariff_description.unit_rate ? tariff_description.unit_rate : general_unit_rate_elec\n        },\n        economy7: {\n          economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n          economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n        }\n      });\n    }\n\n    // gas_only\n    if (gas_only) {\n      // Firebase\n      await db.collection(\"customers\").doc(uid).set({\n        created: firebase.firestore.FieldValue.serverTimestamp(),\n        step: 5,\n        customerAddres: {\n          doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n          addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n          addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n          city: customerAddres.city ? customerAddres.city : '',\n          postcode: customerAddres.postcode ? customerAddres.postcode : '',\n          mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n          mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n        },\n        MPANDetails: {\n          mpan_core: electricityInformation.MPANDetails.mpan_core,\n          meter_type: electricityInformation.MPANDetails.meter_type,\n          supplier_mpid: electricityInformation.MPANDetails.supplier_mpid,\n          company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n        },\n        dataGas: {\n          current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n          meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n          mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n          company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n        },\n        useGas: {\n          gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n        },\n        fuel: {\n          dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n        },\n        fuel_description: {\n          dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n          elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n          gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n          same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n        },\n        supplierInformation: {\n          electricity_supplier: {\n            company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n            meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n            mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n            supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n          },\n          gas_supplier: {\n            company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n            current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n            meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n            mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n          }\n        },\n        electricityPaymentType: {\n          electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n          electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n        },\n        gasPaymentType: {\n          gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n          gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n        },\n        tariff_description: {\n          unit_rate: tariff_description.unit_rate ? tariff_description.unit_rate : general_unit_rate_gas\n        },\n        economy7: {\n          economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n          economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n        }\n      });\n    }\n\n    // dual_active\n    if (dual_active) {\n      // same_supplier\n      if (same_supplier) {\n        // Firebase\n        await db.collection(\"customers\").doc(uid).set({\n          created: firebase.firestore.FieldValue.serverTimestamp(),\n          step: 5,\n          customerAddres: {\n            doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n            addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n            addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n            city: customerAddres.city ? customerAddres.city : '',\n            postcode: customerAddres.postcode ? customerAddres.postcode : '',\n            mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n          },\n          MPANDetails: {\n            mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n            supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n            company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n          },\n          dataGas: {\n            current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n            meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n            company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n          },\n          useGas: {\n            gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n          },\n          fuel: {\n            dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n          },\n          fuel_description: {\n            dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n            elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n            gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n            same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n          },\n          supplierInformation: {\n            electricity_supplier: {\n              company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n              meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n              mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n              supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n            },\n            gas_supplier: {\n              company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n              current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n              meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n              mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n            }\n          },\n          electricityPaymentType: {\n            electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n            electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n          },\n          gasPaymentType: {\n            gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n            gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n          },\n          tariff_description: {\n            unit_rate_elec: tariff_description.unit_rate_elec ? tariff_description.unit_rate_elec : general_unit_rate_elec,\n            unit_rate_gas: tariff_description.unit_rate_gas ? tariff_description.unit_rate_gas : general_unit_rate_gas\n          },\n          economy7: {\n            economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n            economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n          }\n        });\n      } else {\n        // Firebase\n        await db.collection(\"customers\").doc(uid).set({\n          created: firebase.firestore.FieldValue.serverTimestamp(),\n          step: 5,\n          customerAddres: {\n            doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n            addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n            addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n            city: customerAddres.city ? customerAddres.city : '',\n            postcode: customerAddres.postcode ? customerAddres.postcode : '',\n            mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n          },\n          MPANDetails: {\n            mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n            meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n            supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n            company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n          },\n          dataGas: {\n            current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n            meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n            mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n            company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n          },\n          useGas: {\n            gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n          },\n          fuel: {\n            dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n          },\n          fuel_description: {\n            dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n            elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n            gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n            same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n          },\n          supplierInformation: {\n            electricity_supplier: {\n              company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n              meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n              mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n              supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n            },\n            gas_supplier: {\n              company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n              current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n              meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n              mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n            }\n          },\n          electricityPaymentType: {\n            electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n            electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n          },\n          gasPaymentType: {\n            gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n            gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n          },\n          tariff_description_elec: {\n            elec_tariff: {\n              unit_rate: tariff_description_elec.elec_tariff.unit_rate ? tariff_description_elec.elec_tariff.unit_rate : general_unit_rate_elec\n            }\n          },\n          tariff_description_gas: {\n            gas_tariff: {\n              unit_rate: tariff_description_gas.gas_tariff.unit_rate ? tariff_description_gas.gas_tariff.unit_rate : general_unit_rate_gas\n            }\n          },\n          economy7: {\n            economy7_apply: economy7.economy7_apply ? economy7.economy7_apply : false,\n            economy7_split: economy7.economy7_split ? economy7.economy7_split : false\n          }\n        });\n      }\n    }\n  };\n\n  // Adding initial customer data to firebase (Coming from Supply cc)\n  useEffect(() => {\n    (async () => {\n      /**-- Firebase --*/\n      const { customerAddres, useGas, fuel, fuel_description } = customerInformation;\n      // Firebase\n      await db.collection(\"customers\").doc(uid).set({\n        created: firebase.firestore.FieldValue.serverTimestamp(),\n        step: 4,\n        customerAddres: {\n          doornumber: customerAddres.doornumber ? customerAddres.doornumber : '',\n          addressline1: customerAddres.addressline1 ? customerAddres.addressline1 : '',\n          addressline2: customerAddres.addressline2 ? customerAddres.addressline2 : '',\n          city: customerAddres.city ? customerAddres.city : '',\n          postcode: customerAddres.postcode ? customerAddres.postcode : '',\n          mpan: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n          mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : ''\n        },\n        MPANDetails: {\n          mpan_core: electricityInformation.MPANDetails.mpan_core ? electricityInformation.MPANDetails.mpan_core : '',\n          meter_type: electricityInformation.MPANDetails.meter_type ? electricityInformation.MPANDetails.meter_type : '',\n          supplier_mpid: electricityInformation.MPANDetails.supplier_mpid ? electricityInformation.MPANDetails.supplier_mpid : '',\n          company_name: electricityInformation.MPANDetails.company_name ? electricityInformation.MPANDetails.company_name : ''\n        },\n        dataGas: {\n          current_supplier_id: gasInformation.dataGas.current_supplier_id ? gasInformation.dataGas.current_supplier_id : '',\n          meter_mechanism_code: gasInformation.dataGas.meter_mechanism_code ? gasInformation.dataGas.meter_mechanism_code : '',\n          mprn: gasInformation.dataGas.mprn ? gasInformation.dataGas.mprn : '',\n          company_name: gasInformation.dataGas.company_name ? gasInformation.dataGas.company_name : ''\n        },\n        useGas: {\n          gas_apply: useGas.gas_apply ? useGas.gas_apply : false\n        },\n        fuel: {\n          dual_fuel_apply: fuel.dual_fuel_apply ? fuel.dual_fuel_apply : false\n        },\n        fuel_description: {\n          dual_active: fuel_description.dual_active ? fuel_description.dual_active : false,\n          elec_only: fuel_description.elec_only ? fuel_description.elec_only : false,\n          gas_only: fuel_description.gas_only ? fuel_description.gas_only : false,\n          same_supplier: fuel_description.same_supplier ? fuel_description.same_supplier : false\n        },\n        supplierInformation: {\n          electricity_supplier: {\n            company_name: supplierInformation.electricity_supplier.company_name ? supplierInformation.electricity_supplier.company_name : '',\n            meter_type: supplierInformation.electricity_supplier.meter_type ? supplierInformation.electricity_supplier.meter_type : '',\n            mpan_core: supplierInformation.electricity_supplier.mpan_core ? supplierInformation.electricity_supplier.mpan_core : '',\n            supplier_mpid: supplierInformation.electricity_supplier.supplier_mpid ? supplierInformation.electricity_supplier.supplier_mpid : ''\n          },\n          gas_supplier: {\n            company_name: supplierInformation.gas_supplier.company_name ? supplierInformation.gas_supplier.company_name : '',\n            current_supplier_id: supplierInformation.gas_supplier.current_supplier_id ? supplierInformation.gas_supplier.current_supplier_id : '',\n            meter_mechanism_code: supplierInformation.gas_supplier.meter_mechanism_code ? supplierInformation.gas_supplier.meter_mechanism_code : '',\n            mprn: supplierInformation.gas_supplier.mprn ? supplierInformation.gas_supplier.mprn : ''\n          }\n        },\n        electricityPaymentType: {\n          electricity_payment_type_id: electricityPaymentType.electricity_payment_type_id ? electricityPaymentType.electricity_payment_type_id : '',\n          electricity_payment_type_method: electricityPaymentType.electricity_payment_type_method ? electricityPaymentType.electricity_payment_type_method : ''\n        },\n        gasPaymentType: {\n          gas_payment_type_id: gasPaymentType.gas_payment_type_id ? gasPaymentType.gas_payment_type_id : '',\n          gas_payment_type_method: gasPaymentType.gas_payment_type_method ? gasPaymentType.gas_payment_type_method : ''\n        },\n      });\n    })();\n\n  }, [FormE7]);\n\n  // Go back\n  const goBack = (e) => {\n    e.preventDefault();\n    // Update Progressbar\n    updateProgressBar({ ...progressBar, step: 4 });\n\n    // Delete economy7_apply from economy7\n    const copy_economy7 = { ...economy7 };\n    delete copy_economy7['economy7'];\n    // Update economy7\n    updateEconomy7({ ...copy_economy7 });\n    // Delete economy7, supplierInformation and electricityPaymentType from Customer Information\n    const copy_customerInformation = { ...customerInformation };\n    delete copy_customerInformation['economy7'];\n    delete copy_customerInformation['supplierInformation'];\n    delete copy_customerInformation['electricityPaymentType'];\n    delete copy_customerInformation['gasPaymentType'];\n    // Update Customer Information\n    updateCustomerInformation({ ...copy_customerInformation });\n    // Update ElectricityPaymentType\n    const copy_electricityPaymentType = { ...electricityPaymentType.delete };\n    updateElectricityPaymentType({ ...copy_electricityPaymentType });\n    // Update gasPaymentType\n    const copy_gasPaymentType = { ...gasPaymentType.delete };\n    updateGasPaymentType({ ...copy_gasPaymentType });\n    // Hidde E7\n    updateShowE7(false);\n    // Hidde Error\n    updateError(false);\n    // Show Form Supply\n    updateShowFormSupply(true);\n  };\n\n  return (\n    <>\n      <section className=\"form-e7-section\">\n        <div className=\"form-e7-container\">\n          <div className=\"form-e7-content\">\n            <div className=\"form-e7\">\n              <h1>Do you have an Economy 7 meter?</h1>\n              <p>Economy 7 electricity tariffs work alongside Economy 7 meters to provide a different price per kWh based on your time of use. These tariffs are based around day and night-time usage, with electricity being cheaper at night but more expensive than normal during the day.</p>\n            </div>\n\n            <form className=\"form-e7-btn-selection-container\">\n              <div data-cy=\"e7-yes\" className=\"form-e7-blocks-dual\">\n                <div className={active_rb_yes ? \"form-e7-btn-selection-content isDual active\" : \"form-e7-btn-selection-content isDual\"} id=\"yes_selected\" onClick={() => handleClickRB_yes()}>\n                  <input className=\"d-none\" type=\"radio\" name=\"dual-type\" id=\"dual_yes\" />\n                  <div className=\"form-e7-cb-container\">\n                    <IconContext.Provider value={{ color: '#31145B', size: '30px' }}>\n                      <FaCheckSquare className=\"form-e7-cb\" />\n                    </IconContext.Provider>\n                  </div>\n\n                  <div className=\"form-e7-btn-selection-dual\">\n                    <IconContext.Provider value={{ color: '#31145B', size: '35px' }}>\n                      <FaRegThumbsUp className=\"fuel-icon\" />\n                    </IconContext.Provider>\n                  </div>\n                  <p>Yes</p>\n                </div>\n              </div>\n\n              <div className=\"form-e7-blocks-dual\">\n                <div data-cy=\"e7-no\" className={active_rb_no ? \"form-e7-btn-selection-content isDual active\" : \"form-e7-btn-selection-content isDual\"} id=\"no_selected\" onClick={() => handleClickRB_no()}>\n                  <input className=\"d-none\" type=\"radio\" name=\"dual-type\" id=\"dual_no\" />\n                  <div className=\"form-e7-cb-container\">\n                    <IconContext.Provider value={{ color: '#31145B', size: '30px' }}>\n                      <FaCheckSquare className=\"form-e7-cb\" />\n                    </IconContext.Provider>\n                  </div>\n\n                  <div className=\"form-e7-btn-selection-dual\">\n                    <IconContext.Provider value={{ color: '#31145B', size: '35px' }}>\n                      <FaRegThumbsDown className=\"fuel-icon\" />\n                    </IconContext.Provider>\n                  </div>\n                  <p>No</p>\n                </div>\n              </div>\n            </form>\n\n            {/* Error */}\n            {error === true ?\n              (\n                <div className=\"error-center\">\n                  <Error message={'Please select above'} />\n                </div>\n              )\n              :\n              null}\n\n            {e7_split ?\n              (\n                <>\n                  <div className=\"form-e7-split-container\">\n                    <label htmlFor=\"e7-split\">What is your Economy 7 split?</label>\n                    <div style={{ display: 'flex' }}>\n                      <div className=\"form-e7-input-content\" >\n                        <input data-cy=\"e7-input\" className=\"form-e7split-input\" ype=\"text\" maxLength=\"3\" id=\"e7-split\" onChange={(e) => handleChange(e)} />\n                        <span>%</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* <div className=\"form-e7-input-container\">\n                    <div className=\"form-e7-input-content\">\n                      <label htmlFor=\"e7-split\">What is your Economy 7 split?</label>\n                      <input className=\"form-e7-input\" type=\"text\" maxLength=\"3\" id=\"e7-split\" onChange={(e) => handleChange(e)} />\n                    </div>\n                  </div> */}\n                </>\n              )\n\n              :\n              null\n            }\n\n            {error_e7_split ?\n              (\n                <div className=\"error-e7\">\n                  <Error message={'Please check your Economy 7 split'} />\n                </div>\n              )\n              :\n              null\n            }\n\n            {/* Buttons */}\n            <div className=\"form-e7-btn-container\">\n              <button className=\"form-e7-btn btn-back\" onClick={(e) => goBack(e)}>\n                <IconContext.Provider value={{ color: '#D338AE', size: '35px' }}>\n                  <IoMdArrowDropleft className=\"icon-back\" />\n                </IconContext.Provider>\n                Go back\n              </button>\n\n              <button data-cy=\"e7-continue\" className=\"form-e7-btn btn-next\" onClick={(e) => sendE7(e)}>\n                Continue\n\n                <IconContext.Provider value={{ color: '#FFF', size: '35px' }}>\n                  <IoMdArrowDropright className=\"icon-next\" />\n                </IconContext.Provider>\n              </button>\n            </div>\n          </div>\n\n          {showScript ?\n            (\n              <div className=\"helper-e7\">\n                <div className=\"script-e7\">\n                  <FormScript step={6} />\n                </div>\n\n                <div className=\"assistant-e7-custom\">\n                  <FormAssistant tips={5} />\n                </div>\n              </div>\n            )\n            :\n            <div style={{ width: '100%' }}>\n              <div className=\"assistant-e7\">\n                <FormAssistant tips={5} />\n              </div>\n            </div>\n          }\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default FormE7;\n","/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormsUsage/FormUsageAVG/FormUsageAVG.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_tariffs/data_tariff_dual/data_dual_tariffs.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_tariffs/data_tariff_gs/data_gas_tariffs.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_tariffs/data_tariffs_es/data_electricity_tariffs.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormScript/FormScript.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/FormCards/FormAssistant/FormAssistant.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/utils/utils.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/hooks/useAddress/useAddress.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/components/ReviewStars/ReviewStars.jsx",[],"/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_gas_supplier/data_gas_supplier_name.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_gas_supplier/data_gas_supplier_id.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_electricity_supplier/data_electricity_supplier_name.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_electricity_supplier/data_electricity_supplier_id.js",[],"/Users/juanlugo/Desktop/sp-firebase/src/utilities/data_electricity_supplier/data_custom_es.js",[],{"ruleId":"279","severity":1,"message":"280","line":1218,"column":29,"nodeType":"281","messageId":"282","endLine":1231,"endColumn":31},{"ruleId":"283","severity":1,"message":"284","line":1225,"column":33,"nodeType":"285","messageId":"286","endLine":1225,"endColumn":86},{"ruleId":"279","severity":1,"message":"287","line":1241,"column":29,"nodeType":"281","messageId":"282","endLine":1253,"endColumn":31},{"ruleId":"283","severity":1,"message":"284","line":195,"column":45,"nodeType":"285","messageId":"286","endLine":195,"endColumn":64},{"ruleId":"283","severity":1,"message":"284","line":208,"column":45,"nodeType":"285","messageId":"286","endLine":208,"endColumn":67},{"ruleId":"288","severity":1,"message":"289","line":226,"column":45,"nodeType":"281","endLine":226,"endColumn":173},{"ruleId":"290","severity":1,"message":"291","line":1,"column":17,"nodeType":"292","messageId":"293","endLine":1,"endColumn":26},{"ruleId":"294","severity":1,"message":"295","line":302,"column":21,"nodeType":"281","messageId":"296","endLine":302,"endColumn":131,"fix":"297"},{"ruleId":"298","severity":1,"message":"299","line":65,"column":6,"nodeType":"300","endLine":65,"endColumn":8,"suggestions":"301"},{"ruleId":"298","severity":1,"message":"302","line":74,"column":6,"nodeType":"300","endLine":74,"endColumn":8,"suggestions":"303"},{"ruleId":"290","severity":1,"message":"304","line":215,"column":15,"nodeType":"292","messageId":"293","endLine":215,"endColumn":35},{"ruleId":"290","severity":1,"message":"305","line":306,"column":15,"nodeType":"292","messageId":"293","endLine":306,"endColumn":30},{"ruleId":"306","severity":1,"message":"307","line":353,"column":84,"nodeType":"308","messageId":"309","endLine":353,"endColumn":85},{"ruleId":"298","severity":1,"message":"310","line":146,"column":6,"nodeType":"300","endLine":146,"endColumn":8,"suggestions":"311"},{"ruleId":"298","severity":1,"message":"312","line":220,"column":6,"nodeType":"300","endLine":220,"endColumn":15,"suggestions":"313"},{"ruleId":"290","severity":1,"message":"304","line":351,"column":15,"nodeType":"292","messageId":"293","endLine":351,"endColumn":35},{"ruleId":"298","severity":1,"message":"314","line":900,"column":6,"nodeType":"300","endLine":900,"endColumn":22,"suggestions":"315"},{"ruleId":"298","severity":1,"message":"316","line":83,"column":6,"nodeType":"300","endLine":83,"endColumn":8,"suggestions":"317"},{"ruleId":"318","severity":1,"message":"319","line":235,"column":63,"nodeType":"308","messageId":"320","endLine":235,"endColumn":65},{"ruleId":"318","severity":1,"message":"319","line":244,"column":63,"nodeType":"308","messageId":"320","endLine":244,"endColumn":65},{"ruleId":"298","severity":1,"message":"321","line":282,"column":6,"nodeType":"300","endLine":282,"endColumn":8,"suggestions":"322"},{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","replacedBy":"326"},{"ruleId":"298","severity":1,"message":"327","line":623,"column":6,"nodeType":"300","endLine":623,"endColumn":19,"suggestions":"328"},{"ruleId":"298","severity":1,"message":"329","line":658,"column":6,"nodeType":"300","endLine":658,"endColumn":27,"suggestions":"330"},{"ruleId":"298","severity":1,"message":"331","line":708,"column":6,"nodeType":"300","endLine":708,"endColumn":14,"suggestions":"332"},{"ruleId":"298","severity":1,"message":"333","line":758,"column":6,"nodeType":"300","endLine":758,"endColumn":14,"suggestions":"334"},{"ruleId":"298","severity":1,"message":"335","line":766,"column":6,"nodeType":"300","endLine":766,"endColumn":35,"suggestions":"336"},{"ruleId":"298","severity":1,"message":"337","line":774,"column":6,"nodeType":"300","endLine":774,"endColumn":27,"suggestions":"338"},{"ruleId":"339","severity":1,"message":"340","line":857,"column":21,"nodeType":"341","messageId":"342","endLine":857,"endColumn":23},{"ruleId":"339","severity":1,"message":"340","line":857,"column":50,"nodeType":"341","messageId":"342","endLine":857,"endColumn":52},{"ruleId":"298","severity":1,"message":"343","line":1034,"column":6,"nodeType":"300","endLine":1034,"endColumn":19,"suggestions":"344"},{"ruleId":"339","severity":1,"message":"340","line":1113,"column":20,"nodeType":"341","messageId":"342","endLine":1113,"endColumn":22},{"ruleId":"339","severity":1,"message":"340","line":1113,"column":49,"nodeType":"341","messageId":"342","endLine":1113,"endColumn":51},{"ruleId":"298","severity":1,"message":"343","line":1290,"column":6,"nodeType":"300","endLine":1290,"endColumn":27,"suggestions":"345"},{"ruleId":"298","severity":1,"message":"346","line":3864,"column":6,"nodeType":"300","endLine":3864,"endColumn":15,"suggestions":"347"},{"ruleId":"298","severity":1,"message":"348","line":3940,"column":6,"nodeType":"300","endLine":3940,"endColumn":18,"suggestions":"349"},{"ruleId":"288","severity":1,"message":"289","line":3969,"column":31,"nodeType":"281","endLine":3969,"endColumn":83},{"ruleId":"288","severity":1,"message":"289","line":3982,"column":31,"nodeType":"281","endLine":3982,"endColumn":53},{"ruleId":"288","severity":1,"message":"289","line":3995,"column":31,"nodeType":"281","endLine":3995,"endColumn":53},{"ruleId":"288","severity":1,"message":"289","line":4010,"column":31,"nodeType":"281","endLine":4010,"endColumn":53},{"ruleId":"288","severity":1,"message":"289","line":4023,"column":31,"nodeType":"281","endLine":4023,"endColumn":58},{"ruleId":"288","severity":1,"message":"289","line":4036,"column":31,"nodeType":"281","endLine":4036,"endColumn":88},{"ruleId":"288","severity":1,"message":"289","line":4309,"column":31,"nodeType":"281","endLine":4309,"endColumn":83},{"ruleId":"288","severity":1,"message":"289","line":4322,"column":31,"nodeType":"281","endLine":4322,"endColumn":53},{"ruleId":"288","severity":1,"message":"289","line":4335,"column":31,"nodeType":"281","endLine":4335,"endColumn":53},{"ruleId":"288","severity":1,"message":"289","line":4350,"column":31,"nodeType":"281","endLine":4350,"endColumn":53},{"ruleId":"288","severity":1,"message":"289","line":4363,"column":31,"nodeType":"281","endLine":4363,"endColumn":58},{"ruleId":"288","severity":1,"message":"289","line":4376,"column":31,"nodeType":"281","endLine":4376,"endColumn":88},{"ruleId":"288","severity":1,"message":"289","line":4600,"column":31,"nodeType":"281","endLine":4600,"endColumn":83},{"ruleId":"288","severity":1,"message":"289","line":4613,"column":31,"nodeType":"281","endLine":4613,"endColumn":53},{"ruleId":"288","severity":1,"message":"289","line":4626,"column":31,"nodeType":"281","endLine":4626,"endColumn":53},{"ruleId":"288","severity":1,"message":"289","line":4641,"column":31,"nodeType":"281","endLine":4641,"endColumn":53},{"ruleId":"288","severity":1,"message":"289","line":4654,"column":31,"nodeType":"281","endLine":4654,"endColumn":58},{"ruleId":"288","severity":1,"message":"289","line":4667,"column":31,"nodeType":"281","endLine":4667,"endColumn":88},{"ruleId":"288","severity":1,"message":"289","line":4932,"column":29,"nodeType":"281","endLine":4932,"endColumn":81},{"ruleId":"288","severity":1,"message":"289","line":4945,"column":29,"nodeType":"281","endLine":4945,"endColumn":51},{"ruleId":"288","severity":1,"message":"289","line":4958,"column":29,"nodeType":"281","endLine":4958,"endColumn":51},{"ruleId":"288","severity":1,"message":"289","line":4973,"column":29,"nodeType":"281","endLine":4973,"endColumn":51},{"ruleId":"288","severity":1,"message":"289","line":4986,"column":29,"nodeType":"281","endLine":4986,"endColumn":56},{"ruleId":"288","severity":1,"message":"289","line":4999,"column":29,"nodeType":"281","endLine":4999,"endColumn":86},{"ruleId":"288","severity":1,"message":"289","line":5281,"column":29,"nodeType":"281","endLine":5281,"endColumn":81},{"ruleId":"288","severity":1,"message":"289","line":5294,"column":29,"nodeType":"281","endLine":5294,"endColumn":51},{"ruleId":"288","severity":1,"message":"289","line":5307,"column":29,"nodeType":"281","endLine":5307,"endColumn":51},{"ruleId":"288","severity":1,"message":"289","line":5322,"column":29,"nodeType":"281","endLine":5322,"endColumn":51},{"ruleId":"288","severity":1,"message":"289","line":5335,"column":29,"nodeType":"281","endLine":5335,"endColumn":56},{"ruleId":"288","severity":1,"message":"289","line":5348,"column":29,"nodeType":"281","endLine":5348,"endColumn":86},{"ruleId":"350","severity":1,"message":"351","line":9,"column":25,"nodeType":"352","messageId":"320","endLine":9,"endColumn":28},{"ruleId":"353","severity":1,"message":"354","line":29,"column":25,"nodeType":"281","endLine":29,"endColumn":72},{"ruleId":"355","severity":1,"message":"356","line":92,"column":9,"nodeType":"308","messageId":"357","endLine":92,"endColumn":24},{"ruleId":"298","severity":1,"message":"358","line":102,"column":6,"nodeType":"300","endLine":102,"endColumn":19,"suggestions":"359"},{"ruleId":"298","severity":1,"message":"360","line":236,"column":6,"nodeType":"300","endLine":236,"endColumn":17,"suggestions":"361"},{"ruleId":"298","severity":1,"message":"362","line":362,"column":6,"nodeType":"300","endLine":362,"endColumn":16,"suggestions":"363"},{"ruleId":"298","severity":1,"message":"364","line":924,"column":6,"nodeType":"300","endLine":924,"endColumn":19,"suggestions":"365"},{"ruleId":"318","severity":1,"message":"366","line":1094,"column":87,"nodeType":"308","messageId":"320","endLine":1094,"endColumn":89},{"ruleId":"318","severity":1,"message":"366","line":1215,"column":85,"nodeType":"308","messageId":"320","endLine":1215,"endColumn":87},{"ruleId":"298","severity":1,"message":"367","line":1568,"column":6,"nodeType":"300","endLine":1568,"endColumn":19,"suggestions":"368"},{"ruleId":"288","severity":1,"message":"289","line":1774,"column":35,"nodeType":"281","endLine":1774,"endColumn":66},{"ruleId":"298","severity":1,"message":"316","line":29,"column":6,"nodeType":"300","endLine":29,"endColumn":8,"suggestions":"369"},{"ruleId":"370","severity":1,"message":"371","line":60,"column":56,"nodeType":"372","messageId":"373","endLine":60,"endColumn":57,"suggestions":"374"},{"ruleId":"370","severity":1,"message":"371","line":57,"column":56,"nodeType":"372","messageId":"373","endLine":57,"endColumn":57,"suggestions":"375"},{"ruleId":"298","severity":1,"message":"316","line":30,"column":6,"nodeType":"300","endLine":30,"endColumn":8,"suggestions":"376"},{"ruleId":"370","severity":1,"message":"371","line":61,"column":56,"nodeType":"372","messageId":"373","endLine":61,"endColumn":57,"suggestions":"377"},{"ruleId":"370","severity":1,"message":"371","line":57,"column":56,"nodeType":"372","messageId":"373","endLine":57,"endColumn":57,"suggestions":"378"},{"ruleId":"370","severity":1,"message":"371","line":74,"column":88,"nodeType":"372","messageId":"373","endLine":74,"endColumn":89,"suggestions":"379"},{"ruleId":"370","severity":1,"message":"371","line":158,"column":53,"nodeType":"372","messageId":"373","endLine":158,"endColumn":54,"suggestions":"380"},{"ruleId":"370","severity":1,"message":"371","line":261,"column":50,"nodeType":"372","messageId":"373","endLine":261,"endColumn":51,"suggestions":"381"},{"ruleId":"298","severity":1,"message":"382","line":306,"column":8,"nodeType":"300","endLine":306,"endColumn":10,"suggestions":"383"},{"ruleId":"370","severity":1,"message":"371","line":342,"column":173,"nodeType":"372","messageId":"373","endLine":342,"endColumn":174,"suggestions":"384"},{"ruleId":"290","severity":1,"message":"385","line":4,"column":10,"nodeType":"292","messageId":"293","endLine":4,"endColumn":12},{"ruleId":"290","severity":1,"message":"386","line":5,"column":8,"nodeType":"292","messageId":"293","endLine":5,"endColumn":16},{"ruleId":"298","severity":1,"message":"387","line":286,"column":6,"nodeType":"300","endLine":286,"endColumn":8,"suggestions":"388"},{"ruleId":"298","severity":1,"message":"389","line":690,"column":6,"nodeType":"300","endLine":690,"endColumn":14,"suggestions":"390"},"react/jsx-pascal-case","Imported JSX component FormUsageGBP_es must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","Imported JSX component FormUsageGBP_gs must be in PascalCase or SCREAMING_SNAKE_CASE","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"391","text":"392"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'supplier_mpid'. Either include it or remove the dependency array.","ArrayExpression",["393"],"React Hook useEffect has a missing dependency: 'current_supplier_id'. Either include it or remove the dependency array.",["394"],"'responseECOESDetails' is assigned a value but never used.","'responseXOSERVE' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has missing dependencies: 'addressList' and 'postcodeValue'. Either include them or remove the dependency array.",["395"],"React Hook useEffect has missing dependencies: 'addressline1', 'addressline2', 'city', 'dataAddress', 'doornumber', 'mpan', 'mprn', and 'postcode'. Either include them or remove the dependency array. You can also do a functional update 'updateDataAddress(d => ...)' if you only need 'dataAddress' in the 'updateDataAddress' call.",["396"],"React Hook useEffect has missing dependencies: 'dataAddress.addressline1', 'dataAddress.addressline2', 'dataAddress.city', 'dataAddress.doornumber', 'dataAddress.postcode', 'electricityInformation.MPANDetails.meter_serial_number', 'electricityInformation.MPANDetails.meter_type', 'electricityInformation.MPANDetails.mpan_core', 'electricityInformation.MPANDetails.supplier_mpid', 'gasInformation.dataGas.current_supplier_id', 'gasInformation.dataGas.gas_transport_id', 'gasInformation.dataGas.meter_mechanism_code', and 'gasInformation.dataGas.mprn'. Either include them or remove the dependency array.",["397"],"React Hook useEffect has a missing dependency: 'updateShowOverlay'. Either include it or remove the dependency array. If 'updateShowOverlay' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["398"],"eqeqeq","Expected '!==' and instead saw '!='.","unexpected","React Hook useEffect has missing dependencies: 'customerInformation', 'dual_active', 'elec_data', 'elec_only', 'gas_data', 'gas_only', 'same_supplier', 'sorted_data', 'supplier_code_es', 'supplier_code_gs', and 'updateCustomerInformation'. Either include them or remove the dependency array. If 'updateCustomerInformation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["399"],"no-native-reassign",["400"],"no-negated-in-lhs",["401"],"React Hook useEffect has missing dependencies: 'electricityInformation', 'meter_type', 'mpan', 'mpan_core', 'supplier', 'supplierInformation', 'supplier_mpid', 'updateElectricityInformation', and 'updateSupplierInformation'. Either include them or remove the dependency array. If 'updateSupplierInformation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["402"],"React Hook useEffect has missing dependencies: 'gasInformation', 'meter_mechanism_code', 'mprn', 'supplier', 'supplierInformation', 'updateGasInformation', and 'updateSupplierInformation'. Either include them or remove the dependency array. If 'updateSupplierInformation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["403"],"React Hook useEffect has missing dependencies: 'current_supplier_id', 'electricityInformation', 'meter_mechanism_code', 'meter_type', 'mpan', 'mprn', 'supplier', 'supplierInformation', 'supplier_mpid', 'updateElectricityInformation', and 'updateSupplierInformation'. Either include them or remove the dependency array. If 'updateSupplierInformation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["404"],"React Hook useEffect has missing dependencies: 'current_supplier_id', 'gasInformation', 'meter_mechanism_code', 'meter_type', 'mpan', 'mprn', 'supplier', 'supplierInformation', 'supplier_id', 'supplier_mpid', 'updateGasInformation', and 'updateSupplierInformation'. Either include them or remove the dependency array. If 'updateSupplierInformation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["405"],"React Hook useEffect has a missing dependency: 'meter_type'. Either include it or remove the dependency array.",["406"],"React Hook useEffect has a missing dependency: 'meter_mechanism_code'. Either include it or remove the dependency array.",["407"],"no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'elec_only', 'gas_only', and 'same_supplier'. Either include them or remove the dependency array.",["408"],["409"],"React Hook useEffect has missing dependencies: 'current_supplier_id', 'dual_fuel', 'electricityInformation.MPANDetails.delete', 'electricityInformation.MPANDetails.meter_type', 'electricityInformation.MPANDetails.supplier_mpid', 'gasInformation', 'same_supplier', 'supplier', 'supplierInformation', 'supplier_id', 'supplier_mpid', 'updateElectricityInformation', 'updateGasInformation', and 'updateSupplierInformation'. Either include them or remove the dependency array. If 'updateGasInformation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["410"],"React Hook useEffect has missing dependencies: 'customerAddres.addressline1', 'customerAddres.addressline2', 'customerAddres.city', 'customerAddres.doornumber', 'customerAddres.postcode', 'customerInformation', 'electricityInformation.MPANDetails.meter_type', 'electricityInformation.MPANDetails.mpan_core', 'electricityInformation.MPANDetails.supplier_mpid', 'fuel.dual_fuel_apply', 'gasInformation.dataGas.current_supplier_id', 'gasInformation.dataGas.meter_mechanism_code', 'gasInformation.dataGas.mprn', 'supplierInformation', 'uid', and 'useGas.gas_apply'. Either include them or remove the dependency array. Outer scope values like 'FormSupply' aren't valid dependencies because mutating them doesn't re-render the component.",["411"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","React Hook useEffect has a missing dependency: 'updateShowOverlay'. Either include it or remove the dependency array. Outer scope values like 'FormCompare' aren't valid dependencies because mutating them doesn't re-render the component.",["412"],"React Hook useEffect has missing dependencies: 'content', 'customerInformation', 'elec_data', 'updateShowOverlay', and 'usage_expended'. Either include them or remove the dependency array. If 'updateShowOverlay' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["413"],"React Hook useEffect has missing dependencies: 'content', 'customerInformation', 'gas_data', 'updateShowOverlay', and 'usage_expended'. Either include them or remove the dependency array. If 'updateShowOverlay' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["414"],"React Hook useEffect has missing dependencies: 'content', 'customerInformation', 'dual_data', 'same_supplier', 'updateShowOverlay', 'usage_expended', 'usage_expended_elec', and 'usage_expended_gas'. Either include them or remove the dependency array. If 'updateShowOverlay' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["415"],"Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'avgElec', 'avgGas', 'customerInformation', 'dual_active', 'elec_only', 'electricityInformation.MPANDetails.company_name', 'electricityInformation.MPANDetails.meter_type', 'electricityInformation.MPANDetails.mpan_core', 'electricityInformation.MPANDetails.supplier_mpid', 'gasInformation.dataGas.company_name', 'gasInformation.dataGas.current_supplier_id', 'gasInformation.dataGas.meter_mechanism_code', 'gasInformation.dataGas.mprn', 'gas_only', 'same_supplier', and 'uid'. Either include them or remove the dependency array. Outer scope values like 'FormCompare' aren't valid dependencies because mutating them doesn't re-render the component.",["416"],["417"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["418","419"],["420","421"],["422"],["423","424"],["425","426"],["427","428"],["429","430"],["431","432"],"React Hook useEffect has missing dependencies: 'customerInformation.customerDetails.email', 'customerInformation.customerDetails.first_name', 'customerInformation.customerDetails.last_name', and 'customerInformation.customerDetails.phone'. Either include them or remove the dependency array.",["433"],["434","435"],"'db' is defined but never used.","'firebase' is defined but never used.","React Hook useEffect has missing dependencies: 'customerInformation', 'dual_active', 'elec_only', 'gas_only', 'general_unit_rate_elec', 'general_unit_rate_gas', 'same_supplier', and 'updateCustomerInformation'. Either include them or remove the dependency array. If 'updateCustomerInformation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["436"],"React Hook useEffect has missing dependencies: 'customerInformation', 'electricityInformation.MPANDetails.company_name', 'electricityInformation.MPANDetails.meter_type', 'electricityInformation.MPANDetails.mpan_core', 'electricityInformation.MPANDetails.supplier_mpid', 'electricityPaymentType.electricity_payment_type_id', 'electricityPaymentType.electricity_payment_type_method', 'gasInformation.dataGas.company_name', 'gasInformation.dataGas.current_supplier_id', 'gasInformation.dataGas.meter_mechanism_code', 'gasInformation.dataGas.mprn', 'gasPaymentType.gas_payment_type_id', 'gasPaymentType.gas_payment_type_method', 'supplierInformation.electricity_supplier.company_name', 'supplierInformation.electricity_supplier.meter_type', 'supplierInformation.electricity_supplier.mpan_core', 'supplierInformation.electricity_supplier.supplier_mpid', 'supplierInformation.gas_supplier.company_name', 'supplierInformation.gas_supplier.current_supplier_id', 'supplierInformation.gas_supplier.meter_mechanism_code', 'supplierInformation.gas_supplier.mprn', and 'uid'. Either include them or remove the dependency array. Outer scope values like 'FormE7' aren't valid dependencies because mutating them doesn't re-render the component.",["437"],[8282,8292],"\"noopener noreferrer\"",{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},"no-global-assign","no-unsafe-negation",{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"448","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"448","fix":"481"},{"messageId":"482","fix":"483","desc":"484"},{"messageId":"485","fix":"486","desc":"487"},{"messageId":"482","fix":"488","desc":"484"},{"messageId":"485","fix":"489","desc":"487"},{"desc":"448","fix":"490"},{"messageId":"482","fix":"491","desc":"484"},{"messageId":"485","fix":"492","desc":"487"},{"messageId":"482","fix":"493","desc":"484"},{"messageId":"485","fix":"494","desc":"487"},{"messageId":"482","fix":"495","desc":"484"},{"messageId":"485","fix":"496","desc":"487"},{"messageId":"482","fix":"497","desc":"484"},{"messageId":"485","fix":"498","desc":"487"},{"messageId":"482","fix":"499","desc":"484"},{"messageId":"485","fix":"500","desc":"487"},{"desc":"501","fix":"502"},{"messageId":"482","fix":"503","desc":"484"},{"messageId":"485","fix":"504","desc":"487"},{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},"Update the dependencies array to be: [supplier_mpid]",{"range":"509","text":"510"},"Update the dependencies array to be: [current_supplier_id]",{"range":"511","text":"512"},"Update the dependencies array to be: [addressList, postcodeValue]",{"range":"513","text":"514"},"Update the dependencies array to be: [address, addressline1, addressline2, city, dataAddress, doornumber, mpan, mprn, postcode]",{"range":"515","text":"516"},"Update the dependencies array to be: [createCustomer, dataAddress.addressline1, dataAddress.addressline2, dataAddress.city, dataAddress.doornumber, dataAddress.postcode, electricityInformation.MPANDetails.meter_serial_number, electricityInformation.MPANDetails.meter_type, electricityInformation.MPANDetails.mpan_core, electricityInformation.MPANDetails.supplier_mpid, gasInformation.dataGas.current_supplier_id, gasInformation.dataGas.gas_transport_id, gasInformation.dataGas.meter_mechanism_code, gasInformation.dataGas.mprn]",{"range":"517","text":"518"},"Update the dependencies array to be: [updateShowOverlay]",{"range":"519","text":"520"},"Update the dependencies array to be: [customerInformation, dual_active, elec_data, elec_only, gas_data, gas_only, same_supplier, sorted_data, supplier_code_es, supplier_code_gs, updateCustomerInformation]",{"range":"521","text":"522"},"Update the dependencies array to be: [electricityInformation, meter_type, mpan, mpan_core, supplier, supplierInformation, supplier_id, supplier_mpid, updateElectricityInformation, updateSupplierInformation]",{"range":"523","text":"524"},"Update the dependencies array to be: [current_supplier_id, gasInformation, meter_mechanism_code, mprn, supplier, supplierInformation, updateGasInformation, updateSupplierInformation]",{"range":"525","text":"526"},"Update the dependencies array to be: [current_supplier_id, editES, electricityInformation, meter_mechanism_code, meter_type, mpan, mprn, supplier, supplierInformation, supplier_mpid, updateElectricityInformation, updateSupplierInformation]",{"range":"527","text":"528"},"Update the dependencies array to be: [current_supplier_id, editGS, gasInformation, meter_mechanism_code, meter_type, mpan, mprn, supplier, supplierInformation, supplier_id, supplier_mpid, updateGasInformation, updateSupplierInformation]",{"range":"529","text":"530"},"Update the dependencies array to be: [electricity_meter_supported, meter_type]",{"range":"531","text":"532"},"Update the dependencies array to be: [gas_meter_supported, meter_mechanism_code]",{"range":"533","text":"534"},"Update the dependencies array to be: [elec_only, gas_only, same_supplier, supplier_id]",{"range":"535","text":"536"},"Update the dependencies array to be: [current_supplier_id, elec_only, gas_only, same_supplier]",{"range":"537","text":"538"},"Update the dependencies array to be: [current_supplier_id, dual_fuel, electricityInformation.MPANDetails.delete, electricityInformation.MPANDetails.meter_type, electricityInformation.MPANDetails.supplier_mpid, es_name, gasInformation, same_supplier, supplier, supplierInformation, supplier_id, supplier_mpid, updateElectricityInformation, updateGasInformation, updateSupplierInformation]",{"range":"539","text":"540"},"Update the dependencies array to be: [customerAddres.addressline1, customerAddres.addressline2, customerAddres.city, customerAddres.doornumber, customerAddres.postcode, customerInformation, electricityInformation.MPANDetails.meter_type, electricityInformation.MPANDetails.mpan_core, electricityInformation.MPANDetails.supplier_mpid, fuel.dual_fuel_apply, gasInformation.dataGas.current_supplier_id, gasInformation.dataGas.meter_mechanism_code, gasInformation.dataGas.mprn, supplierInformation, uid, useGas.gas_apply]",{"range":"541","text":"542"},{"range":"543","text":"520"},"Update the dependencies array to be: [content, customerInformation, elec_data, elec_only, updateShowOverlay, usage_expended]",{"range":"544","text":"545"},"Update the dependencies array to be: [content, customerInformation, gas_data, gas_only, updateShowOverlay, usage_expended]",{"range":"546","text":"547"},"Update the dependencies array to be: [content, customerInformation, dual_active, dual_data, same_supplier, updateShowOverlay, usage_expended, usage_expended_elec, usage_expended_gas]",{"range":"548","text":"549"},"Update the dependencies array to be: [avgElec, avgGas, customerInformation, dual_active, elec_only, electricityInformation.MPANDetails.company_name, electricityInformation.MPANDetails.meter_type, electricityInformation.MPANDetails.mpan_core, electricityInformation.MPANDetails.supplier_mpid, gasInformation.dataGas.company_name, gasInformation.dataGas.current_supplier_id, gasInformation.dataGas.meter_mechanism_code, gasInformation.dataGas.mprn, gas_only, same_supplier, uid]",{"range":"550","text":"551"},{"range":"552","text":"520"},"removeEscape",{"range":"553","text":"554"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"555","text":"556"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"557","text":"554"},{"range":"558","text":"556"},{"range":"559","text":"520"},{"range":"560","text":"554"},{"range":"561","text":"556"},{"range":"562","text":"554"},{"range":"563","text":"556"},{"range":"564","text":"554"},{"range":"565","text":"556"},{"range":"566","text":"554"},{"range":"567","text":"556"},{"range":"568","text":"554"},{"range":"569","text":"556"},"Update the dependencies array to be: [customerInformation.customerDetails.email, customerInformation.customerDetails.first_name, customerInformation.customerDetails.last_name, customerInformation.customerDetails.phone]",{"range":"570","text":"571"},{"range":"572","text":"554"},{"range":"573","text":"556"},"Update the dependencies array to be: [customerInformation, dual_active, elec_only, gas_only, general_unit_rate_elec, general_unit_rate_gas, same_supplier, updateCustomerInformation]",{"range":"574","text":"575"},"Update the dependencies array to be: [customerInformation, electricityInformation.MPANDetails.company_name, electricityInformation.MPANDetails.meter_type, electricityInformation.MPANDetails.mpan_core, electricityInformation.MPANDetails.supplier_mpid, electricityPaymentType.electricity_payment_type_id, electricityPaymentType.electricity_payment_type_method, gasInformation.dataGas.company_name, gasInformation.dataGas.current_supplier_id, gasInformation.dataGas.meter_mechanism_code, gasInformation.dataGas.mprn, gasPaymentType.gas_payment_type_id, gasPaymentType.gas_payment_type_method, supplierInformation.electricity_supplier.company_name, supplierInformation.electricity_supplier.meter_type, supplierInformation.electricity_supplier.mpan_core, supplierInformation.electricity_supplier.supplier_mpid, supplierInformation.gas_supplier.company_name, supplierInformation.gas_supplier.current_supplier_id, supplierInformation.gas_supplier.meter_mechanism_code, supplierInformation.gas_supplier.mprn, uid]",{"range":"576","text":"577"},[2789,2791],"[supplier_mpid]",[3021,3023],"[current_supplier_id]",[4193,4195],"[addressList, postcodeValue]",[6205,6214],"[address, addressline1, addressline2, city, dataAddress, doornumber, mpan, mprn, postcode]",[30569,30585],"[createCustomer, dataAddress.addressline1, dataAddress.addressline2, dataAddress.city, dataAddress.doornumber, dataAddress.postcode, electricityInformation.MPANDetails.meter_serial_number, electricityInformation.MPANDetails.meter_type, electricityInformation.MPANDetails.mpan_core, electricityInformation.MPANDetails.supplier_mpid, gasInformation.dataGas.current_supplier_id, gasInformation.dataGas.gas_transport_id, gasInformation.dataGas.meter_mechanism_code, gasInformation.dataGas.mprn]",[2957,2959],"[updateShowOverlay]",[8984,8986],"[customerInformation, dual_active, elec_data, elec_only, gas_data, gas_only, same_supplier, sorted_data, supplier_code_es, supplier_code_gs, updateCustomerInformation]",[21195,21208],"[electricityInformation, meter_type, mpan, mpan_core, supplier, supplierInformation, supplier_id, supplier_mpid, updateElectricityInformation, updateSupplierInformation]",[22032,22053],"[current_supplier_id, gasInformation, meter_mechanism_code, mprn, supplier, supplierInformation, updateGasInformation, updateSupplierInformation]",[23424,23432],"[current_supplier_id, editES, electricityInformation, meter_mechanism_code, meter_type, mpan, mprn, supplier, supplierInformation, supplier_mpid, updateElectricityInformation, updateSupplierInformation]",[24775,24783],"[current_supplier_id, editGS, gasInformation, meter_mechanism_code, meter_type, mpan, mprn, supplier, supplierInformation, supplier_id, supplier_mpid, updateGasInformation, updateSupplierInformation]",[24976,25005],"[electricity_meter_supported, meter_type]",[25192,25213],"[gas_meter_supported, meter_mechanism_code]",[36096,36109],"[elec_only, gas_only, same_supplier, supplier_id]",[47547,47568],"[current_supplier_id, elec_only, gas_only, same_supplier]",[140593,140602],"[current_supplier_id, dual_fuel, electricityInformation.MPANDetails.delete, electricityInformation.MPANDetails.meter_type, electricityInformation.MPANDetails.supplier_mpid, es_name, gasInformation, same_supplier, supplier, supplierInformation, supplier_id, supplier_mpid, updateElectricityInformation, updateGasInformation, updateSupplierInformation]",[145165,145177],"[customerAddres.addressline1, customerAddres.addressline2, customerAddres.city, customerAddres.doornumber, customerAddres.postcode, customerInformation, electricityInformation.MPANDetails.meter_type, electricityInformation.MPANDetails.mpan_core, electricityInformation.MPANDetails.supplier_mpid, fuel.dual_fuel_apply, gasInformation.dataGas.current_supplier_id, gasInformation.dataGas.meter_mechanism_code, gasInformation.dataGas.mprn, supplierInformation, uid, useGas.gas_apply]",[3775,3788],[7953,7964],"[content, customerInformation, elec_data, elec_only, updateShowOverlay, usage_expended]",[11973,11983],"[content, customerInformation, gas_data, gas_only, updateShowOverlay, usage_expended]",[31603,31616],"[content, customerInformation, dual_active, dual_data, same_supplier, updateShowOverlay, usage_expended, usage_expended_elec, usage_expended_gas]",[63311,63324],"[avgElec, avgGas, customerInformation, dual_active, elec_only, electricityInformation.MPANDetails.company_name, electricityInformation.MPANDetails.meter_type, electricityInformation.MPANDetails.mpan_core, electricityInformation.MPANDetails.supplier_mpid, gasInformation.dataGas.company_name, gasInformation.dataGas.current_supplier_id, gasInformation.dataGas.meter_mechanism_code, gasInformation.dataGas.mprn, gas_only, same_supplier, uid]",[1062,1064],[1892,1893],"",[1892,1892],"\\",[1809,1810],[1809,1809],[1139,1141],[1963,1964],[1963,1963],[1793,1794],[1793,1793],[2453,2454],[2453,2453],[5346,5347],[5346,5346],[8711,8712],[8711,8711],[10270,10272],"[customerInformation.customerDetails.email, customerInformation.customerDetails.first_name, customerInformation.customerDetails.last_name, customerInformation.customerDetails.phone]",[12982,12983],[12982,12982],[7911,7913],"[customerInformation, dual_active, elec_only, gas_only, general_unit_rate_elec, general_unit_rate_gas, same_supplier, updateCustomerInformation]",[32399,32407],"[customerInformation, electricityInformation.MPANDetails.company_name, electricityInformation.MPANDetails.meter_type, electricityInformation.MPANDetails.mpan_core, electricityInformation.MPANDetails.supplier_mpid, electricityPaymentType.electricity_payment_type_id, electricityPaymentType.electricity_payment_type_method, gasInformation.dataGas.company_name, gasInformation.dataGas.current_supplier_id, gasInformation.dataGas.meter_mechanism_code, gasInformation.dataGas.mprn, gasPaymentType.gas_payment_type_id, gasPaymentType.gas_payment_type_method, supplierInformation.electricity_supplier.company_name, supplierInformation.electricity_supplier.meter_type, supplierInformation.electricity_supplier.mpan_core, supplierInformation.electricity_supplier.supplier_mpid, supplierInformation.gas_supplier.company_name, supplierInformation.gas_supplier.current_supplier_id, supplierInformation.gas_supplier.meter_mechanism_code, supplierInformation.gas_supplier.mprn, uid]"]